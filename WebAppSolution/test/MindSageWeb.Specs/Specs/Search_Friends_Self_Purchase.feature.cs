// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlow.GeneratedTests.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class Search_Friends_Self_PurchaseFeature : Xunit.IClassFixture<Search_Friends_Self_PurchaseFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Search_Friends_Self_Purchase.feature"
#line hidden
        
        public Search_Friends_Self_PurchaseFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Search_Friends_Self_Purchase", "\tIn order to avoid silly mistakes\r\n\tAs a math idiot\r\n\tI want to be told the sum o" +
                    "f two numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
 testRunner.Given("Initialize mocking data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.And("System have ClassRoom collection with JSON format are", @"[
    {
        ""id"": ""ClassRoom01"",
        ""Name"": ""Emotional literacy"",
        ""CourseCatalogId"": ""CourseCatalog01"",
        ""CreatedDate"": ""2/1/2016"",
        ""Message"": ""Don't forget to comment a lesson!"",
""IsPublic"": ""true"",
        ""Lessons"":
        [
            {
                ""id"": ""Lesson01"",
                ""TotalLikes"": 0,
                ""LessonCatalogId"": ""LessonCatalog01""
            },
        ]
    }
]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
 testRunner.And("System have UserProfile collection with JSON format are", "[\r\n{\r\n\"id\": \"sakul@mindsage.com\",\r\n\"Name\": \"Sakul\",\r\n\"ImageProfileUrl\": \"sakul.jp" +
                    "g\",\r\n\"Subscriptions\":\r\n[\r\n{\r\n\t\"id\": \"Subscription01\",\r\n\t\"Role\": \"Student\",\r\n\t\"Cl" +
                    "assRoomId\": \"ClassRoom01\",\r\n\t\"ClassCalendarId\": \"ClassCalendar01\",\r\n}\r\n]\r\n},\r\n{\r" +
                    "\n\"id\": \"friend01@mindsage.com\",\r\n\"Name\": \"friend01\",\r\n\"ImageProfileUrl\": \"friend" +
                    "01.jpg\",\r\n\"Subscriptions\":\r\n[\r\n{\r\n\t\"id\": \"Subscription02\",\r\n\t\"Role\": \"Student\",\r" +
                    "\n\t\"ClassRoomId\": \"ClassRoom01\",\r\n\t\"ClassCalendarId\": \"ClassCalendar01\",\r\n}\r\n]\r\n}" +
                    ",\r\n{\r\n\"id\": \"friend02@mindsage.com\",\r\n\"Name\": \"friend02\",\r\n\"ImageProfileUrl\": \"f" +
                    "riend02.jpg\",\r\n\"Subscriptions\":\r\n[\r\n{\r\n\t\"id\": \"Subscription03\",\r\n\t\"Role\": \"Stude" +
                    "nt\",\r\n\t\"ClassRoomId\": \"ClassRoom01\",\r\n\t\"ClassCalendarId\": \"ClassCalendar01\",\r\n}\r" +
                    "\n]\r\n},\r\n{\r\n\"id\": \"waitingForRespond@mindsage.com\",\r\n\"Name\": \"waitingForRespond\"," +
                    "\r\n\"ImageProfileUrl\": \"waitingForRespond.jpg\",\r\n\"Subscriptions\":\r\n[\r\n{\r\n\t\"id\": \"S" +
                    "ubscription04\",\r\n\t\"Role\": \"Student\",\r\n\t\"ClassRoomId\": \"ClassRoom01\",\r\n\t\"ClassCal" +
                    "endarId\": \"ClassCalendar01\",\r\n}\r\n]\r\n},\r\n{\r\n\"id\": \"requestedToBeYourFriend@mindsa" +
                    "ge.com\",\r\n\"Name\": \"requestedToBeYourFriend\",\r\n\"ImageProfileUrl\": \"requestedToBeY" +
                    "ourFriend.jpg\",\r\n\"Subscriptions\":\r\n[\r\n{\r\n\t\"id\": \"Subscription05\",\r\n\t\"Role\": \"Stu" +
                    "dent\",\r\n\t\"ClassRoomId\": \"ClassRoom01\",\r\n\t\"ClassCalendarId\": \"ClassCalendar01\",\r\n" +
                    "}\r\n]\r\n},\r\n{\r\n\"id\": \"sender@mindsage.com\",\r\n\"Name\": \"sender\",\r\n\"ImageProfileUrl\":" +
                    " \"sender.jpg\",\r\n\"Subscriptions\":\r\n[\r\n{\r\n\t\"id\": \"Subscription06\",\r\n\t\"Role\": \"Stud" +
                    "ent\",\r\n\t\"ClassRoomId\": \"ClassRoom01\",\r\n\t\"ClassCalendarId\": \"ClassCalendar01\",\r\n}" +
                    "\r\n]\r\n},\r\n{\r\n\"id\": \"unfriend@mindsage.com\",\r\n\"Name\": \"unfriend\",\r\n\"ImageProfileUr" +
                    "l\": \"unfriend.jpg\",\r\n\"Subscriptions\":\r\n[\r\n{\r\n\t\"id\": \"Subscription07\",\r\n\t\"Role\": " +
                    "\"Student\",\r\n\t\"ClassRoomId\": \"ClassRoom01\",\r\n\t\"ClassCalendarId\": \"ClassCalendar01" +
                    "\",\r\n}\r\n]\r\n},\r\n]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 132
    testRunner.And("System have FriendRequest collection with JSON format are", "[\r\n    {\r\n        \"id\": \"FriendRequest01-A\",\r\n\"FromUserProfileId\": \"sakul@mindsag" +
                    "e.com\",\r\n\"ToUserProfileId\": \"friend01@mindsage.com\",\r\n\"Status\": \"Friend\",\r\n\"Acce" +
                    "ptedDate\": \"2/1/2016\",\r\n\"CreatedDate\": \"2/1/2016\"\r\n    },\r\n{\r\n        \"id\": \"Fri" +
                    "endRequest01-B\",\r\n\"FromUserProfileId\": \"friend01@mindsage.com\",\r\n\"ToUserProfileI" +
                    "d\": \"sakul@mindsage.com\",\r\n\"Status\": \"Friend\",\r\n\"AcceptedDate\": \"2/1/2016\",\r\n\"Cr" +
                    "eatedDate\": \"2/1/2016\"\r\n    },\r\n{\r\n        \"id\": \"FriendRequest02-A\",\r\n\"FromUser" +
                    "ProfileId\": \"sakul@mindsage.com\",\r\n\"ToUserProfileId\": \"friend02@mindsage.com\",\r\n" +
                    "\"Status\": \"Friend\",\r\n\"AcceptedDate\": \"2/1/2016\",\r\n\"CreatedDate\": \"2/1/2016\"\r\n   " +
                    " },\r\n{\r\n        \"id\": \"FriendRequest02-B\",\r\n\"FromUserProfileId\": \"friend02@minds" +
                    "age.com\",\r\n\"ToUserProfileId\": \"sakul@mindsage.com\",\r\n\"Status\": \"Friend\",\r\n\"Accep" +
                    "tedDate\": \"2/1/2016\",\r\n\"CreatedDate\": \"2/1/2016\"\r\n    },\r\n{\r\n        \"id\": \"Frie" +
                    "ndRequest03-A\",\r\n\"FromUserProfileId\": \"sakul@mindsage.com\",\r\n\"ToUserProfileId\": " +
                    "\"waitingForRespond@mindsage.com\",\r\n\"Status\": \"SendRequest\",\r\n\"CreatedDate\": \"2/1" +
                    "/2016\"\r\n    },\r\n{\r\n        \"id\": \"FriendRequest03-B\",\r\n\"FromUserProfileId\": \"wai" +
                    "tingForRespond@mindsage.com\",\r\n\"ToUserProfileId\": \"sakul@mindsage.com\",\r\n\"Status" +
                    "\": \"ReceiveRequest\",\r\n\"CreatedDate\": \"2/1/2016\"\r\n    },\r\n{\r\n        \"id\": \"Frien" +
                    "dRequest04-A\",\r\n\"FromUserProfileId\": \"sakul@mindsage.com\",\r\n\"ToUserProfileId\": \"" +
                    "requestedToBeYourFriend@mindsage.com\",\r\n\"Status\": \"ReceiveRequest\",\r\n\"CreatedDat" +
                    "e\": \"2/1/2016\"\r\n    },\r\n{\r\n        \"id\": \"FriendRequest04-B\",\r\n\"FromUserProfileI" +
                    "d\": \"requestedToBeYourFriend@mindsage.com\",\r\n\"ToUserProfileId\": \"sakul@mindsage." +
                    "com\",\r\n\"Status\": \"SendRequest\",\r\n\"CreatedDate\": \"2/1/2016\"\r\n    },\r\n{\r\n        \"" +
                    "id\": \"FriendRequest05-A\",\r\n\"FromUserProfileId\": \"sakul@mindsage.com\",\r\n\"ToUserPr" +
                    "ofileId\": \"unfriend@mindsage.com\",\r\n\"Status\": \"Unfriend\",\r\n\"AcceptedDate\": \"2/1/" +
                    "2016\",\r\n\"CreatedDate\": \"2/1/2016\",\r\n\"DeletedDate\": \"2/1/2016\"\r\n    },\r\n{\r\n      " +
                    "  \"id\": \"FriendRequest05-B\",\r\n\"FromUserProfileId\": \"unfriend@mindsage.com\",\r\n\"To" +
                    "UserProfileId\": \"sakul@mindsage.com\",\r\n\"Status\": \"Unfriend\",\r\n\"AcceptedDate\": \"2" +
                    "/1/2016\",\r\n\"CreatedDate\": \"2/1/2016\",\r\n\"DeletedDate\": \"2/1/2016\"\r\n    }\r\n]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        public virtual void SetFixture(Search_Friends_Self_PurchaseFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Search_Friends_Self_Purchase")]
        [Xunit.TraitAttribute("Description", "SelfPurchase user search friend with matched keyword (friend only) Then system se" +
            "nd matched users list back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void SelfPurchaseUserSearchFriendWithMatchedKeywordFriendOnlyThenSystemSendMatchedUsersListBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SelfPurchase user search friend with matched keyword (friend only) Then system se" +
                    "nd matched users list back", new string[] {
                        "mock"});
#line 217
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 218
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 219
    testRunner.When("UserProfile \'sakul@mindsage.com\' search friends by keyword \'friend0\' from ClassRo" +
                    "om: \'ClassRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 220
    testRunner.Then("System send friend list with JSON format are", @"[
{
""UserProfileId"": ""friend01@mindsage.com"",
""Name"": ""friend01"",
""ImageUrl"": ""friend01.jpg"",
""Status"": ""Friend"",
""RequestId"": ""FriendRequest01-A""
},
{
""UserProfileId"": ""friend02@mindsage.com"",
""Name"": ""friend02"",
""ImageUrl"": ""friend02.jpg"",
""Status"": ""Friend"",
""RequestId"": ""FriendRequest02-A""
}
]", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Search_Friends_Self_Purchase")]
        [Xunit.TraitAttribute("Description", "SelfPurchase user search friend with matched keyword (Waiting respond only) Then " +
            "system send matched users list back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void SelfPurchaseUserSearchFriendWithMatchedKeywordWaitingRespondOnlyThenSystemSendMatchedUsersListBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SelfPurchase user search friend with matched keyword (Waiting respond only) Then " +
                    "system send matched users list back", new string[] {
                        "mock"});
#line 241
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 242
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 243
    testRunner.When("UserProfile \'sakul@mindsage.com\' search friends by keyword \'waitingForRespond\' fr" +
                    "om ClassRoom: \'ClassRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 244
    testRunner.Then("System send friend list with JSON format are", "[\r\n{\r\n\"UserProfileId\": \"waitingForRespond@mindsage.com\",\r\n\"Name\": \"waitingForResp" +
                    "ond\",\r\n\"ImageUrl\": \"waitingForRespond.jpg\",\r\n\"Status\": \"SendRequest\",\r\n\"RequestI" +
                    "d\": \"FriendRequest03-A\",\r\n}\r\n]", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Search_Friends_Self_Purchase")]
        [Xunit.TraitAttribute("Description", "SelfPurchase user search friend with matched keyword (Received request only) Then" +
            " system send matched users list back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void SelfPurchaseUserSearchFriendWithMatchedKeywordReceivedRequestOnlyThenSystemSendMatchedUsersListBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SelfPurchase user search friend with matched keyword (Received request only) Then" +
                    " system send matched users list back", new string[] {
                        "mock"});
#line 258
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 259
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 260
    testRunner.When("UserProfile \'sakul@mindsage.com\' search friends by keyword \'requestedToBeYourFrie" +
                    "nd\' from ClassRoom: \'ClassRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 261
    testRunner.Then("System send friend list with JSON format are", "[\r\n{\r\n\"UserProfileId\": \"requestedToBeYourFriend@mindsage.com\",\r\n\"Name\": \"requeste" +
                    "dToBeYourFriend\",\r\n\"ImageUrl\": \"requestedToBeYourFriend.jpg\",\r\n\"Status\": \"Receiv" +
                    "eRequest\",\r\n\"RequestId\": \"FriendRequest04-A\",\r\n}\r\n]", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Search_Friends_Self_Purchase")]
        [Xunit.TraitAttribute("Description", "SelfPurchase user search friend with matched keyword (Unfriend only) Then system " +
            "send matched users list back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void SelfPurchaseUserSearchFriendWithMatchedKeywordUnfriendOnlyThenSystemSendMatchedUsersListBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SelfPurchase user search friend with matched keyword (Unfriend only) Then system " +
                    "send matched users list back", new string[] {
                        "mock"});
#line 275
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 276
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 277
    testRunner.When("UserProfile \'sakul@mindsage.com\' search friends by keyword \'unfriend\' from ClassR" +
                    "oom: \'ClassRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 278
    testRunner.Then("System send friend list with JSON format are", "[\r\n{\r\n\"UserProfileId\": \"unfriend@mindsage.com\",\r\n\"Name\": \"unfriend\",\r\n\"ImageUrl\":" +
                    " \"unfriend.jpg\",\r\n\"Status\": \"Unfriend\",\r\n\"RequestId\": \"FriendRequest05-A\",\r\n}\r\n]" +
                    "", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Search_Friends_Self_Purchase")]
        [Xunit.TraitAttribute("Description", "SelfPurchase user search friend with matched keyword (case sensitive) Then system" +
            " send matched users list back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void SelfPurchaseUserSearchFriendWithMatchedKeywordCaseSensitiveThenSystemSendMatchedUsersListBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SelfPurchase user search friend with matched keyword (case sensitive) Then system" +
                    " send matched users list back", new string[] {
                        "mock"});
#line 292
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 293
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 294
    testRunner.When("UserProfile \'sakul@mindsage.com\' search friends by keyword \'FRIEnd\' from ClassRoo" +
                    "m: \'ClassRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 295
    testRunner.Then("System send friend list with JSON format are", @"[
{
""UserProfileId"": ""friend01@mindsage.com"",
""Name"": ""friend01"",
""ImageUrl"": ""friend01.jpg"",
""Status"": ""Friend"",
""RequestId"": ""FriendRequest01-A""
},
{
""UserProfileId"": ""friend02@mindsage.com"",
""Name"": ""friend02"",
""ImageUrl"": ""friend02.jpg"",
""Status"": ""Friend"",
""RequestId"": ""FriendRequest02-A""
},
{
""UserProfileId"": ""requestedToBeYourFriend@mindsage.com"",
""Name"": ""requestedToBeYourFriend"",
""ImageUrl"": ""requestedToBeYourFriend.jpg"",
""Status"": ""ReceiveRequest"",
""RequestId"": ""FriendRequest04-A"",
},
{
""UserProfileId"": ""unfriend@mindsage.com"",
""Name"": ""unfriend"",
""ImageUrl"": ""unfriend.jpg"",
""Status"": ""Unfriend"",
""RequestId"": ""FriendRequest05-A"",
}
]", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Search_Friends_Self_Purchase")]
        [Xunit.TraitAttribute("Description", "SelfPurchase user search friend with no matched keyword Then system send matched " +
            "users list back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void SelfPurchaseUserSearchFriendWithNoMatchedKeywordThenSystemSendMatchedUsersListBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SelfPurchase user search friend with no matched keyword Then system send matched " +
                    "users list back", new string[] {
                        "mock"});
#line 330
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 331
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 332
    testRunner.When("UserProfile \'sakul@mindsage.com\' search friends by keyword \'UnmatchedKeyword\' fro" +
                    "m ClassRoom: \'ClassRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 333
    testRunner.Then("System send friend list with JSON format are", "[]", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Search_Friends_Self_Purchase")]
        [Xunit.TraitAttribute("Description", "SelfPurchase user search friend with matched keyword but those users was deleted " +
            "Then system send matched users list back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void SelfPurchaseUserSearchFriendWithMatchedKeywordButThoseUsersWasDeletedThenSystemSendMatchedUsersListBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SelfPurchase user search friend with matched keyword but those users was deleted " +
                    "Then system send matched users list back", new string[] {
                        "mock"});
#line 339
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 340
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 341
 testRunner.And("System have UserProfile collection with JSON format are", "[\r\n{\r\n\"id\": \"sakul@mindsage.com\",\r\n\"Name\": \"Sakul\",\r\n\"ImageProfileUrl\": \"sakul.jp" +
                    "g\",\r\n\"Subscriptions\":\r\n[\r\n{\r\n\t\"id\": \"Subscription01\",\r\n\t\"Role\": \"Student\",\r\n\t\"Cl" +
                    "assRoomId\": \"ClassRoom01\",\r\n\t\"ClassCalendarId\": \"ClassCalendar01\",\r\n}\r\n]\r\n},\r\n{\r" +
                    "\n\"id\": \"friend01@mindsage.com\",\r\n\"Name\": \"friend01\",\r\n\"ImageProfileUrl\": \"friend" +
                    "01.jpg\",\r\n\"DeletedDate\": \"1/1/2016\",\r\n\"Subscriptions\":\r\n[\r\n{\r\n\t\"id\": \"Subscripti" +
                    "on02\",\r\n\t\"Role\": \"Student\",\r\n\t\"ClassRoomId\": \"ClassRoom01\",\r\n\t\"ClassCalendarId\":" +
                    " \"ClassCalendar01\",\r\n}\r\n]\r\n},\r\n{\r\n\"id\": \"friend02@mindsage.com\",\r\n\"Name\": \"frien" +
                    "d02\",\r\n\"ImageProfileUrl\": \"friend02.jpg\",\r\n\"DeletedDate\": \"1/1/2016\",\r\n\"Subscrip" +
                    "tions\":\r\n[\r\n{\r\n\t\"id\": \"Subscription03\",\r\n\t\"Role\": \"Student\",\r\n\t\"ClassRoomId\": \"C" +
                    "lassRoom01\",\r\n\t\"ClassCalendarId\": \"ClassCalendar01\",\r\n}\r\n]\r\n},\r\n{\r\n\"id\": \"waitin" +
                    "gForRespond@mindsage.com\",\r\n\"Name\": \"waitingForRespond\",\r\n\"ImageProfileUrl\": \"wa" +
                    "itingForRespond.jpg\",\r\n\"DeletedDate\": \"1/1/2016\",\r\n\"Subscriptions\":\r\n[\r\n{\r\n\t\"id\"" +
                    ": \"Subscription04\",\r\n\t\"Role\": \"Student\",\r\n\t\"ClassRoomId\": \"ClassRoom01\",\r\n\t\"Clas" +
                    "sCalendarId\": \"ClassCalendar01\",\r\n}\r\n]\r\n},\r\n{\r\n\"id\": \"requestedToBeYourFriend@mi" +
                    "ndsage.com\",\r\n\"Name\": \"requestedToBeYourFriend\",\r\n\"ImageProfileUrl\": \"requestedT" +
                    "oBeYourFriend.jpg\",\r\n\"DeletedDate\": \"1/1/2016\",\r\n\"Subscriptions\":\r\n[\r\n{\r\n\t\"id\": " +
                    "\"Subscription05\",\r\n\t\"Role\": \"Student\",\r\n\t\"ClassRoomId\": \"ClassRoom01\",\r\n\t\"ClassC" +
                    "alendarId\": \"ClassCalendar01\",\r\n}\r\n]\r\n},\r\n{\r\n\"id\": \"sender@mindsage.com\",\r\n\"Name" +
                    "\": \"sender\",\r\n\"ImageProfileUrl\": \"sender.jpg\",\r\n\"DeletedDate\": \"1/1/2016\",\r\n\"Sub" +
                    "scriptions\":\r\n[\r\n{\r\n\t\"id\": \"Subscription06\",\r\n\t\"Role\": \"Student\",\r\n\t\"ClassRoomId" +
                    "\": \"ClassRoom01\",\r\n\t\"ClassCalendarId\": \"ClassCalendar01\",\r\n}\r\n]\r\n},\r\n{\r\n\"id\": \"u" +
                    "nfriend@mindsage.com\",\r\n\"Name\": \"unfriend\",\r\n\"ImageProfileUrl\": \"unfriend.jpg\",\r" +
                    "\n\"DeletedDate\": \"1/1/2016\",\r\n\"Subscriptions\":\r\n[\r\n{\r\n\t\"id\": \"Subscription07\",\r\n\t" +
                    "\"Role\": \"Student\",\r\n\t\"ClassRoomId\": \"ClassRoom01\",\r\n\t\"ClassCalendarId\": \"ClassCa" +
                    "lendar01\",\r\n}\r\n]\r\n},\r\n]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 450
    testRunner.When("UserProfile \'sakul@mindsage.com\' search friends by keyword \'friend0\' from ClassRo" +
                    "om: \'ClassRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 451
    testRunner.Then("System send friend list with JSON format are", "[]", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Search_Friends_Self_Purchase")]
        [Xunit.TraitAttribute("Description", "SelfPurchase user search friend with matched keyword but those users\' subscriptio" +
            "ns was deleted Then system send matched users list back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void SelfPurchaseUserSearchFriendWithMatchedKeywordButThoseUsersSubscriptionsWasDeletedThenSystemSendMatchedUsersListBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SelfPurchase user search friend with matched keyword but those users\' subscriptio" +
                    "ns was deleted Then system send matched users list back", new string[] {
                        "mock"});
#line 457
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 458
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 459
 testRunner.And("System have UserProfile collection with JSON format are", "[\r\n{\r\n\"id\": \"sakul@mindsage.com\",\r\n\"Name\": \"Sakul\",\r\n\"ImageProfileUrl\": \"sakul.jp" +
                    "g\",\r\n\"Subscriptions\":\r\n[\r\n{\r\n\t\"id\": \"Subscription01\",\r\n\t\"Role\": \"Student\",\r\n\t\"Cl" +
                    "assRoomId\": \"ClassRoom01\",\r\n\t\"ClassCalendarId\": \"ClassCalendar01\",\r\n}\r\n]\r\n},\r\n{\r" +
                    "\n\"id\": \"friend01@mindsage.com\",\r\n\"Name\": \"friend01\",\r\n\"ImageProfileUrl\": \"friend" +
                    "01.jpg\",\r\n\"Subscriptions\":\r\n[\r\n{\r\n\t\"id\": \"Subscription02\",\r\n\t\"Role\": \"Student\",\r" +
                    "\n\t\"ClassRoomId\": \"ClassRoom01\",\r\n\t\"ClassCalendarId\": \"ClassCalendar01\",\r\n\t\"Delet" +
                    "edDate\": \"1/1/2016\",\r\n}\r\n]\r\n},\r\n{\r\n\"id\": \"friend02@mindsage.com\",\r\n\"Name\": \"frie" +
                    "nd02\",\r\n\"ImageProfileUrl\": \"friend02.jpg\",\r\n\"Subscriptions\":\r\n[\r\n{\r\n\t\"id\": \"Subs" +
                    "cription03\",\r\n\t\"Role\": \"Student\",\r\n\t\"ClassRoomId\": \"ClassRoom01\",\r\n\t\"ClassCalend" +
                    "arId\": \"ClassCalendar01\",\r\n\t\"DeletedDate\": \"1/1/2016\",\r\n}\r\n]\r\n},\r\n{\r\n\"id\": \"wait" +
                    "ingForRespond@mindsage.com\",\r\n\"Name\": \"waitingForRespond\",\r\n\"ImageProfileUrl\": \"" +
                    "waitingForRespond.jpg\",\r\n\"Subscriptions\":\r\n[\r\n{\r\n\t\"id\": \"Subscription04\",\r\n\t\"Rol" +
                    "e\": \"Student\",\r\n\t\"ClassRoomId\": \"ClassRoom01\",\r\n\t\"ClassCalendarId\": \"ClassCalend" +
                    "ar01\",\r\n\t\"DeletedDate\": \"1/1/2016\",\r\n}\r\n]\r\n},\r\n{\r\n\"id\": \"requestedToBeYourFriend" +
                    "@mindsage.com\",\r\n\"Name\": \"requestedToBeYourFriend\",\r\n\"ImageProfileUrl\": \"request" +
                    "edToBeYourFriend.jpg\",\r\n\"Subscriptions\":\r\n[\r\n{\r\n\t\"id\": \"Subscription05\",\r\n\t\"Role" +
                    "\": \"Student\",\r\n\t\"ClassRoomId\": \"ClassRoom01\",\r\n\t\"ClassCalendarId\": \"ClassCalenda" +
                    "r01\",\r\n\t\"DeletedDate\": \"1/1/2016\",\r\n}\r\n]\r\n},\r\n{\r\n\"id\": \"sender@mindsage.com\",\r\n\"" +
                    "Name\": \"sender\",\r\n\"ImageProfileUrl\": \"sender.jpg\",\r\n\"Subscriptions\":\r\n[\r\n{\r\n\t\"id" +
                    "\": \"Subscription06\",\r\n\t\"Role\": \"Student\",\r\n\t\"ClassRoomId\": \"ClassRoom01\",\r\n\t\"Cla" +
                    "ssCalendarId\": \"ClassCalendar01\",\r\n\t\"DeletedDate\": \"1/1/2016\",\r\n}\r\n]\r\n},\r\n{\r\n\"id" +
                    "\": \"unfriend@mindsage.com\",\r\n\"Name\": \"unfriend\",\r\n\"ImageProfileUrl\": \"unfriend.j" +
                    "pg\",\r\n\"Subscriptions\":\r\n[\r\n{\r\n\t\"id\": \"Subscription07\",\r\n\t\"Role\": \"Student\",\r\n\t\"C" +
                    "lassRoomId\": \"ClassRoom01\",\r\n\t\"ClassCalendarId\": \"ClassCalendar01\",\r\n\t\"DeletedDa" +
                    "te\": \"1/1/2016\",\r\n}\r\n]\r\n},\r\n]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 568
    testRunner.When("UserProfile \'sakul@mindsage.com\' search friends by keyword \'friend0\' from ClassRo" +
                    "om: \'ClassRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 569
    testRunner.Then("System send friend list with JSON format are", "[]", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Search_Friends_Self_Purchase")]
        [Xunit.TraitAttribute("Description", "SelfPurchase user search friend when user is the only one in the course Then syst" +
            "em send matched users list back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void SelfPurchaseUserSearchFriendWhenUserIsTheOnlyOneInTheCourseThenSystemSendMatchedUsersListBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SelfPurchase user search friend when user is the only one in the course Then syst" +
                    "em send matched users list back", new string[] {
                        "mock"});
#line 575
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 576
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 577
 testRunner.And("System have UserProfile collection with JSON format are", "[\r\n{\r\n\"id\": \"sakul@mindsage.com\",\r\n\"Name\": \"Sakul\",\r\n\"ImageProfileUrl\": \"sakul.jp" +
                    "g\",\r\n\"Subscriptions\":\r\n[\r\n{\r\n\t\"id\": \"Subscription01\",\r\n\t\"Role\": \"Student\",\r\n\t\"Cl" +
                    "assRoomId\": \"ClassRoom01\",\r\n\t\"ClassCalendarId\": \"ClassCalendar01\",\r\n}\r\n]\r\n}\r\n]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 596
    testRunner.When("UserProfile \'sakul@mindsage.com\' search friends by keyword \'friend0\' from ClassRo" +
                    "om: \'ClassRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 597
    testRunner.Then("System send friend list with JSON format are", "[]", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Search_Friends_Self_Purchase")]
        [Xunit.TraitAttribute("Description", "SelfPurchase user search friend with no matched keyword (empty) Then system send " +
            "matched users list back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void SelfPurchaseUserSearchFriendWithNoMatchedKeywordEmptyThenSystemSendMatchedUsersListBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SelfPurchase user search friend with no matched keyword (empty) Then system send " +
                    "matched users list back", new string[] {
                        "mock"});
#line 603
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 604
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 605
    testRunner.When("UserProfile \'sakul@mindsage.com\' search friends by keyword \'\' from ClassRoom: \'Cl" +
                    "assRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 606
    testRunner.Then("System send friend list with JSON format are", "[]", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Search_Friends_Self_Purchase")]
        [Xunit.TraitAttribute("Description", "SelfPurchase user search friend with no matched keyword (null) Then system send m" +
            "atched users list back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void SelfPurchaseUserSearchFriendWithNoMatchedKeywordNullThenSystemSendMatchedUsersListBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SelfPurchase user search friend with no matched keyword (null) Then system send m" +
                    "atched users list back", new string[] {
                        "mock"});
#line 612
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 613
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 614
    testRunner.When("UserProfile \'sakul@mindsage.com\' search friends by keyword \'NULL\' from ClassRoom:" +
                    " \'ClassRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 615
    testRunner.Then("System send friend list with JSON format are", "[]", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Search_Friends_Self_Purchase")]
        [Xunit.TraitAttribute("Description", "Incorrect user (unknow) search friend with matched keyword Then system send match" +
            "ed users list back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void IncorrectUserUnknowSearchFriendWithMatchedKeywordThenSystemSendMatchedUsersListBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Incorrect user (unknow) search friend with matched keyword Then system send match" +
                    "ed users list back", new string[] {
                        "mock"});
#line 621
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 622
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 623
    testRunner.When("UserProfile \'unknow@mindsage.com\' search friends by keyword \'friend\' from ClassRo" +
                    "om: \'ClassRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 624
    testRunner.Then("System send friend list with JSON format are", "[]", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Search_Friends_Self_Purchase")]
        [Xunit.TraitAttribute("Description", "Incorrect user (empty) search friend with matched keyword Then system send matche" +
            "d users list back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void IncorrectUserEmptySearchFriendWithMatchedKeywordThenSystemSendMatchedUsersListBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Incorrect user (empty) search friend with matched keyword Then system send matche" +
                    "d users list back", new string[] {
                        "mock"});
#line 630
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 631
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 632
    testRunner.When("UserProfile \'\' search friends by keyword \'friend\' from ClassRoom: \'ClassRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 633
    testRunner.Then("System send friend list with JSON format are", "[]", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Search_Friends_Self_Purchase")]
        [Xunit.TraitAttribute("Description", "Incorrect user (null) search friend with matched keyword Then system send matched" +
            " users list back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void IncorrectUserNullSearchFriendWithMatchedKeywordThenSystemSendMatchedUsersListBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Incorrect user (null) search friend with matched keyword Then system send matched" +
                    " users list back", new string[] {
                        "mock"});
#line 639
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 640
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 641
    testRunner.When("UserProfile \'NULL\' search friends by keyword \'friend\' from ClassRoom: \'ClassRoom0" +
                    "1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 642
    testRunner.Then("System send friend list with JSON format are", "[]", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Search_Friends_Self_Purchase")]
        [Xunit.TraitAttribute("Description", "Incorrect user (no subscription) search friend Then system send matched users lis" +
            "t back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void IncorrectUserNoSubscriptionSearchFriendThenSystemSendMatchedUsersListBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Incorrect user (no subscription) search friend Then system send matched users lis" +
                    "t back", new string[] {
                        "mock"});
#line 648
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 649
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 650
 testRunner.And("System have UserProfile collection with JSON format are", @"[
{
""id"": ""sakul@mindsage.com"",
""Name"": ""Sakul"",
""ImageProfileUrl"": ""sakul.jpg"",
""Subscriptions"": []
},
{
""id"": ""friend01@mindsage.com"",
""Name"": ""friend01"",
""ImageProfileUrl"": ""friend01.jpg"",
""Subscriptions"":
[
{
	""id"": ""Subscription02"",
	""Role"": ""Student"",
	""ClassRoomId"": ""ClassRoom01"",
	""ClassCalendarId"": ""ClassCalendar01"",
}
]
},
{
""id"": ""friend02@mindsage.com"",
""Name"": ""friend02"",
""ImageProfileUrl"": ""friend02.jpg"",
""Subscriptions"":
[
{
	""id"": ""Subscription03"",
	""Role"": ""Student"",
	""ClassRoomId"": ""ClassRoom01"",
	""ClassCalendarId"": ""ClassCalendar01"",
}
]
}
]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 689
    testRunner.When("UserProfile \'sakul@mindsage.com\' search friends by keyword \'friend\' from ClassRoo" +
                    "m: \'ClassRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 690
    testRunner.Then("System send friend list with JSON format are", "[]", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Search_Friends_Self_Purchase")]
        [Xunit.TraitAttribute("Description", "SelfPurchase user search friend but used incorrect ClassRoom (unknow) Then system" +
            " send matched users list back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void SelfPurchaseUserSearchFriendButUsedIncorrectClassRoomUnknowThenSystemSendMatchedUsersListBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SelfPurchase user search friend but used incorrect ClassRoom (unknow) Then system" +
                    " send matched users list back", new string[] {
                        "mock"});
#line 696
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 697
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 698
    testRunner.When("UserProfile \'sakul@mindsage.com\' search friends by keyword \'friend\' from ClassRoo" +
                    "m: \'UnknowClassRoom\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 699
    testRunner.Then("System send friend list with JSON format are", "[]", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Search_Friends_Self_Purchase")]
        [Xunit.TraitAttribute("Description", "SelfPurchase user search friend but used incorrect ClassRoom (empty) Then system " +
            "send matched users list back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void SelfPurchaseUserSearchFriendButUsedIncorrectClassRoomEmptyThenSystemSendMatchedUsersListBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SelfPurchase user search friend but used incorrect ClassRoom (empty) Then system " +
                    "send matched users list back", new string[] {
                        "mock"});
#line 705
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 706
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 707
    testRunner.When("UserProfile \'sakul@mindsage.com\' search friends by keyword \'friend\' from ClassRoo" +
                    "m: \'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 708
    testRunner.Then("System send friend list with JSON format are", "[]", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Search_Friends_Self_Purchase")]
        [Xunit.TraitAttribute("Description", "SelfPurchase user search friend but used incorrect ClassRoom (null) Then system s" +
            "end matched users list back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void SelfPurchaseUserSearchFriendButUsedIncorrectClassRoomNullThenSystemSendMatchedUsersListBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SelfPurchase user search friend but used incorrect ClassRoom (null) Then system s" +
                    "end matched users list back", new string[] {
                        "mock"});
#line 714
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 715
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 716
    testRunner.When("UserProfile \'sakul@mindsage.com\' search friends by keyword \'friend\' from ClassRoo" +
                    "m: \'NULL\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 717
    testRunner.Then("System send friend list with JSON format are", "[]", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Search_Friends_Self_Purchase")]
        [Xunit.TraitAttribute("Description", "SelfPurchase user search friend but ClassRoom was deleted Then system send matche" +
            "d users list back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void SelfPurchaseUserSearchFriendButClassRoomWasDeletedThenSystemSendMatchedUsersListBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SelfPurchase user search friend but ClassRoom was deleted Then system send matche" +
                    "d users list back", new string[] {
                        "mock"});
#line 723
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 724
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 725
 testRunner.And("System have ClassRoom collection with JSON format are", @"[
    {
        ""id"": ""ClassRoom01"",
        ""Name"": ""Emotional literacy"",
        ""CourseCatalogId"": ""CourseCatalog01"",
        ""CreatedDate"": ""2/1/2016"",
        ""Message"": ""Don't forget to comment a lesson!"",
""IsPublic"": ""true"",
""DeletedDate"": ""1/1/2016"",
        ""Lessons"":
        [
            {
                ""id"": ""Lesson01"",
                ""TotalLikes"": 0,
                ""LessonCatalogId"": ""LessonCatalog01""
            },
        ]
    }
]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 747
    testRunner.When("UserProfile \'sakul@mindsage.com\' search friends by keyword \'friend\' from ClassRoo" +
                    "m: \'ClassRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 748
    testRunner.Then("System send friend list with JSON format are", "[]", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Search_Friends_Self_Purchase")]
        [Xunit.TraitAttribute("Description", "SelfPurchase user search friend but ClassRoom doesn\'t existing Then system send m" +
            "atched users list back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void SelfPurchaseUserSearchFriendButClassRoomDoesnTExistingThenSystemSendMatchedUsersListBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SelfPurchase user search friend but ClassRoom doesn\'t existing Then system send m" +
                    "atched users list back", new string[] {
                        "mock"});
#line 754
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 755
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 756
 testRunner.And("System have ClassRoom collection with JSON format are", "[]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 760
    testRunner.When("UserProfile \'sakul@mindsage.com\' search friends by keyword \'friend\' from ClassRoo" +
                    "m: \'ClassRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 761
    testRunner.Then("System send friend list with JSON format are", "[]", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Search_Friends_Self_Purchase")]
        [Xunit.TraitAttribute("Description", "SelfPurchase user search friend but its subscription was deleted Then system send" +
            " matched users list back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void SelfPurchaseUserSearchFriendButItsSubscriptionWasDeletedThenSystemSendMatchedUsersListBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SelfPurchase user search friend but its subscription was deleted Then system send" +
                    " matched users list back", new string[] {
                        "mock"});
#line 767
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 768
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 769
 testRunner.And("System have UserProfile collection with JSON format are", @"[
{
""id"": ""sakul@mindsage.com"",
""Name"": ""Sakul"",
""ImageProfileUrl"": ""sakul.jpg"",
""Subscriptions"":
[
{
	""id"": ""Subscription01"",
	""Role"": ""Student"",
	""ClassRoomId"": ""ClassRoom01"",
	""ClassCalendarId"": ""ClassCalendar01"",
	""DeletedDate"": ""1/1/2016""
}
]
},
{
""id"": ""friend01@mindsage.com"",
""Name"": ""friend01"",
""ImageProfileUrl"": ""friend01.jpg"",
""Subscriptions"":
[
{
	""id"": ""Subscription02"",
	""Role"": ""Student"",
	""ClassRoomId"": ""ClassRoom01"",
	""ClassCalendarId"": ""ClassCalendar01"",
}
]
},
{
""id"": ""friend02@mindsage.com"",
""Name"": ""friend02"",
""ImageProfileUrl"": ""friend02.jpg"",
""Subscriptions"":
[
{
	""id"": ""Subscription03"",
	""Role"": ""Student"",
	""ClassRoomId"": ""ClassRoom01"",
	""ClassCalendarId"": ""ClassCalendar01"",
}
]
}
]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 817
    testRunner.When("UserProfile \'sakul@mindsage.com\' search friends by keyword \'friend\' from ClassRoo" +
                    "m: \'ClassRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 818
    testRunner.Then("System send friend list with JSON format are", "[]", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                Search_Friends_Self_PurchaseFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                Search_Friends_Self_PurchaseFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
