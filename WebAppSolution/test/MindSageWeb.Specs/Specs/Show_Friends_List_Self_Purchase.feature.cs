// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlow.GeneratedTests.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class Show_Friends_List_Self_PurchaseFeature : Xunit.IClassFixture<Show_Friends_List_Self_PurchaseFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Show_Friends_List_Self_Purchase.feature"
#line hidden
        
        public Show_Friends_List_Self_PurchaseFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Show_Friends_List_Self_Purchase", "\tIn order to avoid silly mistakes\r\n\tAs a math idiot\r\n\tI want to be told the sum o" +
                    "f two numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
 testRunner.Given("Initialize mocking data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.And("System have ClassRoom collection with JSON format are", @"[
    {
        ""id"": ""ClassRoom01"",
        ""Name"": ""Emotional literacy"",
        ""CourseCatalogId"": ""CourseCatalog01"",
        ""CreatedDate"": ""2/1/2016"",
        ""Message"": ""Don't forget to comment a lesson!"",
""IsPublic"": ""true"",
        ""Lessons"":
        [
            {
                ""id"": ""Lesson01"",
                ""TotalLikes"": 0,
                ""LessonCatalogId"": ""LessonCatalog01""
            },
        ]
    }
]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
 testRunner.And("System have UserProfile collection with JSON format are", "[\r\n{\r\n\"id\": \"sakul@mindsage.com\",\r\n\"Name\": \"Sakul\",\r\n\"ImageProfileUrl\": \"sakul.jp" +
                    "g\",\r\n\"Subscriptions\":\r\n[\r\n{\r\n\t\"id\": \"Subscription01\",\r\n\t\"Role\": \"Student\",\r\n\t\"Cl" +
                    "assRoomId\": \"ClassRoom01\",\r\n\t\"ClassCalendarId\": \"ClassCalendar01\",\r\n}\r\n]\r\n},\r\n{\r" +
                    "\n\"id\": \"friend01@mindsage.com\",\r\n\"Name\": \"friend01\",\r\n\"ImageProfileUrl\": \"friend" +
                    "01.jpg\",\r\n\"Subscriptions\":\r\n[\r\n{\r\n\t\"id\": \"Subscription02\",\r\n\t\"Role\": \"Student\",\r" +
                    "\n\t\"ClassRoomId\": \"ClassRoom01\",\r\n\t\"ClassCalendarId\": \"ClassCalendar01\",\r\n}\r\n]\r\n}" +
                    ",\r\n{\r\n\"id\": \"friend02@mindsage.com\",\r\n\"Name\": \"friend02\",\r\n\"ImageProfileUrl\": \"f" +
                    "riend02.jpg\",\r\n\"Subscriptions\":\r\n[\r\n{\r\n\t\"id\": \"Subscription03\",\r\n\t\"Role\": \"Stude" +
                    "nt\",\r\n\t\"ClassRoomId\": \"ClassRoom01\",\r\n\t\"ClassCalendarId\": \"ClassCalendar01\",\r\n}\r" +
                    "\n]\r\n},\r\n{\r\n\"id\": \"waitingForRespond@mindsage.com\",\r\n\"Name\": \"waitingForRespond\"," +
                    "\r\n\"ImageProfileUrl\": \"waitingForRespond.jpg\",\r\n\"Subscriptions\":\r\n[\r\n{\r\n\t\"id\": \"S" +
                    "ubscription04\",\r\n\t\"Role\": \"Student\",\r\n\t\"ClassRoomId\": \"ClassRoom01\",\r\n\t\"ClassCal" +
                    "endarId\": \"ClassCalendar01\",\r\n}\r\n]\r\n},\r\n{\r\n\"id\": \"requestedToBeYourFriend@mindsa" +
                    "ge.com\",\r\n\"Name\": \"requestedToBeYourFriend\",\r\n\"ImageProfileUrl\": \"requestedToBeY" +
                    "ourFriend.jpg\",\r\n\"Subscriptions\":\r\n[\r\n{\r\n\t\"id\": \"Subscription05\",\r\n\t\"Role\": \"Stu" +
                    "dent\",\r\n\t\"ClassRoomId\": \"ClassRoom01\",\r\n\t\"ClassCalendarId\": \"ClassCalendar01\",\r\n" +
                    "}\r\n]\r\n},\r\n{\r\n\"id\": \"sender@mindsage.com\",\r\n\"Name\": \"sender\",\r\n\"ImageProfileUrl\":" +
                    " \"sender.jpg\",\r\n\"Subscriptions\":\r\n[\r\n{\r\n\t\"id\": \"Subscription06\",\r\n\t\"Role\": \"Stud" +
                    "ent\",\r\n\t\"ClassRoomId\": \"ClassRoom01\",\r\n\t\"ClassCalendarId\": \"ClassCalendar01\",\r\n}" +
                    "\r\n]\r\n},\r\n{\r\n\"id\": \"unfriend@mindsage.com\",\r\n\"Name\": \"unfriend\",\r\n\"ImageProfileUr" +
                    "l\": \"unfriend.jpg\",\r\n\"Subscriptions\":\r\n[\r\n{\r\n\t\"id\": \"Subscription07\",\r\n\t\"Role\": " +
                    "\"Student\",\r\n\t\"ClassRoomId\": \"ClassRoom01\",\r\n\t\"ClassCalendarId\": \"ClassCalendar01" +
                    "\",\r\n}\r\n]\r\n},\r\n]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 132
    testRunner.And("System have FriendRequest collection with JSON format are", "[\r\n    {\r\n        \"id\": \"FriendRequest01-A\",\r\n\"FromUserProfileId\": \"sakul@mindsag" +
                    "e.com\",\r\n\"ToUserProfileId\": \"friend01@mindsage.com\",\r\n\"Status\": \"Friend\",\r\n\"Acce" +
                    "ptedDate\": \"2/1/2016\",\r\n\"CreatedDate\": \"2/1/2016\"\r\n    },\r\n{\r\n        \"id\": \"Fri" +
                    "endRequest01-B\",\r\n\"FromUserProfileId\": \"friend01@mindsage.com\",\r\n\"ToUserProfileI" +
                    "d\": \"sakul@mindsage.com\",\r\n\"Status\": \"Friend\",\r\n\"AcceptedDate\": \"2/1/2016\",\r\n\"Cr" +
                    "eatedDate\": \"2/1/2016\"\r\n    },\r\n{\r\n        \"id\": \"FriendRequest02-A\",\r\n\"FromUser" +
                    "ProfileId\": \"sakul@mindsage.com\",\r\n\"ToUserProfileId\": \"friend02@mindsage.com\",\r\n" +
                    "\"Status\": \"Friend\",\r\n\"AcceptedDate\": \"2/1/2016\",\r\n\"CreatedDate\": \"2/1/2016\"\r\n   " +
                    " },\r\n{\r\n        \"id\": \"FriendRequest02-B\",\r\n\"FromUserProfileId\": \"friend02@minds" +
                    "age.com\",\r\n\"ToUserProfileId\": \"sakul@mindsage.com\",\r\n\"Status\": \"Friend\",\r\n\"Accep" +
                    "tedDate\": \"2/1/2016\",\r\n\"CreatedDate\": \"2/1/2016\"\r\n    },\r\n{\r\n        \"id\": \"Frie" +
                    "ndRequest03-A\",\r\n\"FromUserProfileId\": \"sakul@mindsage.com\",\r\n\"ToUserProfileId\": " +
                    "\"waitingForRespond@mindsage.com\",\r\n\"Status\": \"SendRequest\",\r\n\"CreatedDate\": \"2/1" +
                    "/2016\"\r\n    },\r\n{\r\n        \"id\": \"FriendRequest03-B\",\r\n\"FromUserProfileId\": \"wai" +
                    "tingForRespond@mindsage.com\",\r\n\"ToUserProfileId\": \"sakul@mindsage.com\",\r\n\"Status" +
                    "\": \"ReceiveRequest\",\r\n\"CreatedDate\": \"2/1/2016\"\r\n    },\r\n{\r\n        \"id\": \"Frien" +
                    "dRequest04-A\",\r\n\"FromUserProfileId\": \"sakul@mindsage.com\",\r\n\"ToUserProfileId\": \"" +
                    "requestedToBeYourFriend@mindsage.com\",\r\n\"Status\": \"ReceiveRequest\",\r\n\"CreatedDat" +
                    "e\": \"2/1/2016\"\r\n    },\r\n{\r\n        \"id\": \"FriendRequest04-B\",\r\n\"FromUserProfileI" +
                    "d\": \"requestedToBeYourFriend@mindsage.com\",\r\n\"ToUserProfileId\": \"sakul@mindsage." +
                    "com\",\r\n\"Status\": \"SendRequest\",\r\n\"CreatedDate\": \"2/1/2016\"\r\n    },\r\n{\r\n        \"" +
                    "id\": \"FriendRequest05-A\",\r\n\"FromUserProfileId\": \"sakul@mindsage.com\",\r\n\"ToUserPr" +
                    "ofileId\": \"unfriend@mindsage.com\",\r\n\"Status\": \"Unfriend\",\r\n\"AcceptedDate\": \"2/1/" +
                    "2016\",\r\n\"CreatedDate\": \"2/1/2016\",\r\n\"DeletedDate\": \"2/1/2016\"\r\n    },\r\n{\r\n      " +
                    "  \"id\": \"FriendRequest05-B\",\r\n\"FromUserProfileId\": \"unfriend@mindsage.com\",\r\n\"To" +
                    "UserProfileId\": \"sakul@mindsage.com\",\r\n\"Status\": \"Unfriend\",\r\n\"AcceptedDate\": \"2" +
                    "/1/2016\",\r\n\"CreatedDate\": \"2/1/2016\",\r\n\"DeletedDate\": \"2/1/2016\"\r\n    }\r\n]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        public virtual void SetFixture(Show_Friends_List_Self_PurchaseFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Show_Friends_List_Self_Purchase")]
        [Xunit.TraitAttribute("Description", "SelfPurchase user request friend list Then system send friend list back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void SelfPurchaseUserRequestFriendListThenSystemSendFriendListBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SelfPurchase user request friend list Then system send friend list back", new string[] {
                        "mock"});
#line 217
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 218
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 219
    testRunner.When("UserProfile \'sakul@mindsage.com\' request friend list from ClassRoom: \'ClassRoom01" +
                    "\' by selfpurchase method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 220
    testRunner.Then("System send friend list with JSON format are", @"[
{
""UserProfileId"": ""friend01@mindsage.com"",
""Name"": ""friend01"",
""ImageUrl"": ""friend01.jpg"",
""Status"": ""Friend"",
""RequestId"": ""FriendRequest01-A"",
""IsTeacher"": false
},
{
""UserProfileId"": ""friend02@mindsage.com"",
""Name"": ""friend02"",
""ImageUrl"": ""friend02.jpg"",
""Status"": ""Friend"",
""RequestId"": ""FriendRequest02-A"",
""IsTeacher"": false
},
{
""UserProfileId"": ""waitingForRespond@mindsage.com"",
""Name"": ""waitingForRespond"",
""ImageUrl"": ""waitingForRespond.jpg"",
""Status"": ""SendRequest"",
""RequestId"": ""FriendRequest03-A"",
""IsTeacher"": false
},
{
""UserProfileId"": ""requestedToBeYourFriend@mindsage.com"",
""Name"": ""requestedToBeYourFriend"",
""ImageUrl"": ""requestedToBeYourFriend.jpg"",
""Status"": ""ReceiveRequest"",
""RequestId"": ""FriendRequest04-A"",
""IsTeacher"": false
}
]", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Show_Friends_List_Self_Purchase")]
        [Xunit.TraitAttribute("Description", "SelfPurchase user request friend list buy they have no friend requests Then syste" +
            "m send friend list back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void SelfPurchaseUserRequestFriendListBuyTheyHaveNoFriendRequestsThenSystemSendFriendListBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SelfPurchase user request friend list buy they have no friend requests Then syste" +
                    "m send friend list back", new string[] {
                        "mock"});
#line 259
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 260
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 261
 testRunner.And("System have FriendRequest collection with JSON format are", "[]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 265
    testRunner.When("UserProfile \'sakul@mindsage.com\' request friend list from ClassRoom: \'ClassRoom01" +
                    "\' by selfpurchase method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 266
    testRunner.Then("System send friend list with JSON format are", "[]", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Show_Friends_List_Self_Purchase")]
        [Xunit.TraitAttribute("Description", "User who hasn\'t permission to access to the course request friend list Then syste" +
            "m send friend list back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void UserWhoHasnTPermissionToAccessToTheCourseRequestFriendListThenSystemSendFriendListBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User who hasn\'t permission to access to the course request friend list Then syste" +
                    "m send friend list back", new string[] {
                        "mock"});
#line 272
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 273
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 274
 testRunner.And("System have UserProfile collection with JSON format are", "[\r\n{\r\n\"id\": \"sakul@mindsage.com\",\r\n\"Name\": \"Sakul\",\r\n\"ImageProfileUrl\": \"sakul.jp" +
                    "g\",\r\n\"Subscriptions\": []\r\n}\r\n]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 285
    testRunner.When("UserProfile \'sakul@mindsage.com\' request friend list from ClassRoom: \'ClassRoom01" +
                    "\' by selfpurchase method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 286
    testRunner.Then("System send friend list with JSON format are", "[]", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Show_Friends_List_Self_Purchase")]
        [Xunit.TraitAttribute("Description", "SelfPurchase request friend list but the course doesn\'t existing Then system send" +
            " friend list back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void SelfPurchaseRequestFriendListButTheCourseDoesnTExistingThenSystemSendFriendListBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SelfPurchase request friend list but the course doesn\'t existing Then system send" +
                    " friend list back", new string[] {
                        "mock"});
#line 292
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 293
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 294
 testRunner.And("System have ClassRoom collection with JSON format are", "[]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 298
    testRunner.When("UserProfile \'sakul@mindsage.com\' request friend list from ClassRoom: \'ClassRoom01" +
                    "\' by selfpurchase method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 299
    testRunner.Then("System send friend list with JSON format are", "[]", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Show_Friends_List_Self_Purchase")]
        [Xunit.TraitAttribute("Description", "Incorrect user (unknow) request friend list but the course doesn\'t existing Then " +
            "system send friend list back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void IncorrectUserUnknowRequestFriendListButTheCourseDoesnTExistingThenSystemSendFriendListBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Incorrect user (unknow) request friend list but the course doesn\'t existing Then " +
                    "system send friend list back", new string[] {
                        "mock"});
#line 305
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 306
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 307
    testRunner.When("UserProfile \'unknow@mindsage.com\' request friend list from ClassRoom: \'ClassRoom0" +
                    "1\' by selfpurchase method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 308
    testRunner.Then("System send friend list with JSON format are", "[]", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Show_Friends_List_Self_Purchase")]
        [Xunit.TraitAttribute("Description", "Incorrect user (empty) request friend list but the course doesn\'t existing Then s" +
            "ystem send friend list back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void IncorrectUserEmptyRequestFriendListButTheCourseDoesnTExistingThenSystemSendFriendListBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Incorrect user (empty) request friend list but the course doesn\'t existing Then s" +
                    "ystem send friend list back", new string[] {
                        "mock"});
#line 314
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 315
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 316
    testRunner.When("UserProfile \'\' request friend list from ClassRoom: \'ClassRoom01\' by selfpurchase " +
                    "method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 317
    testRunner.Then("System send friend list with JSON format are", "[]", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Show_Friends_List_Self_Purchase")]
        [Xunit.TraitAttribute("Description", "Incorrect user (null) request friend list but the course doesn\'t existing Then sy" +
            "stem send friend list back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void IncorrectUserNullRequestFriendListButTheCourseDoesnTExistingThenSystemSendFriendListBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Incorrect user (null) request friend list but the course doesn\'t existing Then sy" +
                    "stem send friend list back", new string[] {
                        "mock"});
#line 323
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 324
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 325
    testRunner.When("UserProfile \'NULL\' request friend list from ClassRoom: \'ClassRoom01\' by selfpurch" +
                    "ase method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 326
    testRunner.Then("System send friend list with JSON format are", "[]", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Show_Friends_List_Self_Purchase")]
        [Xunit.TraitAttribute("Description", "SelfPurchase request friend list but the course is incorrect (unknow) Then system" +
            " send friend list back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void SelfPurchaseRequestFriendListButTheCourseIsIncorrectUnknowThenSystemSendFriendListBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SelfPurchase request friend list but the course is incorrect (unknow) Then system" +
                    " send friend list back", new string[] {
                        "mock"});
#line 332
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 333
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 334
    testRunner.When("UserProfile \'sakul@mindsage.com\' request friend list from ClassRoom: \'unknowClass" +
                    "RoomId\' by selfpurchase method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 335
    testRunner.Then("System send friend list with JSON format are", "[]", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Show_Friends_List_Self_Purchase")]
        [Xunit.TraitAttribute("Description", "SelfPurchase request friend list but the course is incorrect (empty) Then system " +
            "send friend list back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void SelfPurchaseRequestFriendListButTheCourseIsIncorrectEmptyThenSystemSendFriendListBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SelfPurchase request friend list but the course is incorrect (empty) Then system " +
                    "send friend list back", new string[] {
                        "mock"});
#line 341
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 342
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 343
    testRunner.When("UserProfile \'sakul@mindsage.com\' request friend list from ClassRoom: \'\' by selfpu" +
                    "rchase method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 344
    testRunner.Then("System send friend list with JSON format are", "[]", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Show_Friends_List_Self_Purchase")]
        [Xunit.TraitAttribute("Description", "SelfPurchase request friend list but the course is incorrect (null) Then system s" +
            "end friend list back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void SelfPurchaseRequestFriendListButTheCourseIsIncorrectNullThenSystemSendFriendListBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SelfPurchase request friend list but the course is incorrect (null) Then system s" +
                    "end friend list back", new string[] {
                        "mock"});
#line 350
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 351
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 352
    testRunner.When("UserProfile \'sakul@mindsage.com\' request friend list from ClassRoom: \'NULL\' by se" +
                    "lfpurchase method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 353
    testRunner.Then("System send friend list with JSON format are", "[]", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Show_Friends_List_Self_Purchase")]
        [Xunit.TraitAttribute("Description", "SelfPurchase request friend list but their friends accounts was deleted Then syst" +
            "em send friend list back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void SelfPurchaseRequestFriendListButTheirFriendsAccountsWasDeletedThenSystemSendFriendListBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SelfPurchase request friend list but their friends accounts was deleted Then syst" +
                    "em send friend list back", new string[] {
                        "mock"});
#line 359
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 360
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 361
 testRunner.And("System have UserProfile collection with JSON format are", "[\r\n{\r\n\"id\": \"sakul@mindsage.com\",\r\n\"Name\": \"Sakul\",\r\n\"ImageProfileUrl\": \"sakul.jp" +
                    "g\",\r\n\"Subscriptions\":\r\n[\r\n{\r\n\t\"id\": \"Subscription01\",\r\n\t\"Role\": \"Student\",\r\n\t\"Cl" +
                    "assRoomId\": \"ClassRoom01\",\r\n\t\"ClassCalendarId\": \"ClassCalendar01\",\r\n}\r\n]\r\n},\r\n{\r" +
                    "\n\"id\": \"friend01@mindsage.com\",\r\n\"Name\": \"friend01\",\r\n\"ImageProfileUrl\": \"friend" +
                    "01.jpg\",\r\n\"DeletedDate\": \"1/1/2016\",\r\n\"Subscriptions\":\r\n[\r\n{\r\n\t\"id\": \"Subscripti" +
                    "on02\",\r\n\t\"Role\": \"Student\",\r\n\t\"ClassRoomId\": \"ClassRoom01\",\r\n\t\"ClassCalendarId\":" +
                    " \"ClassCalendar01\",\r\n}\r\n]\r\n},\r\n{\r\n\"id\": \"friend02@mindsage.com\",\r\n\"Name\": \"frien" +
                    "d02\",\r\n\"ImageProfileUrl\": \"friend02.jpg\",\r\n\"DeletedDate\": \"1/1/2016\",\r\n\"Subscrip" +
                    "tions\":\r\n[\r\n{\r\n\t\"id\": \"Subscription03\",\r\n\t\"Role\": \"Student\",\r\n\t\"ClassRoomId\": \"C" +
                    "lassRoom01\",\r\n\t\"ClassCalendarId\": \"ClassCalendar01\",\r\n}\r\n]\r\n},\r\n{\r\n\"id\": \"waitin" +
                    "gForRespond@mindsage.com\",\r\n\"Name\": \"waitingForRespond\",\r\n\"ImageProfileUrl\": \"wa" +
                    "itingForRespond.jpg\",\r\n\"DeletedDate\": \"1/1/2016\",\r\n\"Subscriptions\":\r\n[\r\n{\r\n\t\"id\"" +
                    ": \"Subscription04\",\r\n\t\"Role\": \"Student\",\r\n\t\"ClassRoomId\": \"ClassRoom01\",\r\n\t\"Clas" +
                    "sCalendarId\": \"ClassCalendar01\",\r\n}\r\n]\r\n},\r\n{\r\n\"id\": \"requestedToBeYourFriend@mi" +
                    "ndsage.com\",\r\n\"Name\": \"requestedToBeYourFriend\",\r\n\"ImageProfileUrl\": \"requestedT" +
                    "oBeYourFriend.jpg\",\r\n\"DeletedDate\": \"1/1/2016\",\r\n\"Subscriptions\":\r\n[\r\n{\r\n\t\"id\": " +
                    "\"Subscription05\",\r\n\t\"Role\": \"Student\",\r\n\t\"ClassRoomId\": \"ClassRoom01\",\r\n\t\"ClassC" +
                    "alendarId\": \"ClassCalendar01\",\r\n}\r\n]\r\n},\r\n{\r\n\"id\": \"sender@mindsage.com\",\r\n\"Name" +
                    "\": \"sender\",\r\n\"ImageProfileUrl\": \"sender.jpg\",\r\n\"DeletedDate\": \"1/1/2016\",\r\n\"Sub" +
                    "scriptions\":\r\n[\r\n{\r\n\t\"id\": \"Subscription06\",\r\n\t\"Role\": \"Student\",\r\n\t\"ClassRoomId" +
                    "\": \"ClassRoom01\",\r\n\t\"ClassCalendarId\": \"ClassCalendar01\",\r\n}\r\n]\r\n},\r\n{\r\n\"id\": \"u" +
                    "nfriend@mindsage.com\",\r\n\"Name\": \"unfriend\",\r\n\"ImageProfileUrl\": \"unfriend.jpg\",\r" +
                    "\n\"DeletedDate\": \"1/1/2016\",\r\n\"Subscriptions\":\r\n[\r\n{\r\n\t\"id\": \"Subscription07\",\r\n\t" +
                    "\"Role\": \"Student\",\r\n\t\"ClassRoomId\": \"ClassRoom01\",\r\n\t\"ClassCalendarId\": \"ClassCa" +
                    "lendar01\",\r\n}\r\n]\r\n},\r\n]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 470
    testRunner.When("UserProfile \'sakul@mindsage.com\' request friend list from ClassRoom: \'ClassRoom01" +
                    "\' by selfpurchase method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 471
    testRunner.Then("System send friend list with JSON format are", @"[
{
""UserProfileId"": ""friend01@mindsage.com"",
""Name"": ""friend01"",
""ImageUrl"": ""friend01.jpg"",
""Status"": ""Friend"",
""RequestId"": ""FriendRequest01-A"",
""IsTeacher"": false
},
{
""UserProfileId"": ""friend02@mindsage.com"",
""Name"": ""friend02"",
""ImageUrl"": ""friend02.jpg"",
""Status"": ""Friend"",
""RequestId"": ""FriendRequest02-A"",
""IsTeacher"": false
},
{
""UserProfileId"": ""waitingForRespond@mindsage.com"",
""Name"": ""waitingForRespond"",
""ImageUrl"": ""waitingForRespond.jpg"",
""Status"": ""SendRequest"",
""RequestId"": ""FriendRequest03-A"",
""IsTeacher"": false
},
{
""UserProfileId"": ""requestedToBeYourFriend@mindsage.com"",
""Name"": ""requestedToBeYourFriend"",
""ImageUrl"": ""requestedToBeYourFriend.jpg"",
""Status"": ""ReceiveRequest"",
""RequestId"": ""FriendRequest04-A"",
""IsTeacher"": false
}
]", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Show_Friends_List_Self_Purchase")]
        [Xunit.TraitAttribute("Description", "SelfPurchase request friend list but their friends accounts doesn\'t existing Then" +
            " system send friend list back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void SelfPurchaseRequestFriendListButTheirFriendsAccountsDoesnTExistingThenSystemSendFriendListBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SelfPurchase request friend list but their friends accounts doesn\'t existing Then" +
                    " system send friend list back", new string[] {
                        "mock"});
#line 510
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 511
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 512
 testRunner.And("System have UserProfile collection with JSON format are", "[\r\n{\r\n\"id\": \"sakul@mindsage.com\",\r\n\"Name\": \"Sakul\",\r\n\"ImageProfileUrl\": \"sakul.jp" +
                    "g\",\r\n\"Subscriptions\":\r\n[\r\n{\r\n\t\"id\": \"Subscription01\",\r\n\t\"Role\": \"Student\",\r\n\t\"Cl" +
                    "assRoomId\": \"ClassRoom01\",\r\n\t\"ClassCalendarId\": \"ClassCalendar01\",\r\n}\r\n]\r\n}\r\n]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 531
    testRunner.When("UserProfile \'sakul@mindsage.com\' request friend list from ClassRoom: \'ClassRoom01" +
                    "\' by selfpurchase method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 532
    testRunner.Then("System send friend list with JSON format are", "[]", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                Show_Friends_List_Self_PurchaseFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                Show_Friends_List_Self_PurchaseFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
