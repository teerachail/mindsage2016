// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlow.GeneratedTests.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class Teacher_Delete_CourseFeature : Xunit.IClassFixture<Teacher_Delete_CourseFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Teacher_Delete_Course.feature"
#line hidden
        
        public Teacher_Delete_CourseFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Teacher_Delete_Course", "\tIn order to avoid silly mistakes\r\n\tAs a math idiot\r\n\tI want to be told the sum o" +
                    "f two numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
 testRunner.Given("Initialize mocking data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.And("System have UserProfile collection with JSON format are", @"[
{
""id"": ""teacher@mindsage.com"",
""Name"": ""teacher"",
""ImageProfileUrl"": ""teacher.jpg"",
""Subscriptions"":
[
{
	""id"": ""Subscription01"",
	""Role"": ""Teacher"",
	""ClassRoomId"": ""ClassRoom01"",
	""ClassCalendarId"": ""ClassCalendar01"",
},
]
},
{
""id"": ""student@mindsage.com"",
""Name"": ""student"",
""ImageProfileUrl"": ""student.jpg"",
""Subscriptions"":
[
{
	""id"": ""Subscription02"",
	""Role"": ""Student"",
	""ClassRoomId"": ""ClassRoom01"",
	""ClassCalendarId"": ""ClassCalendar01"",
},
]
},
{
""id"": ""teacherWithDeletedSubscription@mindsage.com"",
""Name"": ""teacher"",
""ImageProfileUrl"": ""teacher.jpg"",
""Subscriptions"":
[
{
	""id"": ""Subscription03"",
	""Role"": ""Teacher"",
	""ClassRoomId"": ""ClassRoom01"",
	""ClassCalendarId"": ""ClassCalendar01"",
	""DeletedDate"": ""1/1/2016""
},
]
},
]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 56
 testRunner.And("System have ClassCalendar collection with JSON format are", @"[
    {
        ""id"": ""ClassCalendar01"",
        ""BeginDate"": ""2/1/2016"",
        ""ClassRoomId"": ""ClassRoom01"",
""Holidays"": [],
""ShiftDays"": [],
        ""LessonCalendars"":
        [
            {
                ""Id"": ""LessonCalendar01"",
                ""LessonId"": ""Lesson01"",
                ""BeginDate"": ""2/1/2016"",
                ""LessonCatalogId"": ""LessonCatalog01"",
	""TopicOfTheDays"": []
            },
        ]
    },
]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 78
 testRunner.And("System have ClassRoom collection with JSON format are", @"[
    {
        ""id"": ""ClassRoom01"",
        ""Name"": ""Emotional literacy"",
""Grade"": ""7"",
        ""CourseCatalogId"": ""CourseCatalog01"",
        ""CreatedDate"": ""2/1/2016"",
""Message"": ""Don't forget to comment a lesson!"",
        ""Lessons"":
        [
            {
                ""id"": ""Lesson01"",
                ""TotalLikes"": 0,
                ""LessonCatalogId"": ""LessonCatalog01""
            },
        ]
    }
]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 99
 testRunner.And("System have StudentKey collection with JSON format are", "[\r\n\t{\r\n\t\t\"id\": \"StudentKey01\",\r\n\t\t\"Code\": \"StudentCode01\",\r\n\t\t\"Grade\": \"7\",\r\n\t\t\"C" +
                    "ourseCatalogId\": \"CourseCatalog01\",\r\n\t\t\"ClassRoomId\": \"ClassRoom01\",\r\n\t\t\"Created" +
                    "Date\": \"2/1/2016\",\r\n\t}\r\n]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 112
 testRunner.And("System have UserActivity collection with JSON format are", @"[
{
""id"": ""UserActivity01"",
""UserProfileId"": ""teacher@mindsage.com"",
""ClassRoomId"": ""ClassRoom01"",
""LessonActivities"":
[
{
	""id"": ""LessonActivity01"",
	""LessonId"": ""Lesson01"",
	""TotalContentsAmount"": 1,
	""SawContentIds"": 
	[
		""Content01""
	],
	""CreatedCommentAmount"": 1,
	""ParticipationAmount"": 1
}
]
},
{
""id"": ""UserActivity02"",
""UserProfileId"": ""student@mindsage.com"",
""ClassRoomId"": ""ClassRoom01"",
""LessonActivities"":
[
{
	""id"": ""LessonActivity02"",
	""LessonId"": ""Lesson01"",
	""TotalContentsAmount"": 1,
	""SawContentIds"": [],
	""CreatedCommentAmount"": 0,
	""ParticipationAmount"": 0
}
]
},
{
""id"": ""UserActivity03"",
""UserProfileId"": ""teacherWithDeletedSubscription@mindsage.com"",
""ClassRoomId"": ""ClassRoom01"",
""LessonActivities"":
[
{
	""id"": ""LessonActivity03"",
	""LessonId"": ""Lesson01"",
	""TotalContentsAmount"": 1,
	""SawContentIds"": [],
	""CreatedCommentAmount"": 0,
	""ParticipationAmount"": 0
}
]
}
]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        public virtual void SetFixture(Teacher_Delete_CourseFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Teacher_Delete_Course")]
        [Xunit.TraitAttribute("Description", "Teacher delete course Then system delete the selected course")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherDeleteCourseThenSystemDeleteTheSelectedCourse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher delete course Then system delete the selected course", new string[] {
                        "mock"});
#line 170
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 171
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 172
    testRunner.When("UserProfile \'teacher@mindsage.com\' delete ClassRoom \'ClassRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 173
    testRunner.Then("System upsert UserProfile with JSON format is", @"{
""id"": ""teacher@mindsage.com"",
""Name"": ""teacher"",
""ImageProfileUrl"": ""teacher.jpg"",
""Subscriptions"":
[
{
""id"": ""Subscription01"",
""Role"": ""Teacher"",
""ClassRoomId"": ""ClassRoom01"",
""ClassCalendarId"": ""ClassCalendar01"",
""DeletedDate"": ""2/8/2016 00:00 am""
}
]
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 191
 testRunner.And("System upsert UserProfile with JSON format is", @"{
""id"": ""student@mindsage.com"",
""Name"": ""student"",
""ImageProfileUrl"": ""student.jpg"",
""Subscriptions"":
[
{
""id"": ""Subscription02"",
""Role"": ""Student"",
""ClassRoomId"": ""ClassRoom01"",
""ClassCalendarId"": ""ClassCalendar01"",
""DeletedDate"": ""2/8/2016 00:00 am""
}
]
}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 209
 testRunner.And("System upsert UserActivity collection with JSON format is", @"{
""id"": ""UserActivity01"",
""UserProfileId"": ""teacher@mindsage.com"",
""ClassRoomId"": ""ClassRoom01"",
""DeletedDate"": ""2/8/2016 00:00 am"",
""LessonActivities"":
[
{
""id"": ""LessonActivity01"",
""LessonId"": ""Lesson01"",
""TotalContentsAmount"": 1,
""SawContentIds"": 
[
	""Content01""
],
""CreatedCommentAmount"": 1,
""ParticipationAmount"": 1
}
]
}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 232
 testRunner.And("System upsert UserActivity collection with JSON format is", @"{
""id"": ""UserActivity02"",
""UserProfileId"": ""student@mindsage.com"",
""ClassRoomId"": ""ClassRoom01"",
""DeletedDate"": ""2/8/2016 00:00 am"",
""LessonActivities"":
[
{
""id"": ""LessonActivity02"",
""LessonId"": ""Lesson01"",
""TotalContentsAmount"": 1,
""SawContentIds"": [],
""CreatedCommentAmount"": 0,
""ParticipationAmount"": 0
}
]
}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 252
 testRunner.And("System upsert ClassRoom with JSON format is", @"{
    ""id"": ""ClassRoom01"",
    ""Name"": ""Emotional literacy"",
""Grade"": ""7"",
    ""CourseCatalogId"": ""CourseCatalog01"",
    ""CreatedDate"": ""2/1/2016"",
""DeletedDate"": ""2/8/2016 00:00 am"",
    ""Message"": ""Don't forget to comment a lesson!"",
    ""Lessons"":
    [
        {
            ""id"": ""Lesson01"",
            ""TotalLikes"": 0,
            ""LessonCatalogId"": ""LessonCatalog01""
        },
    ]
}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 272
 testRunner.And("System set course ClassCalendar collection with JSON format is", @"{
       ""id"": ""ClassCalendar01"",
       ""BeginDate"": ""2/1/2016"",
       ""ClassRoomId"": ""ClassRoom01"",
	""DeletedDate"": ""2/8/2016 00:00 am"",
	""Holidays"": [],
	""ShiftDays"": [],
       ""LessonCalendars"":
       [
           {
               ""Id"": ""LessonCalendar01"",
               ""LessonId"": ""Lesson01"",
               ""BeginDate"": ""2/1/2016"",
               ""LessonCatalogId"": ""LessonCatalog01"",
			""TopicOfTheDays"": []
           },
       ]
   }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 293
 testRunner.And("System upsert StudentKey with JSON format is", "{\r\n\t\"id\": \"StudentKey01\",\r\n\t\"Grade\": \"7\",\r\n\t\"Code\": \"StudentCode01\",\r\n\t\"CourseCat" +
                    "alogId\": \"CourseCatalog01\",\r\n\t\"ClassRoomId\": \"ClassRoom01\",\r\n\t\"CreatedDate\": \"2/" +
                    "1/2016\",\r\n\t\"DeletedDate\": \"2/8/2016 00:00 am\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Teacher_Delete_Course")]
        [Xunit.TraitAttribute("Description", "Teacher delete course but used ClassRoom incorrect (unknow) Then system doesn\'t d" +
            "elete the selected course")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherDeleteCourseButUsedClassRoomIncorrectUnknowThenSystemDoesnTDeleteTheSelectedCourse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher delete course but used ClassRoom incorrect (unknow) Then system doesn\'t d" +
                    "elete the selected course", new string[] {
                        "mock"});
#line 307
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 308
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 309
    testRunner.When("UserProfile \'teacher@mindsage.com\' delete ClassRoom \'UnknowClassRoom\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 310
    testRunner.Then("System doesn\'t upsert UserProfile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 311
 testRunner.And("System doesn\'t update UserActivity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 312
 testRunner.And("System don\'t upsert ClassRoom", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 313
 testRunner.And("System doesn\'t set course ClassCalendar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 314
 testRunner.And("System don\'t upsert StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Teacher_Delete_Course")]
        [Xunit.TraitAttribute("Description", "Teacher delete course but used ClassRoom incorrect (empty) Then system doesn\'t de" +
            "lete the selected course")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherDeleteCourseButUsedClassRoomIncorrectEmptyThenSystemDoesnTDeleteTheSelectedCourse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher delete course but used ClassRoom incorrect (empty) Then system doesn\'t de" +
                    "lete the selected course", new string[] {
                        "mock"});
#line 317
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 318
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 319
    testRunner.When("UserProfile \'teacher@mindsage.com\' delete ClassRoom \'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 320
    testRunner.Then("System doesn\'t upsert UserProfile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 321
 testRunner.And("System doesn\'t update UserActivity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 322
 testRunner.And("System don\'t upsert ClassRoom", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 323
 testRunner.And("System doesn\'t set course ClassCalendar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 324
 testRunner.And("System don\'t upsert StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Teacher_Delete_Course")]
        [Xunit.TraitAttribute("Description", "Teacher delete course but used ClassRoom incorrect (null) Then system doesn\'t del" +
            "ete the selected course")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherDeleteCourseButUsedClassRoomIncorrectNullThenSystemDoesnTDeleteTheSelectedCourse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher delete course but used ClassRoom incorrect (null) Then system doesn\'t del" +
                    "ete the selected course", new string[] {
                        "mock"});
#line 327
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 328
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 329
    testRunner.When("UserProfile \'teacher@mindsage.com\' delete ClassRoom \'NULL\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 330
    testRunner.Then("System doesn\'t upsert UserProfile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 331
 testRunner.And("System doesn\'t update UserActivity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 332
 testRunner.And("System don\'t upsert ClassRoom", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 333
 testRunner.And("System doesn\'t set course ClassCalendar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 334
 testRunner.And("System don\'t upsert StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Teacher_Delete_Course")]
        [Xunit.TraitAttribute("Description", "Incorrect user (unknow) delete course Then system doesn\'t delete the selected cou" +
            "rse")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void IncorrectUserUnknowDeleteCourseThenSystemDoesnTDeleteTheSelectedCourse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Incorrect user (unknow) delete course Then system doesn\'t delete the selected cou" +
                    "rse", new string[] {
                        "mock"});
#line 337
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 338
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 339
    testRunner.When("UserProfile \'unknow@mindsage.com\' delete ClassRoom \'ClassRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 340
    testRunner.Then("System doesn\'t upsert UserProfile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 341
 testRunner.And("System doesn\'t update UserActivity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 342
 testRunner.And("System don\'t upsert ClassRoom", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 343
 testRunner.And("System doesn\'t set course ClassCalendar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 344
 testRunner.And("System don\'t upsert StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Teacher_Delete_Course")]
        [Xunit.TraitAttribute("Description", "Incorrect user (empty) delete course Then system doesn\'t delete the selected cour" +
            "se")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void IncorrectUserEmptyDeleteCourseThenSystemDoesnTDeleteTheSelectedCourse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Incorrect user (empty) delete course Then system doesn\'t delete the selected cour" +
                    "se", new string[] {
                        "mock"});
#line 347
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 348
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 349
    testRunner.When("UserProfile \'\' delete ClassRoom \'ClassRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 350
    testRunner.Then("System doesn\'t upsert UserProfile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 351
 testRunner.And("System doesn\'t update UserActivity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 352
 testRunner.And("System don\'t upsert ClassRoom", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 353
 testRunner.And("System doesn\'t set course ClassCalendar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 354
 testRunner.And("System don\'t upsert StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Teacher_Delete_Course")]
        [Xunit.TraitAttribute("Description", "Incorrect user (null) delete course Then system doesn\'t delete the selected cours" +
            "e")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void IncorrectUserNullDeleteCourseThenSystemDoesnTDeleteTheSelectedCourse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Incorrect user (null) delete course Then system doesn\'t delete the selected cours" +
                    "e", new string[] {
                        "mock"});
#line 357
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 358
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 359
    testRunner.When("UserProfile \'NULL\' delete ClassRoom \'ClassRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 360
    testRunner.Then("System doesn\'t upsert UserProfile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 361
 testRunner.And("System doesn\'t update UserActivity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 362
 testRunner.And("System don\'t upsert ClassRoom", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 363
 testRunner.And("System doesn\'t set course ClassCalendar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 364
 testRunner.And("System don\'t upsert StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Teacher_Delete_Course")]
        [Xunit.TraitAttribute("Description", "Incorrect user (Role = Student) delete course Then system doesn\'t delete the sele" +
            "cted course")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void IncorrectUserRoleStudentDeleteCourseThenSystemDoesnTDeleteTheSelectedCourse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Incorrect user (Role = Student) delete course Then system doesn\'t delete the sele" +
                    "cted course", new string[] {
                        "mock"});
#line 367
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 368
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 369
    testRunner.When("UserProfile \'student@mindsage.com\' delete ClassRoom \'ClassRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 370
    testRunner.Then("System doesn\'t upsert UserProfile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 371
 testRunner.And("System doesn\'t update UserActivity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 372
 testRunner.And("System don\'t upsert ClassRoom", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 373
 testRunner.And("System doesn\'t set course ClassCalendar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 374
 testRunner.And("System don\'t upsert StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Teacher_Delete_Course")]
        [Xunit.TraitAttribute("Description", "Teacher delete course but its subscription was deleted Then system doesn\'t delete" +
            " the selected course")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherDeleteCourseButItsSubscriptionWasDeletedThenSystemDoesnTDeleteTheSelectedCourse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher delete course but its subscription was deleted Then system doesn\'t delete" +
                    " the selected course", new string[] {
                        "mock"});
#line 377
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 378
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 379
    testRunner.When("UserProfile \'teacherWithDeletedSubscription@mindsage.com\' delete ClassRoom \'Class" +
                    "Room01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 380
    testRunner.Then("System doesn\'t upsert UserProfile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 381
 testRunner.And("System doesn\'t update UserActivity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 382
 testRunner.And("System don\'t upsert ClassRoom", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 383
 testRunner.And("System doesn\'t set course ClassCalendar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 384
 testRunner.And("System don\'t upsert StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Teacher_Delete_Course")]
        [Xunit.TraitAttribute("Description", "Teacher delete course but its subscription doesn\'t existing Then system doesn\'t d" +
            "elete the selected course")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherDeleteCourseButItsSubscriptionDoesnTExistingThenSystemDoesnTDeleteTheSelectedCourse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher delete course but its subscription doesn\'t existing Then system doesn\'t d" +
                    "elete the selected course", new string[] {
                        "mock"});
#line 387
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 388
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 389
 testRunner.And("System have UserProfile collection with JSON format are", "[\r\n{\r\n\"id\": \"teacher@mindsage.com\",\r\n\"Name\": \"teacher\",\r\n\"ImageProfileUrl\": \"teac" +
                    "her.jpg\",\r\n\"Subscriptions\": []\r\n}\r\n]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 400
    testRunner.When("UserProfile \'student@mindsage.com\' delete ClassRoom \'ClassRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 401
    testRunner.Then("System doesn\'t upsert UserProfile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 402
 testRunner.And("System doesn\'t update UserActivity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 403
 testRunner.And("System don\'t upsert ClassRoom", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 404
 testRunner.And("System doesn\'t set course ClassCalendar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 405
 testRunner.And("System don\'t upsert StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Teacher_Delete_Course")]
        [Xunit.TraitAttribute("Description", "Teacher delete course but the class calendar was deleted Then system delete the s" +
            "elected course")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherDeleteCourseButTheClassCalendarWasDeletedThenSystemDeleteTheSelectedCourse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher delete course but the class calendar was deleted Then system delete the s" +
                    "elected course", new string[] {
                        "mock"});
#line 408
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 409
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 410
 testRunner.And("System have ClassCalendar collection with JSON format are", @"[
    {
        ""id"": ""ClassCalendar01"",
        ""BeginDate"": ""2/1/2016"",
        ""ClassRoomId"": ""ClassRoom01"",
""Holidays"": [],
""ShiftDays"": [],
""DeletedDate"": ""1/1/2016"",
        ""LessonCalendars"":
        [
            {
                ""Id"": ""LessonCalendar01"",
                ""LessonId"": ""Lesson01"",
                ""BeginDate"": ""2/1/2016"",
                ""LessonCatalogId"": ""LessonCatalog01"",
	""TopicOfTheDays"": []
            },
        ]
    },
]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 433
    testRunner.When("UserProfile \'teacher@mindsage.com\' delete ClassRoom \'ClassRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 434
    testRunner.Then("System upsert UserProfile with JSON format is", @"{
""id"": ""teacher@mindsage.com"",
""Name"": ""teacher"",
""ImageProfileUrl"": ""teacher.jpg"",
""Subscriptions"":
[
{
""id"": ""Subscription01"",
""Role"": ""Teacher"",
""ClassRoomId"": ""ClassRoom01"",
""ClassCalendarId"": ""ClassCalendar01"",
""DeletedDate"": ""2/8/2016 00:00 am""
}
]
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 452
 testRunner.And("System upsert UserProfile with JSON format is", @"{
""id"": ""student@mindsage.com"",
""Name"": ""student"",
""ImageProfileUrl"": ""student.jpg"",
""Subscriptions"":
[
{
""id"": ""Subscription02"",
""Role"": ""Student"",
""ClassRoomId"": ""ClassRoom01"",
""ClassCalendarId"": ""ClassCalendar01"",
""DeletedDate"": ""2/8/2016 00:00 am""
}
]
}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 470
 testRunner.And("System upsert UserActivity collection with JSON format is", @"{
""id"": ""UserActivity01"",
""UserProfileId"": ""teacher@mindsage.com"",
""ClassRoomId"": ""ClassRoom01"",
""DeletedDate"": ""2/8/2016 00:00 am"",
""LessonActivities"":
[
{
""id"": ""LessonActivity01"",
""LessonId"": ""Lesson01"",
""TotalContentsAmount"": 1,
""SawContentIds"": 
[
	""Content01""
],
""CreatedCommentAmount"": 1,
""ParticipationAmount"": 1
}
]
}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 493
 testRunner.And("System upsert UserActivity collection with JSON format is", @"{
""id"": ""UserActivity02"",
""UserProfileId"": ""student@mindsage.com"",
""ClassRoomId"": ""ClassRoom01"",
""DeletedDate"": ""2/8/2016 00:00 am"",
""LessonActivities"":
[
{
""id"": ""LessonActivity02"",
""LessonId"": ""Lesson01"",
""TotalContentsAmount"": 1,
""SawContentIds"": [],
""CreatedCommentAmount"": 0,
""ParticipationAmount"": 0
}
]
}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 513
 testRunner.And("System upsert ClassRoom with JSON format is", @"{
    ""id"": ""ClassRoom01"",
    ""Name"": ""Emotional literacy"",
""Grade"": ""7"",
    ""CourseCatalogId"": ""CourseCatalog01"",
    ""CreatedDate"": ""2/1/2016"",
""DeletedDate"": ""2/8/2016 00:00 am"",
    ""Message"": ""Don't forget to comment a lesson!"",
    ""Lessons"":
    [
        {
            ""id"": ""Lesson01"",
            ""TotalLikes"": 0,
            ""LessonCatalogId"": ""LessonCatalog01""
        },
    ]
}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 533
 testRunner.And("System doesn\'t set course ClassCalendar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 534
 testRunner.And("System upsert StudentKey with JSON format is", "{\r\n\t\"id\": \"StudentKey01\",\r\n\t\"Grade\": \"7\",\r\n\t\"Code\": \"StudentCode01\",\r\n\t\"CourseCat" +
                    "alogId\": \"CourseCatalog01\",\r\n\t\"ClassRoomId\": \"ClassRoom01\",\r\n\t\"CreatedDate\": \"2/" +
                    "1/2016\",\r\n\t\"DeletedDate\": \"2/8/2016 00:00 am\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Teacher_Delete_Course")]
        [Xunit.TraitAttribute("Description", "Teacher delete course but the class calendar doesn\'t existing Then system delete " +
            "the selected course")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherDeleteCourseButTheClassCalendarDoesnTExistingThenSystemDeleteTheSelectedCourse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher delete course but the class calendar doesn\'t existing Then system delete " +
                    "the selected course", new string[] {
                        "mock"});
#line 548
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 549
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 550
 testRunner.And("System have ClassCalendar collection with JSON format are", "[]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 554
    testRunner.When("UserProfile \'teacher@mindsage.com\' delete ClassRoom \'ClassRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 555
    testRunner.Then("System doesn\'t upsert UserProfile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 556
 testRunner.And("System doesn\'t update UserActivity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 557
 testRunner.And("System don\'t upsert ClassRoom", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 558
 testRunner.And("System doesn\'t set course ClassCalendar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 559
 testRunner.And("System don\'t upsert StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Teacher_Delete_Course")]
        [Xunit.TraitAttribute("Description", "Teacher delete course but the class room was deleted Then system delete the selec" +
            "ted course")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherDeleteCourseButTheClassRoomWasDeletedThenSystemDeleteTheSelectedCourse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher delete course but the class room was deleted Then system delete the selec" +
                    "ted course", new string[] {
                        "mock"});
#line 562
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 563
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 564
 testRunner.And("System have ClassRoom collection with JSON format are", @"[
    {
        ""id"": ""ClassRoom01"",
        ""Name"": ""Emotional literacy"",
""Grade"": ""7"",
        ""CourseCatalogId"": ""CourseCatalog01"",
        ""CreatedDate"": ""2/1/2016"",
""Message"": ""Don't forget to comment a lesson!"",
""DeletedDate"": ""1/1/2016"",
        ""Lessons"":
        [
            {
                ""id"": ""Lesson01"",
                ""TotalLikes"": 0,
                ""LessonCatalogId"": ""LessonCatalog01""
            },
        ]
    }
]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 586
    testRunner.When("UserProfile \'teacher@mindsage.com\' delete ClassRoom \'ClassRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 587
    testRunner.Then("System upsert UserProfile with JSON format is", @"{
""id"": ""teacher@mindsage.com"",
""Name"": ""teacher"",
""ImageProfileUrl"": ""teacher.jpg"",
""Subscriptions"":
[
{
""id"": ""Subscription01"",
""Role"": ""Teacher"",
""ClassRoomId"": ""ClassRoom01"",
""ClassCalendarId"": ""ClassCalendar01"",
""DeletedDate"": ""2/8/2016 00:00 am""
}
]
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 605
 testRunner.And("System upsert UserProfile with JSON format is", @"{
""id"": ""student@mindsage.com"",
""Name"": ""student"",
""ImageProfileUrl"": ""student.jpg"",
""Subscriptions"":
[
{
""id"": ""Subscription02"",
""Role"": ""Student"",
""ClassRoomId"": ""ClassRoom01"",
""ClassCalendarId"": ""ClassCalendar01"",
""DeletedDate"": ""2/8/2016 00:00 am""
}
]
}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 623
 testRunner.And("System upsert UserActivity collection with JSON format is", @"{
""id"": ""UserActivity01"",
""UserProfileId"": ""teacher@mindsage.com"",
""ClassRoomId"": ""ClassRoom01"",
""DeletedDate"": ""2/8/2016 00:00 am"",
""LessonActivities"":
[
{
""id"": ""LessonActivity01"",
""LessonId"": ""Lesson01"",
""TotalContentsAmount"": 1,
""SawContentIds"": 
[
	""Content01""
],
""CreatedCommentAmount"": 1,
""ParticipationAmount"": 1
}
]
}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 646
 testRunner.And("System upsert UserActivity collection with JSON format is", @"{
""id"": ""UserActivity02"",
""UserProfileId"": ""student@mindsage.com"",
""ClassRoomId"": ""ClassRoom01"",
""DeletedDate"": ""2/8/2016 00:00 am"",
""LessonActivities"":
[
{
""id"": ""LessonActivity02"",
""LessonId"": ""Lesson01"",
""TotalContentsAmount"": 1,
""SawContentIds"": [],
""CreatedCommentAmount"": 0,
""ParticipationAmount"": 0
}
]
}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 666
 testRunner.And("System don\'t upsert ClassRoom", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 667
 testRunner.And("System set course ClassCalendar collection with JSON format is", @"{
       ""id"": ""ClassCalendar01"",
       ""BeginDate"": ""2/1/2016"",
       ""ClassRoomId"": ""ClassRoom01"",
	""DeletedDate"": ""2/8/2016 00:00 am"",
	""Holidays"": [],
	""ShiftDays"": [],
       ""LessonCalendars"":
       [
           {
               ""Id"": ""LessonCalendar01"",
               ""LessonId"": ""Lesson01"",
               ""BeginDate"": ""2/1/2016"",
               ""LessonCatalogId"": ""LessonCatalog01"",
			""TopicOfTheDays"": []
           },
       ]
   }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 688
 testRunner.And("System upsert StudentKey with JSON format is", "{\r\n\t\"id\": \"StudentKey01\",\r\n\t\"Grade\": \"7\",\r\n\t\"Code\": \"StudentCode01\",\r\n\t\"CourseCat" +
                    "alogId\": \"CourseCatalog01\",\r\n\t\"ClassRoomId\": \"ClassRoom01\",\r\n\t\"CreatedDate\": \"2/" +
                    "1/2016\",\r\n\t\"DeletedDate\": \"2/8/2016 00:00 am\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Teacher_Delete_Course")]
        [Xunit.TraitAttribute("Description", "Teacher delete course but the class room doesn\'t existing Then system doesn\'t del" +
            "ete the selected course")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherDeleteCourseButTheClassRoomDoesnTExistingThenSystemDoesnTDeleteTheSelectedCourse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher delete course but the class room doesn\'t existing Then system doesn\'t del" +
                    "ete the selected course", new string[] {
                        "mock"});
#line 702
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 703
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 704
 testRunner.And("System have ClassRoom collection with JSON format are", "[]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 708
    testRunner.When("UserProfile \'teacher@mindsage.com\' delete ClassRoom \'ClassRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 709
    testRunner.Then("System doesn\'t upsert UserProfile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 710
 testRunner.And("System doesn\'t update UserActivity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 711
 testRunner.And("System don\'t upsert ClassRoom", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 712
 testRunner.And("System doesn\'t set course ClassCalendar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 713
 testRunner.And("System don\'t upsert StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Teacher_Delete_Course")]
        [Xunit.TraitAttribute("Description", "Teacher delete course but the student key was deleted Then system delete the sele" +
            "cted course")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherDeleteCourseButTheStudentKeyWasDeletedThenSystemDeleteTheSelectedCourse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher delete course but the student key was deleted Then system delete the sele" +
                    "cted course", new string[] {
                        "mock"});
#line 716
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 717
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 718
 testRunner.And("System have StudentKey collection with JSON format are", "[\r\n\t{\r\n\t\t\"id\": \"StudentKey01\",\r\n\t\t\"Code\": \"StudentCode01\",\r\n\t\t\"Grade\": \"7\",\r\n\t\t\"C" +
                    "ourseCatalogId\": \"CourseCatalog01\",\r\n\t\t\"ClassRoomId\": \"ClassRoom01\",\r\n\t\t\"Created" +
                    "Date\": \"2/1/2016\",\r\n\t\t\"DeletedDate\": \"2/1/2016\",\r\n\t}\r\n]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 732
    testRunner.When("UserProfile \'teacher@mindsage.com\' delete ClassRoom \'ClassRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 733
    testRunner.Then("System upsert UserProfile with JSON format is", @"{
""id"": ""teacher@mindsage.com"",
""Name"": ""teacher"",
""ImageProfileUrl"": ""teacher.jpg"",
""Subscriptions"":
[
{
""id"": ""Subscription01"",
""Role"": ""Teacher"",
""ClassRoomId"": ""ClassRoom01"",
""ClassCalendarId"": ""ClassCalendar01"",
""DeletedDate"": ""2/8/2016 00:00 am""
}
]
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 751
 testRunner.And("System upsert UserProfile with JSON format is", @"{
""id"": ""student@mindsage.com"",
""Name"": ""student"",
""ImageProfileUrl"": ""student.jpg"",
""Subscriptions"":
[
{
""id"": ""Subscription02"",
""Role"": ""Student"",
""ClassRoomId"": ""ClassRoom01"",
""ClassCalendarId"": ""ClassCalendar01"",
""DeletedDate"": ""2/8/2016 00:00 am""
}
]
}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 769
 testRunner.And("System upsert UserActivity collection with JSON format is", @"{
""id"": ""UserActivity01"",
""UserProfileId"": ""teacher@mindsage.com"",
""ClassRoomId"": ""ClassRoom01"",
""DeletedDate"": ""2/8/2016 00:00 am"",
""LessonActivities"":
[
{
""id"": ""LessonActivity01"",
""LessonId"": ""Lesson01"",
""TotalContentsAmount"": 1,
""SawContentIds"": 
[
	""Content01""
],
""CreatedCommentAmount"": 1,
""ParticipationAmount"": 1
}
]
}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 792
 testRunner.And("System upsert UserActivity collection with JSON format is", @"{
""id"": ""UserActivity02"",
""UserProfileId"": ""student@mindsage.com"",
""ClassRoomId"": ""ClassRoom01"",
""DeletedDate"": ""2/8/2016 00:00 am"",
""LessonActivities"":
[
{
""id"": ""LessonActivity02"",
""LessonId"": ""Lesson01"",
""TotalContentsAmount"": 1,
""SawContentIds"": [],
""CreatedCommentAmount"": 0,
""ParticipationAmount"": 0
}
]
}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 812
 testRunner.And("System upsert ClassRoom with JSON format is", @"{
    ""id"": ""ClassRoom01"",
    ""Name"": ""Emotional literacy"",
""Grade"": ""7"",
    ""CourseCatalogId"": ""CourseCatalog01"",
    ""CreatedDate"": ""2/1/2016"",
""DeletedDate"": ""2/8/2016 00:00 am"",
    ""Message"": ""Don't forget to comment a lesson!"",
    ""Lessons"":
    [
        {
            ""id"": ""Lesson01"",
            ""TotalLikes"": 0,
            ""LessonCatalogId"": ""LessonCatalog01""
        },
    ]
}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 832
 testRunner.And("System set course ClassCalendar collection with JSON format is", @"{
       ""id"": ""ClassCalendar01"",
       ""BeginDate"": ""2/1/2016"",
       ""ClassRoomId"": ""ClassRoom01"",
	""DeletedDate"": ""2/8/2016 00:00 am"",
	""Holidays"": [],
	""ShiftDays"": [],
       ""LessonCalendars"":
       [
           {
               ""Id"": ""LessonCalendar01"",
               ""LessonId"": ""Lesson01"",
               ""BeginDate"": ""2/1/2016"",
               ""LessonCatalogId"": ""LessonCatalog01"",
			""TopicOfTheDays"": []
           },
       ]
   }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 853
 testRunner.And("System don\'t upsert StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Teacher_Delete_Course")]
        [Xunit.TraitAttribute("Description", "Teacher delete course but the student key doesn\'t existing Then system delete the" +
            " selected course")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherDeleteCourseButTheStudentKeyDoesnTExistingThenSystemDeleteTheSelectedCourse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher delete course but the student key doesn\'t existing Then system delete the" +
                    " selected course", new string[] {
                        "mock"});
#line 856
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 857
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 858
 testRunner.And("System have StudentKey collection with JSON format are", "[]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 862
    testRunner.When("UserProfile \'teacher@mindsage.com\' delete ClassRoom \'ClassRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 863
    testRunner.Then("System upsert UserProfile with JSON format is", @"{
""id"": ""teacher@mindsage.com"",
""Name"": ""teacher"",
""ImageProfileUrl"": ""teacher.jpg"",
""Subscriptions"":
[
{
""id"": ""Subscription01"",
""Role"": ""Teacher"",
""ClassRoomId"": ""ClassRoom01"",
""ClassCalendarId"": ""ClassCalendar01"",
""DeletedDate"": ""2/8/2016 00:00 am""
}
]
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 881
 testRunner.And("System upsert UserProfile with JSON format is", @"{
""id"": ""student@mindsage.com"",
""Name"": ""student"",
""ImageProfileUrl"": ""student.jpg"",
""Subscriptions"":
[
{
""id"": ""Subscription02"",
""Role"": ""Student"",
""ClassRoomId"": ""ClassRoom01"",
""ClassCalendarId"": ""ClassCalendar01"",
""DeletedDate"": ""2/8/2016 00:00 am""
}
]
}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 899
 testRunner.And("System upsert UserActivity collection with JSON format is", @"{
""id"": ""UserActivity01"",
""UserProfileId"": ""teacher@mindsage.com"",
""ClassRoomId"": ""ClassRoom01"",
""DeletedDate"": ""2/8/2016 00:00 am"",
""LessonActivities"":
[
{
""id"": ""LessonActivity01"",
""LessonId"": ""Lesson01"",
""TotalContentsAmount"": 1,
""SawContentIds"": 
[
	""Content01""
],
""CreatedCommentAmount"": 1,
""ParticipationAmount"": 1
}
]
}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 922
 testRunner.And("System upsert UserActivity collection with JSON format is", @"{
""id"": ""UserActivity02"",
""UserProfileId"": ""student@mindsage.com"",
""ClassRoomId"": ""ClassRoom01"",
""DeletedDate"": ""2/8/2016 00:00 am"",
""LessonActivities"":
[
{
""id"": ""LessonActivity02"",
""LessonId"": ""Lesson01"",
""TotalContentsAmount"": 1,
""SawContentIds"": [],
""CreatedCommentAmount"": 0,
""ParticipationAmount"": 0
}
]
}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 942
 testRunner.And("System upsert ClassRoom with JSON format is", @"{
    ""id"": ""ClassRoom01"",
    ""Name"": ""Emotional literacy"",
""Grade"": ""7"",
    ""CourseCatalogId"": ""CourseCatalog01"",
    ""CreatedDate"": ""2/1/2016"",
""DeletedDate"": ""2/8/2016 00:00 am"",
    ""Message"": ""Don't forget to comment a lesson!"",
    ""Lessons"":
    [
        {
            ""id"": ""Lesson01"",
            ""TotalLikes"": 0,
            ""LessonCatalogId"": ""LessonCatalog01""
        },
    ]
}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 962
 testRunner.And("System set course ClassCalendar collection with JSON format is", @"{
       ""id"": ""ClassCalendar01"",
       ""BeginDate"": ""2/1/2016"",
       ""ClassRoomId"": ""ClassRoom01"",
	""DeletedDate"": ""2/8/2016 00:00 am"",
	""Holidays"": [],
	""ShiftDays"": [],
       ""LessonCalendars"":
       [
           {
               ""Id"": ""LessonCalendar01"",
               ""LessonId"": ""Lesson01"",
               ""BeginDate"": ""2/1/2016"",
               ""LessonCatalogId"": ""LessonCatalog01"",
			""TopicOfTheDays"": []
           },
       ]
   }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 983
 testRunner.And("System don\'t upsert StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Teacher_Delete_Course")]
        [Xunit.TraitAttribute("Description", "Teacher delete course but user activities was deleted Then system delete the sele" +
            "cted course")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherDeleteCourseButUserActivitiesWasDeletedThenSystemDeleteTheSelectedCourse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher delete course but user activities was deleted Then system delete the sele" +
                    "cted course", new string[] {
                        "mock"});
#line 986
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 987
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 988
 testRunner.And("System have UserActivity collection with JSON format are", @"[
{
""id"": ""UserActivity01"",
""UserProfileId"": ""teacher@mindsage.com"",
""ClassRoomId"": ""ClassRoom01"",
""DeletedDate"": ""1/1/2016"",
""LessonActivities"":
[
{
	""id"": ""LessonActivity01"",
	""LessonId"": ""Lesson01"",
	""TotalContentsAmount"": 1,
	""SawContentIds"": 
	[
		""Content01""
	],
	""CreatedCommentAmount"": 1,
	""ParticipationAmount"": 1
}
]
},
{
""id"": ""UserActivity02"",
""UserProfileId"": ""student@mindsage.com"",
""ClassRoomId"": ""ClassRoom01"",
""DeletedDate"": ""1/1/2016"",
""LessonActivities"":
[
{
	""id"": ""LessonActivity02"",
	""LessonId"": ""Lesson01"",
	""TotalContentsAmount"": 1,
	""SawContentIds"": [],
	""CreatedCommentAmount"": 0,
	""ParticipationAmount"": 0
}
]
},
{
""id"": ""UserActivity03"",
""UserProfileId"": ""teacherWithDeletedSubscription@mindsage.com"",
""ClassRoomId"": ""ClassRoom01"",
""DeletedDate"": ""1/1/2016"",
""LessonActivities"":
[
{
	""id"": ""LessonActivity03"",
	""LessonId"": ""Lesson01"",
	""TotalContentsAmount"": 1,
	""SawContentIds"": [],
	""CreatedCommentAmount"": 0,
	""ParticipationAmount"": 0
}
]
}
]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1047
    testRunner.When("UserProfile \'teacher@mindsage.com\' delete ClassRoom \'ClassRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1048
    testRunner.Then("System upsert UserProfile with JSON format is", @"{
""id"": ""teacher@mindsage.com"",
""Name"": ""teacher"",
""ImageProfileUrl"": ""teacher.jpg"",
""Subscriptions"":
[
{
""id"": ""Subscription01"",
""Role"": ""Teacher"",
""ClassRoomId"": ""ClassRoom01"",
""ClassCalendarId"": ""ClassCalendar01"",
""DeletedDate"": ""2/8/2016 00:00 am""
}
]
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1066
 testRunner.And("System upsert UserProfile with JSON format is", @"{
""id"": ""student@mindsage.com"",
""Name"": ""student"",
""ImageProfileUrl"": ""student.jpg"",
""Subscriptions"":
[
{
""id"": ""Subscription02"",
""Role"": ""Student"",
""ClassRoomId"": ""ClassRoom01"",
""ClassCalendarId"": ""ClassCalendar01"",
""DeletedDate"": ""2/8/2016 00:00 am""
}
]
}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1084
 testRunner.And("System doesn\'t update UserActivity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1085
 testRunner.And("System upsert ClassRoom with JSON format is", @"{
    ""id"": ""ClassRoom01"",
    ""Name"": ""Emotional literacy"",
""Grade"": ""7"",
    ""CourseCatalogId"": ""CourseCatalog01"",
    ""CreatedDate"": ""2/1/2016"",
""DeletedDate"": ""2/8/2016 00:00 am"",
    ""Message"": ""Don't forget to comment a lesson!"",
    ""Lessons"":
    [
        {
            ""id"": ""Lesson01"",
            ""TotalLikes"": 0,
            ""LessonCatalogId"": ""LessonCatalog01""
        },
    ]
}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1105
 testRunner.And("System set course ClassCalendar collection with JSON format is", @"{
       ""id"": ""ClassCalendar01"",
       ""BeginDate"": ""2/1/2016"",
       ""ClassRoomId"": ""ClassRoom01"",
	""DeletedDate"": ""2/8/2016 00:00 am"",
	""Holidays"": [],
	""ShiftDays"": [],
       ""LessonCalendars"":
       [
           {
               ""Id"": ""LessonCalendar01"",
               ""LessonId"": ""Lesson01"",
               ""BeginDate"": ""2/1/2016"",
               ""LessonCatalogId"": ""LessonCatalog01"",
			""TopicOfTheDays"": []
           },
       ]
   }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1126
 testRunner.And("System upsert StudentKey with JSON format is", "{\r\n\t\"id\": \"StudentKey01\",\r\n\t\"Grade\": \"7\",\r\n\t\"Code\": \"StudentCode01\",\r\n\t\"CourseCat" +
                    "alogId\": \"CourseCatalog01\",\r\n\t\"ClassRoomId\": \"ClassRoom01\",\r\n\t\"CreatedDate\": \"2/" +
                    "1/2016\",\r\n\t\"DeletedDate\": \"2/8/2016 00:00 am\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Teacher_Delete_Course")]
        [Xunit.TraitAttribute("Description", "Teacher delete course but user activities don\'t existing Then system delete the s" +
            "elected course")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherDeleteCourseButUserActivitiesDonTExistingThenSystemDeleteTheSelectedCourse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher delete course but user activities don\'t existing Then system delete the s" +
                    "elected course", new string[] {
                        "mock"});
#line 1140
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 1141
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1142
 testRunner.And("System have UserActivity collection with JSON format are", "[]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1146
    testRunner.When("UserProfile \'teacher@mindsage.com\' delete ClassRoom \'ClassRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1147
    testRunner.Then("System upsert UserProfile with JSON format is", @"{
""id"": ""teacher@mindsage.com"",
""Name"": ""teacher"",
""ImageProfileUrl"": ""teacher.jpg"",
""Subscriptions"":
[
{
""id"": ""Subscription01"",
""Role"": ""Teacher"",
""ClassRoomId"": ""ClassRoom01"",
""ClassCalendarId"": ""ClassCalendar01"",
""DeletedDate"": ""2/8/2016 00:00 am""
}
]
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1165
 testRunner.And("System upsert UserProfile with JSON format is", @"{
""id"": ""student@mindsage.com"",
""Name"": ""student"",
""ImageProfileUrl"": ""student.jpg"",
""Subscriptions"":
[
{
""id"": ""Subscription02"",
""Role"": ""Student"",
""ClassRoomId"": ""ClassRoom01"",
""ClassCalendarId"": ""ClassCalendar01"",
""DeletedDate"": ""2/8/2016 00:00 am""
}
]
}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1183
 testRunner.And("System doesn\'t update UserActivity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1184
 testRunner.And("System upsert ClassRoom with JSON format is", @"{
    ""id"": ""ClassRoom01"",
    ""Name"": ""Emotional literacy"",
""Grade"": ""7"",
    ""CourseCatalogId"": ""CourseCatalog01"",
    ""CreatedDate"": ""2/1/2016"",
""DeletedDate"": ""2/8/2016 00:00 am"",
    ""Message"": ""Don't forget to comment a lesson!"",
    ""Lessons"":
    [
        {
            ""id"": ""Lesson01"",
            ""TotalLikes"": 0,
            ""LessonCatalogId"": ""LessonCatalog01""
        },
    ]
}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1204
 testRunner.And("System set course ClassCalendar collection with JSON format is", @"{
       ""id"": ""ClassCalendar01"",
       ""BeginDate"": ""2/1/2016"",
       ""ClassRoomId"": ""ClassRoom01"",
	""DeletedDate"": ""2/8/2016 00:00 am"",
	""Holidays"": [],
	""ShiftDays"": [],
       ""LessonCalendars"":
       [
           {
               ""Id"": ""LessonCalendar01"",
               ""LessonId"": ""Lesson01"",
               ""BeginDate"": ""2/1/2016"",
               ""LessonCatalogId"": ""LessonCatalog01"",
			""TopicOfTheDays"": []
           },
       ]
   }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1225
 testRunner.And("System upsert StudentKey with JSON format is", "{\r\n\t\"id\": \"StudentKey01\",\r\n\t\"Grade\": \"7\",\r\n\t\"Code\": \"StudentCode01\",\r\n\t\"CourseCat" +
                    "alogId\": \"CourseCatalog01\",\r\n\t\"ClassRoomId\": \"ClassRoom01\",\r\n\t\"CreatedDate\": \"2/" +
                    "1/2016\",\r\n\t\"DeletedDate\": \"2/8/2016 00:00 am\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                Teacher_Delete_CourseFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                Teacher_Delete_CourseFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
