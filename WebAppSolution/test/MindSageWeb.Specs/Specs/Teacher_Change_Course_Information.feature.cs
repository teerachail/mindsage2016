// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlow.GeneratedTests.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class Teacher_Change_Course_InformationFeature : Xunit.IClassFixture<Teacher_Change_Course_InformationFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Teacher_Change_Course_Information.feature"
#line hidden
        
        public Teacher_Change_Course_InformationFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Teacher_Change_Course_Information", "\tIn order to avoid silly mistakes\r\n\tAs a math idiot\r\n\tI want to be told the sum o" +
                    "f two numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
 testRunner.Given("Initialize mocking data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.And("System have UserProfile collection with JSON format are", @"[
{
""id"": ""teacher@mindsage.com"",
""Name"": ""teacher"",
""ImageProfileUrl"": ""teacher.jpg"",
""Subscriptions"":
[
{
	""id"": ""Subscription01"",
	""Role"": ""Teacher"",
	""ClassRoomId"": ""ClassRoom01"",
	""ClassCalendarId"": ""ClassCalendar01"",
},
]
},
{
""id"": ""student@mindsage.com"",
""Name"": ""student"",
""ImageProfileUrl"": ""student.jpg"",
""Subscriptions"":
[
{
	""id"": ""Subscription02"",
	""Role"": ""Student"",
	""ClassRoomId"": ""ClassRoom01"",
	""ClassCalendarId"": ""ClassCalendar01"",
},
]
},
{
""id"": ""teacherWithDeletedSubscription@mindsage.com"",
""Name"": ""teacher"",
""ImageProfileUrl"": ""teacher.jpg"",
""Subscriptions"":
[
{
	""id"": ""Subscription03"",
	""Role"": ""Teacher"",
	""ClassRoomId"": ""ClassRoom01"",
	""ClassCalendarId"": ""ClassCalendar01"",
	""DeletedDate"": ""1/1/2016""
},
]
},
]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 56
 testRunner.And("System have ClassCalendar collection with JSON format are", @"[
    {
        ""id"": ""ClassCalendar01"",
        ""BeginDate"": ""2/1/2016"",
        ""ClassRoomId"": ""ClassRoom01"",
        ""LessonCalendars"":
        [
            {
                ""Id"": ""LessonCalendar01"",
                ""LessonId"": ""Lesson01"",
                ""BeginDate"": ""2/1/2016"",
                ""LessonCatalogId"": ""LessonCatalog01""
            },
        ]
    },
]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 75
 testRunner.And("System have ClassRoom collection with JSON format are", @"[
    {
        ""id"": ""ClassRoom01"",
        ""Name"": ""Emotional literacy"",
""Grade"": ""7"",
        ""CourseCatalogId"": ""CourseCatalog01"",
        ""CreatedDate"": ""2/1/2016"",
""Message"": ""Don't forget to comment a lesson!"",
        ""Lessons"":
        [
            {
                ""id"": ""Lesson01"",
                ""TotalLikes"": 0,
                ""LessonCatalogId"": ""LessonCatalog01""
            },
        ]
    }
]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 96
 testRunner.And("System have StudentKey collection with JSON format are", "[\r\n\t{\r\n\t\t\"id\": \"StudentKey01\",\r\n\t\t\"Code\": \"StudentCode01\",\r\n\t\t\"Grade\": \"7\",\r\n\t\t\"C" +
                    "ourseCatalogId\": \"CourseCatalog01\",\r\n\t\t\"ClassRoomId\": \"ClassRoom01\",\r\n\t\t\"Created" +
                    "Date\": \"2/1/2016\",\r\n\t}\r\n]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        public virtual void SetFixture(Teacher_Change_Course_InformationFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Teacher_Change_Course_Information")]
        [Xunit.TraitAttribute("Description", "Teacher change course name Then system update course name")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherChangeCourseNameThenSystemUpdateCourseName()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher change course name Then system update course name", new string[] {
                        "mock"});
#line 111
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 112
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 113
    testRunner.When("UserProfile \'teacher@mindsage.com\' change course info from ClassRoom \'ClassRoom01" +
                    "\' to ClassName \'TheNewName\' and StudentCode \'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 114
    testRunner.Then("System upsert ClassRoom with JSON format is", @"{
    ""id"": ""ClassRoom01"",
    ""Name"": ""TheNewName"",
""Grade"": ""7"",
    ""CourseCatalogId"": ""CourseCatalog01"",
    ""CreatedDate"": ""2/1/2016"",
    ""Message"": ""Don't forget to comment a lesson!"",
    ""Lessons"":
    [
        {
            ""id"": ""Lesson01"",
            ""TotalLikes"": 0,
            ""LessonCatalogId"": ""LessonCatalog01""
        },
    ]
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 133
 testRunner.And("System don\'t upsert StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 134
 testRunner.And("System don\'t create new StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Teacher_Change_Course_Information")]
        [Xunit.TraitAttribute("Description", "Teacher change student code Then system create new student key")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherChangeStudentCodeThenSystemCreateNewStudentKey()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher change student code Then system create new student key", new string[] {
                        "mock"});
#line 137
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 138
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 139
    testRunner.When("UserProfile \'teacher@mindsage.com\' change course info from ClassRoom \'ClassRoom01" +
                    "\' to ClassName \'\' and StudentCode \'NewStudentCode\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 140
    testRunner.Then("System upsert StudentKey with JSON format is", "{\r\n\t\"id\": \"StudentKey01\",\r\n\t\"Grade\": \"7\",\r\n\t\"Code\": \"StudentCode01\",\r\n\t\"CourseCat" +
                    "alogId\": \"CourseCatalog01\",\r\n\t\"ClassRoomId\": \"ClassRoom01\",\r\n\t\"CreatedDate\": \"2/" +
                    "1/2016\",\r\n\t\"DeletedDate\": \"2/8/2016 00:00 am\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 152
 testRunner.And("System create new StudentKey with JSON format is", "{\r\n\t\"Grade\": \"7\",\r\n\t\"Code\": \"NewStudentCode\",\r\n\t\"CourseCatalogId\": \"CourseCatalog" +
                    "01\",\r\n\t\"ClassRoomId\": \"ClassRoom01\",\r\n\t\"CreatedDate\": \"2/8/2016\",\r\n}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 162
 testRunner.And("System don\'t upsert ClassRoom", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Teacher_Change_Course_Information")]
        [Xunit.TraitAttribute("Description", "Teacher change course name and student code Then system update course name and st" +
            "udent code")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherChangeCourseNameAndStudentCodeThenSystemUpdateCourseNameAndStudentCode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher change course name and student code Then system update course name and st" +
                    "udent code", new string[] {
                        "mock"});
#line 165
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 166
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 167
    testRunner.When("UserProfile \'teacher@mindsage.com\' change course info from ClassRoom \'ClassRoom01" +
                    "\' to ClassName \'TheNewName\' and StudentCode \'NewStudentCode\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 168
    testRunner.Then("System upsert ClassRoom with JSON format is", @"{
    ""id"": ""ClassRoom01"",
    ""Name"": ""TheNewName"",
""Grade"": ""7"",
    ""CourseCatalogId"": ""CourseCatalog01"",
    ""CreatedDate"": ""2/1/2016"",
    ""Message"": ""Don't forget to comment a lesson!"",
    ""Lessons"":
    [
        {
            ""id"": ""Lesson01"",
            ""TotalLikes"": 0,
            ""LessonCatalogId"": ""LessonCatalog01""
        },
    ]
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 187
 testRunner.And("System upsert StudentKey with JSON format is", "{\r\n\t\"id\": \"StudentKey01\",\r\n\t\"Grade\": \"7\",\r\n\t\"Code\": \"StudentCode01\",\r\n\t\"CourseCat" +
                    "alogId\": \"CourseCatalog01\",\r\n\t\"ClassRoomId\": \"ClassRoom01\",\r\n\t\"CreatedDate\": \"2/" +
                    "1/2016\",\r\n\t\"DeletedDate\": \"2/8/2016 00:00 am\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 199
 testRunner.And("System create new StudentKey with JSON format is", "{\r\n\t\"Grade\": \"7\",\r\n\t\"Code\": \"NewStudentCode\",\r\n\t\"CourseCatalogId\": \"CourseCatalog" +
                    "01\",\r\n\t\"ClassRoomId\": \"ClassRoom01\",\r\n\t\"CreatedDate\": \"2/8/2016\",\r\n}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Teacher_Change_Course_Information")]
        [Xunit.TraitAttribute("Description", "Teacher change course name (empty) Then system doesn\'t update course information")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherChangeCourseNameEmptyThenSystemDoesnTUpdateCourseInformation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher change course name (empty) Then system doesn\'t update course information", new string[] {
                        "mock"});
#line 211
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 212
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 213
    testRunner.When("UserProfile \'teacher@mindsage.com\' change course info from ClassRoom \'ClassRoom01" +
                    "\' to ClassName \'\' and StudentCode \'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 214
    testRunner.Then("System don\'t upsert ClassRoom", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 215
 testRunner.And("System don\'t upsert StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 216
 testRunner.And("System don\'t create new StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Teacher_Change_Course_Information")]
        [Xunit.TraitAttribute("Description", "Teacher change course name (null) Then system doesn\'t update course information")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherChangeCourseNameNullThenSystemDoesnTUpdateCourseInformation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher change course name (null) Then system doesn\'t update course information", new string[] {
                        "mock"});
#line 219
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 220
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 221
    testRunner.When("UserProfile \'teacher@mindsage.com\' change course info from ClassRoom \'ClassRoom01" +
                    "\' to ClassName \'NULL\' and StudentCode \'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 222
    testRunner.Then("System don\'t upsert ClassRoom", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 223
 testRunner.And("System don\'t upsert StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 224
 testRunner.And("System don\'t create new StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Teacher_Change_Course_Information")]
        [Xunit.TraitAttribute("Description", "Teacher change student code (empty) Then system doesn\'t update course information" +
            "")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherChangeStudentCodeEmptyThenSystemDoesnTUpdateCourseInformation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher change student code (empty) Then system doesn\'t update course information" +
                    "", new string[] {
                        "mock"});
#line 227
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 228
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 229
    testRunner.When("UserProfile \'teacher@mindsage.com\' change course info from ClassRoom \'ClassRoom01" +
                    "\' to ClassName \'\' and StudentCode \'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 230
    testRunner.Then("System don\'t upsert ClassRoom", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 231
 testRunner.And("System don\'t upsert StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 232
 testRunner.And("System don\'t create new StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Teacher_Change_Course_Information")]
        [Xunit.TraitAttribute("Description", "Teacher change student code (null) Then system doesn\'t update course information")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherChangeStudentCodeNullThenSystemDoesnTUpdateCourseInformation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher change student code (null) Then system doesn\'t update course information", new string[] {
                        "mock"});
#line 235
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 236
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 237
    testRunner.When("UserProfile \'teacher@mindsage.com\' change course info from ClassRoom \'ClassRoom01" +
                    "\' to ClassName \'\' and StudentCode \'NULL\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 238
    testRunner.Then("System don\'t upsert ClassRoom", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 239
 testRunner.And("System don\'t upsert StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 240
 testRunner.And("System don\'t create new StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Teacher_Change_Course_Information")]
        [Xunit.TraitAttribute("Description", "Teacher change course information but used incorrect ClassRoom (unknow) Then syst" +
            "em doesn\'t update course information")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherChangeCourseInformationButUsedIncorrectClassRoomUnknowThenSystemDoesnTUpdateCourseInformation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher change course information but used incorrect ClassRoom (unknow) Then syst" +
                    "em doesn\'t update course information", new string[] {
                        "mock"});
#line 243
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 244
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 245
    testRunner.When("UserProfile \'teacher@mindsage.com\' change course info from ClassRoom \'UnknowClass" +
                    "RoomId\' to ClassName \'TheNewName\' and StudentCode \'NewStudentCode\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 246
    testRunner.Then("System don\'t upsert ClassRoom", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 247
 testRunner.And("System don\'t upsert StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 248
 testRunner.And("System don\'t create new StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Teacher_Change_Course_Information")]
        [Xunit.TraitAttribute("Description", "Teacher change course information but used incorrect ClassRoom (empty) Then syste" +
            "m doesn\'t update course information")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherChangeCourseInformationButUsedIncorrectClassRoomEmptyThenSystemDoesnTUpdateCourseInformation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher change course information but used incorrect ClassRoom (empty) Then syste" +
                    "m doesn\'t update course information", new string[] {
                        "mock"});
#line 251
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 252
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 253
    testRunner.When("UserProfile \'teacher@mindsage.com\' change course info from ClassRoom \'\' to ClassN" +
                    "ame \'TheNewName\' and StudentCode \'NewStudentCode\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 254
    testRunner.Then("System don\'t upsert ClassRoom", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 255
 testRunner.And("System don\'t upsert StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 256
 testRunner.And("System don\'t create new StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Teacher_Change_Course_Information")]
        [Xunit.TraitAttribute("Description", "Teacher change course information but used incorrect ClassRoom (null) Then system" +
            " doesn\'t update course information")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherChangeCourseInformationButUsedIncorrectClassRoomNullThenSystemDoesnTUpdateCourseInformation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher change course information but used incorrect ClassRoom (null) Then system" +
                    " doesn\'t update course information", new string[] {
                        "mock"});
#line 259
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 260
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 261
    testRunner.When("UserProfile \'teacher@mindsage.com\' change course info from ClassRoom \'NULL\' to Cl" +
                    "assName \'TheNewName\' and StudentCode \'NewStudentCode\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 262
    testRunner.Then("System don\'t upsert ClassRoom", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 263
 testRunner.And("System don\'t upsert StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 264
 testRunner.And("System don\'t create new StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Teacher_Change_Course_Information")]
        [Xunit.TraitAttribute("Description", "Incorrect user (unknow) change course information Then system doesn\'t update cour" +
            "se information")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void IncorrectUserUnknowChangeCourseInformationThenSystemDoesnTUpdateCourseInformation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Incorrect user (unknow) change course information Then system doesn\'t update cour" +
                    "se information", new string[] {
                        "mock"});
#line 267
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 268
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 269
    testRunner.When("UserProfile \'unknow@mindsage.com\' change course info from ClassRoom \'ClassRoom01\'" +
                    " to ClassName \'TheNewName\' and StudentCode \'NewStudentCode\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 270
    testRunner.Then("System don\'t upsert ClassRoom", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 271
 testRunner.And("System don\'t upsert StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 272
 testRunner.And("System don\'t create new StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Teacher_Change_Course_Information")]
        [Xunit.TraitAttribute("Description", "Incorrect user (empty) change course information Then system doesn\'t update cours" +
            "e information")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void IncorrectUserEmptyChangeCourseInformationThenSystemDoesnTUpdateCourseInformation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Incorrect user (empty) change course information Then system doesn\'t update cours" +
                    "e information", new string[] {
                        "mock"});
#line 275
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 276
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 277
    testRunner.When("UserProfile \'\' change course info from ClassRoom \'ClassRoom01\' to ClassName \'TheN" +
                    "ewName\' and StudentCode \'NewStudentCode\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 278
    testRunner.Then("System don\'t upsert ClassRoom", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 279
 testRunner.And("System don\'t upsert StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 280
 testRunner.And("System don\'t create new StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Teacher_Change_Course_Information")]
        [Xunit.TraitAttribute("Description", "Incorrect user (null) change course information Then system doesn\'t update course" +
            " information")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void IncorrectUserNullChangeCourseInformationThenSystemDoesnTUpdateCourseInformation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Incorrect user (null) change course information Then system doesn\'t update course" +
                    " information", new string[] {
                        "mock"});
#line 283
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 284
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 285
    testRunner.When("UserProfile \'NULL\' change course info from ClassRoom \'ClassRoom01\' to ClassName \'" +
                    "TheNewName\' and StudentCode \'NewStudentCode\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 286
    testRunner.Then("System don\'t upsert ClassRoom", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 287
 testRunner.And("System don\'t upsert StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 288
 testRunner.And("System don\'t create new StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Teacher_Change_Course_Information")]
        [Xunit.TraitAttribute("Description", "Incorrect user (Role = student) change course information Then system doesn\'t upd" +
            "ate course information")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void IncorrectUserRoleStudentChangeCourseInformationThenSystemDoesnTUpdateCourseInformation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Incorrect user (Role = student) change course information Then system doesn\'t upd" +
                    "ate course information", new string[] {
                        "mock"});
#line 291
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 292
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 293
    testRunner.When("UserProfile \'student@mindsage.com\' change course info from ClassRoom \'ClassRoom01" +
                    "\' to ClassName \'TheNewName\' and StudentCode \'NewStudentCode\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 294
    testRunner.Then("System don\'t upsert ClassRoom", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 295
 testRunner.And("System don\'t upsert StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 296
 testRunner.And("System don\'t create new StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Teacher_Change_Course_Information")]
        [Xunit.TraitAttribute("Description", "Teacher change course information but its subscription was deleted Then system do" +
            "n\'t update course information")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherChangeCourseInformationButItsSubscriptionWasDeletedThenSystemDonTUpdateCourseInformation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher change course information but its subscription was deleted Then system do" +
                    "n\'t update course information", new string[] {
                        "mock"});
#line 299
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 300
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 301
    testRunner.When("UserProfile \'teacherWithDeletedSubscription@mindsage.com\' change course info from" +
                    " ClassRoom \'ClassRoom01\' to ClassName \'TheNewName\' and StudentCode \'NewStudentCo" +
                    "de\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 302
    testRunner.Then("System don\'t upsert ClassRoom", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 303
 testRunner.And("System don\'t upsert StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 304
 testRunner.And("System don\'t create new StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Teacher_Change_Course_Information")]
        [Xunit.TraitAttribute("Description", "Teacher change course information but its subscription doesn\'t existing Then syst" +
            "em don\'t update course information")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherChangeCourseInformationButItsSubscriptionDoesnTExistingThenSystemDonTUpdateCourseInformation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher change course information but its subscription doesn\'t existing Then syst" +
                    "em don\'t update course information", new string[] {
                        "mock"});
#line 307
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 308
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 309
 testRunner.And("System have UserProfile collection with JSON format are", "[\r\n{\r\n\"id\": \"teacher@mindsage.com\",\r\n\"Name\": \"teacher\",\r\n\"ImageProfileUrl\": \"teac" +
                    "her.jpg\",\r\n\"Subscriptions\": []\r\n}\r\n]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 320
    testRunner.When("UserProfile \'teacher@mindsage.com\' change course info from ClassRoom \'ClassRoom01" +
                    "\' to ClassName \'TheNewName\' and StudentCode \'NewStudentCode\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 321
    testRunner.Then("System don\'t upsert ClassRoom", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 322
 testRunner.And("System don\'t upsert StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 323
 testRunner.And("System don\'t create new StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Teacher_Change_Course_Information")]
        [Xunit.TraitAttribute("Description", "Teacher change course information but the ClassRoom was deleted Then system don\'t" +
            " update course information")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherChangeCourseInformationButTheClassRoomWasDeletedThenSystemDonTUpdateCourseInformation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher change course information but the ClassRoom was deleted Then system don\'t" +
                    " update course information", new string[] {
                        "mock"});
#line 326
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 327
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 328
 testRunner.And("System have ClassRoom collection with JSON format are", @"[
    {
        ""id"": ""ClassRoom01"",
        ""Name"": ""Emotional literacy"",
""Grade"": ""7"",
        ""CourseCatalogId"": ""CourseCatalog01"",
        ""CreatedDate"": ""2/1/2016"",
""Message"": ""Don't forget to comment a lesson!"",
""DeletedDate"": ""1/1/2016"",
        ""Lessons"":
        [
            {
                ""id"": ""Lesson01"",
                ""TotalLikes"": 0,
                ""LessonCatalogId"": ""LessonCatalog01""
            },
        ]
    }
]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 350
    testRunner.When("UserProfile \'teacher@mindsage.com\' change course info from ClassRoom \'ClassRoom01" +
                    "\' to ClassName \'TheNewName\' and StudentCode \'NewStudentCode\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 351
    testRunner.Then("System don\'t upsert ClassRoom", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 352
 testRunner.And("System don\'t upsert StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 353
 testRunner.And("System don\'t create new StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Teacher_Change_Course_Information")]
        [Xunit.TraitAttribute("Description", "Teacher change course information but the ClassRoom doesn\'t existing Then system " +
            "don\'t update course information")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherChangeCourseInformationButTheClassRoomDoesnTExistingThenSystemDonTUpdateCourseInformation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher change course information but the ClassRoom doesn\'t existing Then system " +
                    "don\'t update course information", new string[] {
                        "mock"});
#line 356
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 357
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 358
 testRunner.And("System have ClassRoom collection with JSON format are", "[]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 362
    testRunner.When("UserProfile \'teacher@mindsage.com\' change course info from ClassRoom \'ClassRoom01" +
                    "\' to ClassName \'TheNewName\' and StudentCode \'NewStudentCode\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 363
    testRunner.Then("System don\'t upsert ClassRoom", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 364
 testRunner.And("System don\'t upsert StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 365
 testRunner.And("System don\'t create new StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Teacher_Change_Course_Information")]
        [Xunit.TraitAttribute("Description", "Teacher change course information but the ClassCalendar was deleted Then system u" +
            "pdate course information")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherChangeCourseInformationButTheClassCalendarWasDeletedThenSystemUpdateCourseInformation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher change course information but the ClassCalendar was deleted Then system u" +
                    "pdate course information", new string[] {
                        "mock"});
#line 368
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 369
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 370
 testRunner.And("System have ClassCalendar collection with JSON format are", @"[
    {
        ""id"": ""ClassCalendar01"",
        ""BeginDate"": ""2/1/2016"",
        ""ClassRoomId"": ""ClassRoom01"",
""DeletedDate"": ""1/1/2016"",
        ""LessonCalendars"":
        [
            {
                ""Id"": ""LessonCalendar01"",
                ""LessonId"": ""Lesson01"",
                ""BeginDate"": ""2/1/2016"",
                ""LessonCatalogId"": ""LessonCatalog01""
            },
        ]
    },
]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 390
    testRunner.When("UserProfile \'teacher@mindsage.com\' change course info from ClassRoom \'ClassRoom01" +
                    "\' to ClassName \'TheNewName\' and StudentCode \'NewStudentCode\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 391
    testRunner.Then("System upsert ClassRoom with JSON format is", @"{
    ""id"": ""ClassRoom01"",
    ""Name"": ""TheNewName"",
""Grade"": ""7"",
    ""CourseCatalogId"": ""CourseCatalog01"",
    ""CreatedDate"": ""2/1/2016"",
    ""Message"": ""Don't forget to comment a lesson!"",
    ""Lessons"":
    [
        {
            ""id"": ""Lesson01"",
            ""TotalLikes"": 0,
            ""LessonCatalogId"": ""LessonCatalog01""
        },
    ]
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 410
 testRunner.And("System upsert StudentKey with JSON format is", "{\r\n\t\"id\": \"StudentKey01\",\r\n\t\"Grade\": \"7\",\r\n\t\"Code\": \"StudentCode01\",\r\n\t\"CourseCat" +
                    "alogId\": \"CourseCatalog01\",\r\n\t\"ClassRoomId\": \"ClassRoom01\",\r\n\t\"CreatedDate\": \"2/" +
                    "1/2016\",\r\n\t\"DeletedDate\": \"2/8/2016 00:00 am\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 422
 testRunner.And("System create new StudentKey with JSON format is", "{\r\n\t\"Grade\": \"7\",\r\n\t\"Code\": \"NewStudentCode\",\r\n\t\"CourseCatalogId\": \"CourseCatalog" +
                    "01\",\r\n\t\"ClassRoomId\": \"ClassRoom01\",\r\n\t\"CreatedDate\": \"2/8/2016\",\r\n}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Teacher_Change_Course_Information")]
        [Xunit.TraitAttribute("Description", "Teacher change course information but the ClassCalendar doesn\'t existing Then sys" +
            "tem update course information")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherChangeCourseInformationButTheClassCalendarDoesnTExistingThenSystemUpdateCourseInformation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher change course information but the ClassCalendar doesn\'t existing Then sys" +
                    "tem update course information", new string[] {
                        "mock"});
#line 434
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 435
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 436
 testRunner.And("System have ClassCalendar collection with JSON format are", "[]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 440
    testRunner.When("UserProfile \'teacher@mindsage.com\' change course info from ClassRoom \'ClassRoom01" +
                    "\' to ClassName \'TheNewName\' and StudentCode \'NewStudentCode\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 441
    testRunner.Then("System upsert ClassRoom with JSON format is", @"{
    ""id"": ""ClassRoom01"",
    ""Name"": ""TheNewName"",
""Grade"": ""7"",
    ""CourseCatalogId"": ""CourseCatalog01"",
    ""CreatedDate"": ""2/1/2016"",
    ""Message"": ""Don't forget to comment a lesson!"",
    ""Lessons"":
    [
        {
            ""id"": ""Lesson01"",
            ""TotalLikes"": 0,
            ""LessonCatalogId"": ""LessonCatalog01""
        },
    ]
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 460
 testRunner.And("System upsert StudentKey with JSON format is", "{\r\n\t\"id\": \"StudentKey01\",\r\n\t\"Grade\": \"7\",\r\n\t\"Code\": \"StudentCode01\",\r\n\t\"CourseCat" +
                    "alogId\": \"CourseCatalog01\",\r\n\t\"ClassRoomId\": \"ClassRoom01\",\r\n\t\"CreatedDate\": \"2/" +
                    "1/2016\",\r\n\t\"DeletedDate\": \"2/8/2016 00:00 am\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 472
 testRunner.And("System create new StudentKey with JSON format is", "{\r\n\t\"Grade\": \"7\",\r\n\t\"Code\": \"NewStudentCode\",\r\n\t\"CourseCatalogId\": \"CourseCatalog" +
                    "01\",\r\n\t\"ClassRoomId\": \"ClassRoom01\",\r\n\t\"CreatedDate\": \"2/8/2016\",\r\n}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Teacher_Change_Course_Information")]
        [Xunit.TraitAttribute("Description", "Teacher change student code but the StudentKey was deleted Then system create new" +
            " student code")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherChangeStudentCodeButTheStudentKeyWasDeletedThenSystemCreateNewStudentCode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher change student code but the StudentKey was deleted Then system create new" +
                    " student code", new string[] {
                        "mock"});
#line 484
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 485
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 486
 testRunner.And("System have StudentKey collection with JSON format are", "[\r\n\t{\r\n\t\t\"id\": \"StudentKey01\",\r\n\t\t\"Code\": \"StudentCode01\",\r\n\t\t\"Grade\": \"7\",\r\n\t\t\"C" +
                    "ourseCatalogId\": \"CourseCatalog01\",\r\n\t\t\"ClassRoomId\": \"ClassRoom01\",\r\n\t\t\"Created" +
                    "Date\": \"2/1/2016\",\r\n\t\t\"DeletedDate\": \"2/1/2016\"\r\n\t}\r\n]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 500
    testRunner.When("UserProfile \'teacher@mindsage.com\' change course info from ClassRoom \'ClassRoom01" +
                    "\' to ClassName \'\' and StudentCode \'NewStudentCode\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 501
    testRunner.Then("System create new StudentKey with JSON format is", "{\r\n\t\"Grade\": \"7\",\r\n\t\"Code\": \"NewStudentCode\",\r\n\t\"CourseCatalogId\": \"CourseCatalog" +
                    "01\",\r\n\t\"ClassRoomId\": \"ClassRoom01\",\r\n\t\"CreatedDate\": \"2/8/2016\",\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 511
 testRunner.And("System don\'t upsert ClassRoom", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 512
 testRunner.And("System don\'t upsert StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Teacher_Change_Course_Information")]
        [Xunit.TraitAttribute("Description", "Teacher change student code but the StudentKey doesn\'t existing Then system doesn" +
            "\'t create new student code")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherChangeStudentCodeButTheStudentKeyDoesnTExistingThenSystemDoesnTCreateNewStudentCode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher change student code but the StudentKey doesn\'t existing Then system doesn" +
                    "\'t create new student code", new string[] {
                        "mock"});
#line 515
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 516
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 517
 testRunner.And("System have StudentKey collection with JSON format are", "[]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 521
    testRunner.When("UserProfile \'teacher@mindsage.com\' change course info from ClassRoom \'ClassRoom01" +
                    "\' to ClassName \'\' and StudentCode \'NewStudentCode\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 522
    testRunner.Then("System don\'t upsert ClassRoom", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 523
 testRunner.And("System don\'t upsert StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 524
 testRunner.And("System don\'t create new StudentKey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                Teacher_Change_Course_InformationFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                Teacher_Change_Course_InformationFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
