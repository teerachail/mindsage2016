// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlow.GeneratedTests.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class Set_Course_Schedule_By_RangeFeature : Xunit.IClassFixture<Set_Course_Schedule_By_RangeFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Set_Course_Schedule_By_Range.feature"
#line hidden
        
        public Set_Course_Schedule_By_RangeFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Set_Course_Schedule_By_Range", "\tIn order to avoid silly mistakes\r\n\tAs a math idiot\r\n\tI want to be told the sum o" +
                    "f two numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
 testRunner.Given("Initialize mocking data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("System have UserProfile collection with JSON format are", @"[
{
""id"": ""sakul@mindsage.com"",
""Name"": ""Sakul jaruthanaset"",
""ImageProfileUrl"": ""ImgURL01"",
""Subscriptions"":
[
{
	""id"": ""Subscription01"",
	""Role"": ""Teacher"",
	""ClassRoomId"": ""ClassRoom01"",
	""ClassCalendarId"": ""ClassCalendar01"",
},
]
},
{
""id"": ""student@mindsage.com"",
""Name"": ""Student jaruthanaset"",
""ImageProfileUrl"": ""ImgURL02"",
""Subscriptions"":
[
{
	""id"": ""Subscription02"",
	""Role"": ""Student"",
	""ClassRoomId"": ""ClassRoom01"",
	""ClassCalendarId"": ""ClassCalendar01"",
},
]
},
{
""id"": ""selfpurchase@mindsage.com"",
""Name"": ""Selfpurchase jaruthanaset"",
""ImageProfileUrl"": ""ImgURL03"",
""Subscriptions"":
[
{
	""id"": ""Subscription03"",
	""Role"": ""SelfPurchaser"",
	""ClassRoomId"": ""ClassRoom01"",
	""ClassCalendarId"": ""ClassCalendar01"",
},
]
}
]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 55
 testRunner.And("System have ClassCalendar collection with JSON format are", @"[
    {
        ""id"": ""ClassCalendar01"",
        ""ClassRoomId"": ""ClassRoom01"",
""CreatedDate"": ""1/1/2016"",
""BeginDate"": ""1/1/2016"",
""ExpiredDate"": ""1/10/2016"",
        ""LessonCalendars"":
        [
            {
                ""Id"": ""LessonCalendar01"",
                ""Order"": 1,
                ""SemesterGroupName"": ""A"",
                ""BeginDate"": ""1/1/2016"",
	""TopicOfTheDays"": [],
                ""LessonId"": ""Lesson01"",
            },
{
                ""Id"": ""LessonCalendar02"",
                ""Order"": 2,
                ""SemesterGroupName"": ""A"",
                ""BeginDate"": ""1/6/2016"",
	""TopicOfTheDays"": [],
                ""LessonId"": ""Lesson01"",
            }
        ],
""Holidays"": [],
""ShiftDays"": []
    }
]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        public virtual void SetFixture(Set_Course_Schedule_By_RangeFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Set_Course_Schedule_By_Range")]
        [Xunit.TraitAttribute("Description", "Teacher set course schedule holiday only (Single day) Then system set course Cale" +
            "ndar and send new schedule back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherSetCourseScheduleHolidayOnlySingleDayThenSystemSetCourseCalendarAndSendNewScheduleBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher set course schedule holiday only (Single day) Then system set course Cale" +
                    "ndar and send new schedule back", new string[] {
                        "mock"});
#line 90
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 91
 testRunner.Given("Today is \'1/1/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 92
 testRunner.When("User \'sakul@mindsage.com\' set schedule of ClassRoomId \'ClassRoom01\' FromDate \'1/1" +
                    "/2016\' ToDate \'\' IsHoliday \'true\' IsShift \'false\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 93
 testRunner.Then("System set course ClassCalendar collection with JSON format is", @"{
       ""id"": ""ClassCalendar01"",
	""BeginDate"": ""1/1/2016"",
	""ExpiredDate"": ""1/10/2016"",
       ""ClassRoomId"": ""ClassRoom01"",
	""CreatedDate"": ""1/1/2016"",
       ""LessonCalendars"":
       [
           {
               ""Id"": ""LessonCalendar01"",
               ""Order"": 1,
               ""SemesterGroupName"": ""A"",
               ""BeginDate"": ""1/1/2016"",
			""TopicOfTheDays"": [],
               ""LessonId"": ""Lesson01"",
           },
		{
               ""Id"": ""LessonCalendar02"",
               ""Order"": 2,
               ""SemesterGroupName"": ""A"",
               ""BeginDate"": ""1/6/2016"",
			""TopicOfTheDays"": [],
               ""LessonId"": ""Lesson01"",
           }
       ],
	""Holidays"": [ ""1/1/2016"" ],
	""ShiftDays"": []
   }", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 124
 testRunner.And("System send course schedule with JSON format is", @"{
	""IsComplete"": true,
	""BeginDate"": ""1/1/2016"",
	""EndDate"": ""1/10/2016"",
	""Lessons"": [
		{
			""Name"": ""Lesson 1"",
			""BeginDate"": ""1/1/2016""
		},
		{
			""Name"": ""Lesson 2"",
			""BeginDate"": ""1/6/2016""
		}
	],
	""Holidays"": [ ""1/1/2016"" ],
	""ShiftDays"": []
}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Set_Course_Schedule_By_Range")]
        [Xunit.TraitAttribute("Description", "Teacher set course schedule holiday only (Multiple days) Then system set course C" +
            "alendar and send new schedule back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherSetCourseScheduleHolidayOnlyMultipleDaysThenSystemSetCourseCalendarAndSendNewScheduleBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher set course schedule holiday only (Multiple days) Then system set course C" +
                    "alendar and send new schedule back", new string[] {
                        "mock"});
#line 146
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 147
 testRunner.Given("Today is \'1/1/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 148
 testRunner.When("User \'sakul@mindsage.com\' set schedule of ClassRoomId \'ClassRoom01\' FromDate \'1/1" +
                    "/2016\' ToDate \'1/5/2016\' IsHoliday \'true\' IsShift \'false\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 149
 testRunner.Then("System set course ClassCalendar collection with JSON format is", @"{
       ""id"": ""ClassCalendar01"",
	""BeginDate"": ""1/1/2016"",
	""ExpiredDate"": ""1/10/2016"",
       ""ClassRoomId"": ""ClassRoom01"",
	""CreatedDate"": ""1/1/2016"",
       ""LessonCalendars"":
       [
           {
               ""Id"": ""LessonCalendar01"",
               ""Order"": 1,
               ""SemesterGroupName"": ""A"",
               ""BeginDate"": ""1/1/2016"",
			""TopicOfTheDays"": [],
               ""LessonId"": ""Lesson01"",
           },
		{
               ""Id"": ""LessonCalendar02"",
               ""Order"": 2,
               ""SemesterGroupName"": ""A"",
               ""BeginDate"": ""1/6/2016"",
			""TopicOfTheDays"": [],
               ""LessonId"": ""Lesson01"",
           }
       ],
	""Holidays"": [ ""1/1/2016"", ""1/2/2016"", ""1/3/2016"", ""1/4/2016"", ""1/5/2016"" ],
	""ShiftDays"": []
   }", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 180
 testRunner.And("System send course schedule with JSON format is", @"{
	""IsComplete"": true,
	""BeginDate"": ""1/1/2016"",
	""EndDate"": ""1/10/2016"",
	""Lessons"": [
		{
			""Name"": ""Lesson 1"",
			""BeginDate"": ""1/1/2016""
		},
		{
			""Name"": ""Lesson 2"",
			""BeginDate"": ""1/6/2016""
		}
	],
	""Holidays"": [ ""1/1/2016"", ""1/2/2016"", ""1/3/2016"", ""1/4/2016"", ""1/5/2016"" ],
	""ShiftDays"": []
}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Set_Course_Schedule_By_Range")]
        [Xunit.TraitAttribute("Description", "Teacher set course schedule shift date only (Single day) Then system set course C" +
            "alendar and send new schedule back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherSetCourseScheduleShiftDateOnlySingleDayThenSystemSetCourseCalendarAndSendNewScheduleBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher set course schedule shift date only (Single day) Then system set course C" +
                    "alendar and send new schedule back", new string[] {
                        "mock"});
#line 202
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 203
 testRunner.Given("Today is \'1/1/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 204
 testRunner.When("User \'sakul@mindsage.com\' set schedule of ClassRoomId \'ClassRoom01\' FromDate \'1/1" +
                    "/2016\' ToDate \'\' IsHoliday \'false\' IsShift \'true\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 205
 testRunner.Then("System set course ClassCalendar collection with JSON format is", @"{
       ""id"": ""ClassCalendar01"",
	""BeginDate"": ""1/1/2016"",
	""ExpiredDate"": ""1/11/2016"",
       ""ClassRoomId"": ""ClassRoom01"",
	""CreatedDate"": ""1/1/2016"",
       ""LessonCalendars"":
       [
           {
               ""Id"": ""LessonCalendar01"",
               ""Order"": 1,
               ""SemesterGroupName"": ""A"",
               ""BeginDate"": ""1/2/2016"",
			""TopicOfTheDays"": [],
               ""LessonId"": ""Lesson01"",
           },
		{
               ""Id"": ""LessonCalendar02"",
               ""Order"": 2,
               ""SemesterGroupName"": ""A"",
               ""BeginDate"": ""1/7/2016"",
			""TopicOfTheDays"": [],
               ""LessonId"": ""Lesson01"",
           }
       ],
	""Holidays"": [],
	""ShiftDays"": [ ""1/1/2016"" ]
   }", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 236
 testRunner.And("System send course schedule with JSON format is", @"{
	""IsComplete"": true,
	""BeginDate"": ""1/1/2016"",
	""EndDate"": ""1/11/2016"",
	""Lessons"": [
		{
			""Name"": ""Lesson 1"",
			""BeginDate"": ""1/2/2016""
		},
		{
			""Name"": ""Lesson 2"",
			""BeginDate"": ""1/7/2016""
		}
	],
	""Holidays"": [],
	""ShiftDays"": [ ""1/1/2016"" ]
}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Set_Course_Schedule_By_Range")]
        [Xunit.TraitAttribute("Description", "Teacher set course schedule shift date only (Multiple days) Then system set cours" +
            "e Calendar and send new schedule back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherSetCourseScheduleShiftDateOnlyMultipleDaysThenSystemSetCourseCalendarAndSendNewScheduleBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher set course schedule shift date only (Multiple days) Then system set cours" +
                    "e Calendar and send new schedule back", new string[] {
                        "mock"});
#line 258
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 259
 testRunner.Given("Today is \'1/1/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 260
 testRunner.When("User \'sakul@mindsage.com\' set schedule of ClassRoomId \'ClassRoom01\' FromDate \'1/1" +
                    "/2016\' ToDate \'1/5/2016\' IsHoliday \'false\' IsShift \'true\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 261
 testRunner.Then("System set course ClassCalendar collection with JSON format is", @"{
       ""id"": ""ClassCalendar01"",
	""BeginDate"": ""1/1/2016"",
	""ExpiredDate"": ""1/15/2016"",
       ""ClassRoomId"": ""ClassRoom01"",
	""CreatedDate"": ""1/1/2016"",
       ""LessonCalendars"":
       [
           {
               ""Id"": ""LessonCalendar01"",
               ""Order"": 1,
               ""SemesterGroupName"": ""A"",
               ""BeginDate"": ""1/6/2016"",
			""TopicOfTheDays"": [],
               ""LessonId"": ""Lesson01"",
           },
		{
               ""Id"": ""LessonCalendar02"",
               ""Order"": 2,
               ""SemesterGroupName"": ""A"",
               ""BeginDate"": ""1/11/2016"",
			""TopicOfTheDays"": [],
               ""LessonId"": ""Lesson01"",
           }
       ],
	""Holidays"": [],
	""ShiftDays"": [ ""1/1/2016"", ""1/2/2016"", ""1/3/2016"", ""1/4/2016"", ""1/5/2016"" ]
   }", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 292
 testRunner.And("System send course schedule with JSON format is", @"{
	""IsComplete"": true,
	""BeginDate"": ""1/1/2016"",
	""EndDate"": ""1/15/2016"",
	""Lessons"": [
		{
			""Name"": ""Lesson 1"",
			""BeginDate"": ""1/6/2016""
		},
		{
			""Name"": ""Lesson 2"",
			""BeginDate"": ""1/11/2016""
		}
	],
	""Holidays"": [],
	""ShiftDays"": [ ""1/1/2016"", ""1/2/2016"", ""1/3/2016"", ""1/4/2016"", ""1/5/2016"" ]
}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Set_Course_Schedule_By_Range")]
        [Xunit.TraitAttribute("Description", "Teacher set course schedule holiday and shiftday (Single day) Then system set cou" +
            "rse Calendar and send new schedule back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherSetCourseScheduleHolidayAndShiftdaySingleDayThenSystemSetCourseCalendarAndSendNewScheduleBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher set course schedule holiday and shiftday (Single day) Then system set cou" +
                    "rse Calendar and send new schedule back", new string[] {
                        "mock"});
#line 314
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 315
 testRunner.Given("Today is \'1/1/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 316
 testRunner.When("User \'sakul@mindsage.com\' set schedule of ClassRoomId \'ClassRoom01\' FromDate \'1/1" +
                    "/2016\' ToDate \'\' IsHoliday \'true\' IsShift \'true\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 317
 testRunner.Then("System set course ClassCalendar collection with JSON format is", @"{
       ""id"": ""ClassCalendar01"",
	""BeginDate"": ""1/1/2016"",
	""ExpiredDate"": ""1/11/2016"",
       ""ClassRoomId"": ""ClassRoom01"",
	""CreatedDate"": ""1/1/2016"",
       ""LessonCalendars"":
       [
           {
               ""Id"": ""LessonCalendar01"",
               ""Order"": 1,
               ""SemesterGroupName"": ""A"",
               ""BeginDate"": ""1/2/2016"",
			""TopicOfTheDays"": [],
               ""LessonId"": ""Lesson01"",
           },
		{
               ""Id"": ""LessonCalendar02"",
               ""Order"": 2,
               ""SemesterGroupName"": ""A"",
               ""BeginDate"": ""1/7/2016"",
			""TopicOfTheDays"": [],
               ""LessonId"": ""Lesson01"",
           }
       ],
	""Holidays"": [ ""1/1/2016"" ],
	""ShiftDays"": [ ""1/1/2016"" ]
   }", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 348
 testRunner.And("System send course schedule with JSON format is", @"{
	""IsComplete"": true,
	""BeginDate"": ""1/1/2016"",
	""EndDate"": ""1/11/2016"",
	""Lessons"": [
		{
			""Name"": ""Lesson 1"",
			""BeginDate"": ""1/2/2016""
		},
		{
			""Name"": ""Lesson 2"",
			""BeginDate"": ""1/7/2016""
		}
	],
	""Holidays"": [ ""1/1/2016"" ],
	""ShiftDays"": [ ""1/1/2016"" ]
}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Set_Course_Schedule_By_Range")]
        [Xunit.TraitAttribute("Description", "Teacher set course schedule holiday and shiftday (Multiple days) Then system set " +
            "course Calendar and send new schedule back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherSetCourseScheduleHolidayAndShiftdayMultipleDaysThenSystemSetCourseCalendarAndSendNewScheduleBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher set course schedule holiday and shiftday (Multiple days) Then system set " +
                    "course Calendar and send new schedule back", new string[] {
                        "mock"});
#line 370
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 371
 testRunner.Given("Today is \'1/1/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 372
 testRunner.When("User \'sakul@mindsage.com\' set schedule of ClassRoomId \'ClassRoom01\' FromDate \'1/2" +
                    "/2016\' ToDate \'1/5/2016\' IsHoliday \'true\' IsShift \'true\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 373
 testRunner.Then("System set course ClassCalendar collection with JSON format is", @"{
       ""id"": ""ClassCalendar01"",
	""BeginDate"": ""1/1/2016"",
	""ExpiredDate"": ""1/14/2016"",
       ""ClassRoomId"": ""ClassRoom01"",
	""CreatedDate"": ""1/1/2016"",
       ""LessonCalendars"":
       [
           {
               ""Id"": ""LessonCalendar01"",
               ""Order"": 1,
               ""SemesterGroupName"": ""A"",
               ""BeginDate"": ""1/1/2016"",
			""TopicOfTheDays"": [],
               ""LessonId"": ""Lesson01"",
           },
		{
               ""Id"": ""LessonCalendar02"",
               ""Order"": 2,
               ""SemesterGroupName"": ""A"",
               ""BeginDate"": ""1/10/2016"",
			""TopicOfTheDays"": [],
               ""LessonId"": ""Lesson01"",
           }
       ],
	""Holidays"": [ ""1/2/2016"", ""1/3/2016"", ""1/4/2016"", ""1/5/2016"" ],
	""ShiftDays"": [ ""1/2/2016"", ""1/3/2016"", ""1/4/2016"", ""1/5/2016"" ]
   }", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 404
 testRunner.And("System send course schedule with JSON format is", @"{
	""IsComplete"": true,
	""BeginDate"": ""1/1/2016"",
	""EndDate"": ""1/14/2016"",
	""Lessons"": [
		{
			""Name"": ""Lesson 1"",
			""BeginDate"": ""1/1/2016""
		},
		{
			""Name"": ""Lesson 2"",
			""BeginDate"": ""1/10/2016""
		}
	],
	""Holidays"": [ ""1/2/2016"", ""1/3/2016"", ""1/4/2016"", ""1/5/2016"" ],
	""ShiftDays"": [ ""1/2/2016"", ""1/3/2016"", ""1/4/2016"", ""1/5/2016"" ]
}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Set_Course_Schedule_By_Range")]
        [Xunit.TraitAttribute("Description", "Teacher set course without any thing changed Then system set course Calendar and " +
            "send new schedule back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherSetCourseWithoutAnyThingChangedThenSystemSetCourseCalendarAndSendNewScheduleBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher set course without any thing changed Then system set course Calendar and " +
                    "send new schedule back", new string[] {
                        "mock"});
#line 426
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 427
 testRunner.Given("Today is \'1/1/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 428
 testRunner.When("User \'sakul@mindsage.com\' set schedule of ClassRoomId \'ClassRoom01\' FromDate \'1/1" +
                    "/2016\' ToDate \'\' IsHoliday \'false\' IsShift \'false\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 429
 testRunner.Then("System set course ClassCalendar collection with JSON format is", @"{
       ""id"": ""ClassCalendar01"",
	""BeginDate"": ""1/1/2016"",
	""ExpiredDate"": ""1/10/2016"",
       ""ClassRoomId"": ""ClassRoom01"",
	""CreatedDate"": ""1/1/2016"",
       ""LessonCalendars"":
       [
           {
               ""Id"": ""LessonCalendar01"",
               ""Order"": 1,
               ""SemesterGroupName"": ""A"",
               ""BeginDate"": ""1/1/2016"",
			""TopicOfTheDays"": [],
               ""LessonId"": ""Lesson01"",
           },
		{
               ""Id"": ""LessonCalendar02"",
               ""Order"": 2,
               ""SemesterGroupName"": ""A"",
               ""BeginDate"": ""1/6/2016"",
			""TopicOfTheDays"": [],
               ""LessonId"": ""Lesson01"",
           }
       ],
	""Holidays"": [],
	""ShiftDays"": []
   }", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 460
 testRunner.And("System send course schedule with JSON format is", @"{
	""IsComplete"": true,
	""BeginDate"": ""1/1/2016"",
	""EndDate"": ""1/10/2016"",
	""Lessons"": [
		{
			""Name"": ""Lesson 1"",
			""BeginDate"": ""1/1/2016""
		},
		{
			""Name"": ""Lesson 2"",
			""BeginDate"": ""1/6/2016""
		}
	],
	""Holidays"": [],
	""ShiftDays"": []
}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Set_Course_Schedule_By_Range")]
        [Xunit.TraitAttribute("Description", "Teacher set course schedule but using incorrect ClassRoom Then system doesn\'t set" +
            " course Calendar and doesn\'t send schedule back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherSetCourseScheduleButUsingIncorrectClassRoomThenSystemDoesnTSetCourseCalendarAndDoesnTSendScheduleBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher set course schedule but using incorrect ClassRoom Then system doesn\'t set" +
                    " course Calendar and doesn\'t send schedule back", new string[] {
                        "mock"});
#line 482
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 483
 testRunner.Given("Today is \'1/1/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 484
 testRunner.When("User \'sakul@mindsage.com\' set schedule of ClassRoomId \'IncorrectClassRoom\' FromDa" +
                    "te \'1/1/2016\' ToDate \'\' IsHoliday \'true\' IsShift \'false\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 485
 testRunner.Then("System doesn\'t set course ClassCalendar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 486
 testRunner.And("System send null back", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Set_Course_Schedule_By_Range")]
        [Xunit.TraitAttribute("Description", "Teacher set course schedule but using incorrect (empty) ClassRoom Then system doe" +
            "sn\'t set course Calendar and doesn\'t send schedule back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherSetCourseScheduleButUsingIncorrectEmptyClassRoomThenSystemDoesnTSetCourseCalendarAndDoesnTSendScheduleBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher set course schedule but using incorrect (empty) ClassRoom Then system doe" +
                    "sn\'t set course Calendar and doesn\'t send schedule back", new string[] {
                        "mock"});
#line 489
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 490
 testRunner.Given("Today is \'1/1/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 491
 testRunner.When("User \'sakul@mindsage.com\' set schedule of ClassRoomId \'\' FromDate \'1/1/2016\' ToDa" +
                    "te \'\' IsHoliday \'true\' IsShift \'false\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 492
 testRunner.Then("System doesn\'t set course ClassCalendar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 493
 testRunner.And("System send null back", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Set_Course_Schedule_By_Range")]
        [Xunit.TraitAttribute("Description", "Teacher set course schedule but using incorrect (null) ClassRoom Then system does" +
            "n\'t set course Calendar and doesn\'t send schedule back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherSetCourseScheduleButUsingIncorrectNullClassRoomThenSystemDoesnTSetCourseCalendarAndDoesnTSendScheduleBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher set course schedule but using incorrect (null) ClassRoom Then system does" +
                    "n\'t set course Calendar and doesn\'t send schedule back", new string[] {
                        "mock"});
#line 496
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 497
 testRunner.Given("Today is \'1/1/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 498
 testRunner.When("User \'sakul@mindsage.com\' set schedule of ClassRoomId \'NULL\' FromDate \'1/1/2016\' " +
                    "ToDate \'\' IsHoliday \'true\' IsShift \'false\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 499
 testRunner.Then("System doesn\'t set course ClassCalendar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 500
 testRunner.And("System send null back", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Set_Course_Schedule_By_Range")]
        [Xunit.TraitAttribute("Description", "Incorrect user (unknow) try to set course schedule Then system doesn\'t set course" +
            " Calendar and doesn\'t send schedule back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void IncorrectUserUnknowTryToSetCourseScheduleThenSystemDoesnTSetCourseCalendarAndDoesnTSendScheduleBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Incorrect user (unknow) try to set course schedule Then system doesn\'t set course" +
                    " Calendar and doesn\'t send schedule back", new string[] {
                        "mock"});
#line 503
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 504
 testRunner.Given("Today is \'1/1/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 505
 testRunner.When("User \'unknow@mindsage.com\' set schedule of ClassRoomId \'ClassRoom01\' FromDate \'1/" +
                    "1/2016\' ToDate \'\' IsHoliday \'true\' IsShift \'false\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 506
 testRunner.Then("System doesn\'t set course ClassCalendar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 507
 testRunner.And("System send null back", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Set_Course_Schedule_By_Range")]
        [Xunit.TraitAttribute("Description", "Incorrect user (empty) try to set course schedule Then system doesn\'t set course " +
            "Calendar and doesn\'t send schedule back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void IncorrectUserEmptyTryToSetCourseScheduleThenSystemDoesnTSetCourseCalendarAndDoesnTSendScheduleBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Incorrect user (empty) try to set course schedule Then system doesn\'t set course " +
                    "Calendar and doesn\'t send schedule back", new string[] {
                        "mock"});
#line 510
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 511
 testRunner.Given("Today is \'1/1/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 512
 testRunner.When("User \'\' set schedule of ClassRoomId \'ClassRoom01\' FromDate \'1/1/2016\' ToDate \'\' I" +
                    "sHoliday \'true\' IsShift \'false\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 513
 testRunner.Then("System doesn\'t set course ClassCalendar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 514
 testRunner.And("System send null back", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Set_Course_Schedule_By_Range")]
        [Xunit.TraitAttribute("Description", "Incorrect user (null) try to set course schedule Then system doesn\'t set course C" +
            "alendar and doesn\'t send schedule back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void IncorrectUserNullTryToSetCourseScheduleThenSystemDoesnTSetCourseCalendarAndDoesnTSendScheduleBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Incorrect user (null) try to set course schedule Then system doesn\'t set course C" +
                    "alendar and doesn\'t send schedule back", new string[] {
                        "mock"});
#line 517
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 518
 testRunner.Given("Today is \'1/1/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 519
 testRunner.When("User \'NULL\' set schedule of ClassRoomId \'ClassRoom01\' FromDate \'1/1/2016\' ToDate " +
                    "\'\' IsHoliday \'true\' IsShift \'false\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 520
 testRunner.Then("System doesn\'t set course ClassCalendar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 521
 testRunner.And("System send null back", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Set_Course_Schedule_By_Range")]
        [Xunit.TraitAttribute("Description", "Incorrect user (role = student) try to set course schedule Then system doesn\'t se" +
            "t course Calendar and doesn\'t send schedule back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void IncorrectUserRoleStudentTryToSetCourseScheduleThenSystemDoesnTSetCourseCalendarAndDoesnTSendScheduleBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Incorrect user (role = student) try to set course schedule Then system doesn\'t se" +
                    "t course Calendar and doesn\'t send schedule back", new string[] {
                        "mock"});
#line 524
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 525
 testRunner.Given("Today is \'1/1/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 526
 testRunner.When("User \'student@mindsage.com\' set schedule of ClassRoomId \'ClassRoom01\' FromDate \'1" +
                    "/1/2016\' ToDate \'\' IsHoliday \'true\' IsShift \'false\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 527
 testRunner.Then("System doesn\'t set course ClassCalendar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 528
 testRunner.And("System send null back", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Set_Course_Schedule_By_Range")]
        [Xunit.TraitAttribute("Description", "Incorrect user (role = selfpurchase) try to set course schedule Then system doesn" +
            "\'t set course Calendar and doesn\'t send schedule back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void IncorrectUserRoleSelfpurchaseTryToSetCourseScheduleThenSystemDoesnTSetCourseCalendarAndDoesnTSendScheduleBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Incorrect user (role = selfpurchase) try to set course schedule Then system doesn" +
                    "\'t set course Calendar and doesn\'t send schedule back", new string[] {
                        "mock"});
#line 531
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 532
 testRunner.Given("Today is \'1/1/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 533
 testRunner.When("User \'selfpurchase@mindsage.com\' set schedule of ClassRoomId \'ClassRoom01\' FromDa" +
                    "te \'1/1/2016\' ToDate \'\' IsHoliday \'true\' IsShift \'false\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 534
 testRunner.Then("System doesn\'t set course ClassCalendar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 535
 testRunner.And("System send null back", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Set_Course_Schedule_By_Range")]
        [Xunit.TraitAttribute("Description", "Teacher set course schedule but the ClassCalendar doesn\'t existing  Then system d" +
            "oesn\'t set course Calendar and doesn\'t send schedule back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherSetCourseScheduleButTheClassCalendarDoesnTExistingThenSystemDoesnTSetCourseCalendarAndDoesnTSendScheduleBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher set course schedule but the ClassCalendar doesn\'t existing  Then system d" +
                    "oesn\'t set course Calendar and doesn\'t send schedule back", new string[] {
                        "mock"});
#line 538
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 539
 testRunner.Given("Today is \'1/1/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 540
 testRunner.And("System have ClassCalendar collection with JSON format are", "[]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 544
 testRunner.When("User \'sakul@mindsage.com\' set schedule of ClassRoomId \'ClassRoom01\' FromDate \'1/1" +
                    "/2016\' ToDate \'\' IsHoliday \'true\' IsShift \'false\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 545
 testRunner.Then("System doesn\'t set course ClassCalendar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 546
 testRunner.And("System send null back", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Set_Course_Schedule_By_Range")]
        [Xunit.TraitAttribute("Description", "Teacher set course schedule holiday only (Single day with TOTD) Then system set c" +
            "ourse Calendar and send new schedule back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherSetCourseScheduleHolidayOnlySingleDayWithTOTDThenSystemSetCourseCalendarAndSendNewScheduleBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher set course schedule holiday only (Single day with TOTD) Then system set c" +
                    "ourse Calendar and send new schedule back", new string[] {
                        "mock"});
#line 549
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 550
 testRunner.Given("Today is \'1/1/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 551
 testRunner.And("System have ClassCalendar collection with JSON format are", @"[
    {
        ""id"": ""ClassCalendar01"",
        ""ClassRoomId"": ""ClassRoom01"",
""CreatedDate"": ""1/1/2016"",
""BeginDate"": ""1/1/2016"",
""ExpiredDate"": ""1/10/2016"",
        ""LessonCalendars"":
        [
{
	""Id"": ""LessonCalendar01"",
	""Order"": 1,
	""SemesterGroupName"": ""A"",
	""BeginDate"": ""1/1/2016"",
	""TopicOfTheDays"": [
		{
			""id"": ""TOTD01"",
			""Message"": ""Msg01"",
			""SendOnDay"": 1,
			""CreatedDate"": ""1/1/2016""
		}
	],
	""LessonId"": ""Lesson01"",
},
{
	""Id"": ""LessonCalendar02"",
	""Order"": 2,
	""SemesterGroupName"": ""A"",
	""BeginDate"": ""1/6/2016"",
	""TopicOfTheDays"": [
		{
			""id"": ""TOTD02"",
			""Message"": ""Msg02"",
			""SendOnDay"": 2,
			""CreatedDate"": ""1/1/2016"",
			""DeletedDate"": ""1/1/2016""
		},
		{
			""id"": ""TOTD03"",
			""Message"": ""Msg03"",
			""SendOnDay"": 2,
			""CreatedDate"": ""1/1/2016"",
			""DeletedDate"": ""1/1/2016""
		},
		{
			""id"": ""TOTD04"",
			""Message"": ""Msg04"",
			""SendOnDay"": 7,
			""CreatedDate"": ""1/1/2016""
		},
		{
			""id"": ""TOTD05"",
			""Message"": ""Msg05"",
			""SendOnDay"": 8,
			""RequiredSendTopicOfTheDayDate"": ""1/13/2016"",
			""SendTopicOfTheDayDate"": ""1/1/2016"",
			""CreatedDate"": ""1/1/2016""
		}
	],
	""LessonId"": ""Lesson01"",
}
],
""Holidays"": [],
""ShiftDays"": []
    }
]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 620
 testRunner.When("User \'sakul@mindsage.com\' set schedule of ClassRoomId \'ClassRoom01\' FromDate \'1/1" +
                    "/2016\' ToDate \'\' IsHoliday \'true\' IsShift \'false\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 621
 testRunner.Then("System set course ClassCalendar collection with JSON format is", "{\r\n       \"id\": \"ClassCalendar01\",\r\n\t\"BeginDate\": \"1/1/2016\",\r\n\t\"ExpiredDate\": \"1" +
                    "/10/2016\",\r\n       \"ClassRoomId\": \"ClassRoom01\",\r\n\t\"CreatedDate\": \"1/1/2016\",\r\n " +
                    "      \"LessonCalendars\":\r\n       [\r\n           {\r\n               \"Id\": \"LessonCa" +
                    "lendar01\",\r\n               \"Order\": 1,\r\n               \"SemesterGroupName\": \"A\"," +
                    "\r\n               \"BeginDate\": \"1/1/2016\",\r\n\t\t\t\"TopicOfTheDays\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"" +
                    "id\": \"TOTD01\",\r\n\t\t\t\t\t\"Message\": \"Msg01\",\r\n\t\t\t\t\t\"SendOnDay\": 1,\r\n\t\t\t\t\t\"RequiredSe" +
                    "ndTopicOfTheDayDate\": \"1/1/2016\",\r\n\t\t\t\t\t\"CreatedDate\": \"1/1/2016\"\r\n\t\t\t\t}\r\n\t\t\t],\r" +
                    "\n               \"LessonId\": \"Lesson01\",\r\n           },\r\n\t\t{\r\n               \"Id\"" +
                    ": \"LessonCalendar02\",\r\n               \"Order\": 2,\r\n               \"SemesterGroup" +
                    "Name\": \"A\",\r\n               \"BeginDate\": \"1/6/2016\",\r\n\t\t\t\"TopicOfTheDays\": [\r\n\t\t" +
                    "\t\t{\r\n\t\t\t\t\t\"id\": \"TOTD02\",\r\n\t\t\t\t\t\"Message\": \"Msg02\",\r\n\t\t\t\t\t\"SendOnDay\": 2,\r\n\t\t\t\t\t" +
                    "\"RequiredSendTopicOfTheDayDate\": \"1/7/2016\",\r\n\t\t\t\t\t\"CreatedDate\": \"1/1/2016\",\r\n\t" +
                    "\t\t\t\t\"DeletedDate\": \"1/1/2016\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"id\": \"TOTD03\",\r\n\t\t\t\t\t\"Messag" +
                    "e\": \"Msg03\",\r\n\t\t\t\t\t\"SendOnDay\": 2,\r\n\t\t\t\t\t\"RequiredSendTopicOfTheDayDate\": \"1/7/2" +
                    "016\",\r\n\t\t\t\t\t\"CreatedDate\": \"1/1/2016\",\r\n\t\t\t\t\t\"DeletedDate\": \"1/1/2016\"\r\n\t\t\t\t},\r\n" +
                    "\t\t\t\t{\r\n\t\t\t\t\t\"id\": \"TOTD04\",\r\n\t\t\t\t\t\"Message\": \"Msg04\",\r\n\t\t\t\t\t\"SendOnDay\": 7,\r\n\t\t\t" +
                    "\t\t\"RequiredSendTopicOfTheDayDate\": \"1/12/2016\",\r\n\t\t\t\t\t\"CreatedDate\": \"1/1/2016\"\r" +
                    "\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"id\": \"TOTD05\",\r\n\t\t\t\t\t\"Message\": \"Msg05\",\r\n\t\t\t\t\t\"SendOnDay\"" +
                    ": 8,\r\n\t\t\t\t\t\"RequiredSendTopicOfTheDayDate\": \"1/13/2016\",\r\n\t\t\t\t\t\"SendTopicOfTheDa" +
                    "yDate\": \"1/1/2016\",\r\n\t\t\t\t\t\"CreatedDate\": \"1/1/2016\"\r\n\t\t\t\t}\r\n\t\t\t],\r\n             " +
                    "  \"LessonId\": \"Lesson01\",\r\n           }\r\n       ],\r\n\t\"Holidays\": [ \"1/1/2016\" ]," +
                    "\r\n\t\"ShiftDays\": []\r\n   }", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 692
 testRunner.And("System send course schedule with JSON format is", @"{
	""IsComplete"": true,
	""BeginDate"": ""1/1/2016"",
	""EndDate"": ""1/10/2016"",
	""Lessons"": [
		{
			""Name"": ""Lesson 1"",
			""BeginDate"": ""1/1/2016""
		},
		{
			""Name"": ""Lesson 2"",
			""BeginDate"": ""1/6/2016""
		}
	],
	""Holidays"": [ ""1/1/2016"" ],
	""ShiftDays"": []
}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Set_Course_Schedule_By_Range")]
        [Xunit.TraitAttribute("Description", "Teacher set course schedule but the course doesn\'t set started date Then system d" +
            "oesn\'t set course Calendar and send the schedule back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherSetCourseScheduleButTheCourseDoesnTSetStartedDateThenSystemDoesnTSetCourseCalendarAndSendTheScheduleBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher set course schedule but the course doesn\'t set started date Then system d" +
                    "oesn\'t set course Calendar and send the schedule back", new string[] {
                        "mock"});
#line 714
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 715
 testRunner.Given("Today is \'1/1/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 716
 testRunner.And("System have ClassCalendar collection with JSON format are", @"[
    {
        ""id"": ""ClassCalendar01"",
        ""ClassRoomId"": ""ClassRoom01"",
""CreatedDate"": ""1/1/2016"",
        ""LessonCalendars"":
        [
            {
                ""Id"": ""LessonCalendar01"",
                ""Order"": 1,
                ""SemesterGroupName"": ""A"",
                ""BeginDate"": ""1/1/2016"",
	""TopicOfTheDays"": [],
                ""LessonId"": ""Lesson01"",
            },
{
                ""Id"": ""LessonCalendar02"",
                ""Order"": 2,
                ""SemesterGroupName"": ""A"",
                ""BeginDate"": ""1/6/2016"",
	""TopicOfTheDays"": [],
                ""LessonId"": ""Lesson01"",
            }
        ],
""Holidays"": [],
""ShiftDays"": []
    }
]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 747
 testRunner.When("User \'sakul@mindsage.com\' set schedule of ClassRoomId \'ClassRoom01\' FromDate \'1/1" +
                    "/2016\' ToDate \'\' IsHoliday \'false\' IsShift \'false\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 748
 testRunner.Then("System doesn\'t set course ClassCalendar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 749
 testRunner.And("System send course schedule with JSON format is", "{\r\n\t\"IsComplete\": false,\r\n\t\"Lessons\": [\r\n\t\t{\r\n\t\t\t\"Name\": \"Lesson 1\",\r\n\t\t\t\"BeginDa" +
                    "te\": \"1/1/2016\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"Name\": \"Lesson 2\",\r\n\t\t\t\"BeginDate\": \"1/6/2016\"\r\n" +
                    "\t\t}\r\n\t],\r\n\t\"Holidays\": [],\r\n\t\"ShiftDays\": []\r\n}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                Set_Course_Schedule_By_RangeFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                Set_Course_Schedule_By_RangeFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
