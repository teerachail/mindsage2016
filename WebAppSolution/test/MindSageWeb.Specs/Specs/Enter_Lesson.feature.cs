// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlow.GeneratedTests.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class Enter_LessonFeature : Xunit.IClassFixture<Enter_LessonFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Enter_Lesson.feature"
#line hidden
        
        public Enter_LessonFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Enter_Lesson", "\tIn order to avoid silly mistakes\r\n\tAs a math idiot\r\n\tI want to be told the sum o" +
                    "f two numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
 testRunner.Given("Initialize mocking data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.And("System have ClassRoom collection with JSON format are", @"[
    {
        ""id"": ""ClassRoom01"",
        ""Name"": ""Emotional literacy"",
""Grade"": ""7"",
        ""CourseCatalogId"": ""CourseCatalog01"",
        ""CreatedDate"": ""2/1/2016"",
""Message"": ""Don't forget to comment a lesson!"",
        ""Lessons"":
        [
            {
                ""id"": ""Lesson01"",
                ""TotalLikes"": 1,
                ""LessonCatalogId"": ""LessonCatalog01""
            },
{
                ""id"": ""Lesson02"",
                ""TotalLikes"": 2,
                ""LessonCatalogId"": ""LessonCatalog02""
            },
{
                ""id"": ""Lesson03"",
                ""TotalLikes"": 3,
                ""LessonCatalogId"": ""LessonCatalog03""
            },
        ]
    }
]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 39
 testRunner.And("System have ClassCalendar collection with JSON format are", @"[
    {
        ""id"": ""ClassCalendar01"",
        ""BeginDate"": ""2/1/2016"",
        ""ClassRoomId"": ""ClassRoom01"",
        ""LessonCalendars"":
        [
            {
                ""Id"": ""LessonCalendar01"",
                ""LessonId"": ""Lesson01"",
                ""Order"": 1,
                ""SemesterGroupName"": ""A"",
                ""BeginDate"": ""2/1/2016"",
            },
            {
                ""Id"": ""LessonCalendar02"",
                ""LessonId"": ""Lesson02"",
                ""Order"": 2,
                ""SemesterGroupName"": ""A"",
                ""BeginDate"": ""2/10/2016"",
            },
            {
                ""Id"": ""LessonCalendar03"",
                ""LessonId"": ""Lesson03"",
                ""Order"": 3,
                ""SemesterGroupName"": ""B"",
                ""BeginDate"": ""2/20/2016"",
            },
        ]
    },
]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 73
 testRunner.And("System have LessonCatalog collection with JSON format are", "[\r\n    {\r\n        \"id\": \"LessonCatalog01\",\r\n\"Order\": 1,\r\n\"SemesterName\": \"A\",\r\n\"U" +
                    "nitNo\": \"1\",\r\n\"CourseCatalogId\": \"CourseCatalog01\",\r\n        \"Title\": \"What Is E" +
                    "motional Literacy?\",\r\n\"ShortDescription\": \"short desc01\",\r\n\"MoreDescription\": \"m" +
                    "ore desc01\",\r\n        \"ShortTeacherLessonPlan\": \"short teacher lesson plan01\",\r\n" +
                    "        \"MoreTeacherLessonPlan\": \"more teacher lesson plan01\",\r\n\"PrimaryContentU" +
                    "rl\": \"PrimaryContent01\",\r\n\"PrimaryContentDescription\": \"primary content desc01\"," +
                    "\r\n\"CreatedDate\": \"1/1/2016\",\r\n\"ExtraContents\": \r\n[ \r\n{\r\n\t\"id\": \"Extra01\",\r\n\t\"Con" +
                    "tentURL\": \"www.extracontent01.com\",\r\n\t\"Description\": \"description01\",\r\n\t\"IconURL" +
                    "\": \"extra01.jpg\"\r\n},\r\n{\r\n\t\"id\": \"Extra02\",\r\n\t\"ContentURL\": \"www.extracontent02.c" +
                    "om\",\r\n\t\"Description\": \"description02\",\r\n\t\"IconURL\": \"extra02.jpg\"\r\n},\r\n{\r\n\t\"id\":" +
                    " \"Extra03\",\r\n\t\"ContentURL\": \"www.extracontent03.com\",\r\n\t\"Description\": \"descript" +
                    "ion03\",\r\n\t\"IconURL\": \"extra03.jpg\"\r\n}\r\n],\r\n\"Advertisments\":\r\n[\r\n{\r\n\t\"id\": \"ADS01" +
                    "\",\r\n\t\"ImageUrl\": \"img01.jpg\",\r\n\t\"CreatedDate\": \"1/1/2016\"\r\n}\r\n],\r\n\"TopicOfTheDay" +
                    "s\": [],\r\n    },\r\n{\r\n        \"id\": \"LessonCatalog02\",\r\n\"Order\": 2,\r\n\"SemesterName" +
                    "\": \"A\",\r\n\"UnitNo\": \"1\",\r\n\"CourseCatalogId\": \"CourseCatalog01\",\r\n        \"Title\":" +
                    " \"What Is Emotional Literacy?\",\r\n\"ShortDescription\": \"short desc02\",\r\n\"MoreDescr" +
                    "iption\": \"more desc02\",\r\n        \"ShortTeacherLessonPlan\": \"short teacher lesson" +
                    " plan02\",\r\n        \"MoreTeacherLessonPlan\": \"more teacher lesson plan02\",\r\n\"Prim" +
                    "aryContentUrl\": \"PrimaryContent02\",\r\n\"PrimaryContentDescription\": \"primary conte" +
                    "nt desc02\",\r\n\"CreatedDate\": \"1/1/2016\",\r\n\"ExtraContents\": \r\n[ \r\n{\r\n\t\"id\": \"Extra" +
                    "01\",\r\n\t\"ContentURL\": \"www.extracontent01.com\",\r\n\t\"Description\": \"description01\"," +
                    "\r\n\t\"IconURL\": \"extra01.jpg\"\r\n},\r\n{\r\n\t\"id\": \"Extra02\",\r\n\t\"ContentURL\": \"www.extra" +
                    "content02.com\",\r\n\t\"Description\": \"description03\",\r\n\t\"IconURL\": \"extra02.jpg\"\r\n}\r" +
                    "\n],\r\n\"Advertisments\":\r\n[\r\n{\r\n\t\"id\": \"ADS02\",\r\n\t\"ImageUrl\": \"img02.jpg\",\r\n\t\"Creat" +
                    "edDate\": \"1/1/2016\"\r\n}\r\n],\r\n\"TopicOfTheDays\": [],\r\n    },\r\n{\r\n        \"id\": \"Les" +
                    "sonCatalog03\",\r\n\"Order\": 3,\r\n\"SemesterName\": \"B\",\r\n\"UnitNo\": \"2\",\r\n\"CourseCatalo" +
                    "gId\": \"CourseCatalog01\",\r\n        \"Title\": \"What Is Emotional Literacy?\",\r\n\"Shor" +
                    "tDescription\": \"short desc03\",\r\n\"MoreDescription\": \"more desc03\",\r\n        \"Shor" +
                    "tTeacherLessonPlan\": \"short teacher lesson plan03\",\r\n        \"MoreTeacherLessonP" +
                    "lan\": \"more teacher lesson plan03\",\r\n\"PrimaryContentUrl\": \"PrimaryContent03\",\r\n\"" +
                    "PrimaryContentDescription\": \"primary content desc03\",\r\n\"CreatedDate\": \"1/1/2016\"" +
                    ",\r\n\"ExtraContents\": \r\n[ \r\n{\r\n\t\"id\": \"Extra01\",\r\n\t\"ContentURL\": \"www.extracontent" +
                    "01.com\",\r\n\t\"Description\": \"description01\",\r\n\t\"IconURL\": \"extra01.jpg\"\r\n}\r\n],\r\n\"A" +
                    "dvertisments\": [],\r\n\"TopicOfTheDays\": [],\r\n    },\r\n]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 188
 testRunner.And("System have UserProfile collection with JSON format are", @"[
{
""id"": ""teacher@mindsage.com"",
""Name"": ""teacher"",
""ImageProfileUrl"": ""teacher.jpg"",
""Subscriptions"":
[
{
	""id"": ""Subscription01"",
	""Role"": ""Teacher"",
	""ClassRoomId"": ""ClassRoom01"",
	""ClassCalendarId"": ""ClassCalendar01"",
},
]
},
{
""id"": ""student@mindsage.com"",
""Name"": ""student"",
""ImageProfileUrl"": ""student.jpg"",
""Subscriptions"":
[
{
	""id"": ""Subscription02"",
	""Role"": ""Student"",
	""ClassRoomId"": ""ClassRoom01"",
	""ClassCalendarId"": ""ClassCalendar01"",
},
]
}
]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 221
    testRunner.And("System have UserActivity collection with JSON format are", "   [\r\n\t{\r\n\t\t\"id\": \"UserActivity01\",\r\n\t\t\"UserProfileId\": \"teacher@mindsage.com\",\r\n" +
                    "\t\t\"ClassRoomId\": \"ClassRoom01\",\r\n\t\t\"CreatedDate\": \"1/1/2016\",\r\n\t\t\"UserProfileNam" +
                    "e\": \"teacher\",\r\n\t\t\"UserProfileImageUrl\": \"teacher.jpg\",\r\n\t\t\"LessonActivities\":\r\n" +
                    "\t\t[\r\n\t\t\t{\r\n\t\t\t\t\"id\": \"LessonActivity01\",\r\n\t\t\t\t\"LessonId\": \"Lesson01\",\r\n\t\t\t\t\"SawC" +
                    "ontentIds\": [],\r\n\t\t\t\t\"TotalContentsAmount\": 1,\r\n\t\t\t\t\"ParticipationAmount\": 0,\r\n\t" +
                    "\t\t\t\"CreatedCommentAmount\": 0,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"id\": \"LessonActivity02\",\r\n\t\t\t\t\"" +
                    "LessonId\": \"Lesson02\",\r\n\t\t\t\t\"SawContentIds\": [],\r\n\t\t\t\t\"TotalContentsAmount\": 1,\r" +
                    "\n\t\t\t\t\"ParticipationAmount\": 0,\r\n\t\t\t\t\"CreatedCommentAmount\": 0,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t" +
                    "\t\"id\": \"LessonActivity03\",\r\n\t\t\t\t\"LessonId\": \"Lesson03\",\r\n\t\t\t\t\"SawContentIds\": []" +
                    ",\r\n\t\t\t\t\"TotalContentsAmount\": 1,\r\n\t\t\t\t\"ParticipationAmount\": 0,\r\n\t\t\t\t\"CreatedCom" +
                    "mentAmount\": 0,\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\t\"id\": \"UserActivity02\",\r\n\t\t\"UserProfileId" +
                    "\": \"student@mindsage.com\",\r\n\t\t\"ClassRoomId\": \"ClassRoom01\",\r\n\t\t\"CreatedDate\": \"1" +
                    "/1/2016\",\r\n\t\t\"UserProfileName\": \"student\",\r\n\t\t\"UserProfileImageUrl\": \"student.jp" +
                    "g\",\r\n\t\t\"LessonActivities\":\r\n\t\t[\r\n\t\t\t{\r\n\t\t\t\t\"id\": \"LessonActivity04\",\r\n\t\t\t\t\"Lesso" +
                    "nId\": \"Lesson01\",\r\n\t\t\t\t\"SawContentIds\": [],\r\n\t\t\t\t\"TotalContentsAmount\": 1,\r\n\t\t\t\t" +
                    "\"ParticipationAmount\": 0,\r\n\t\t\t\t\"CreatedCommentAmount\": 0,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"id\"" +
                    ": \"LessonActivity05\",\r\n\t\t\t\t\"LessonId\": \"Lesson02\",\r\n\t\t\t\t\"SawContentIds\": [],\r\n\t\t" +
                    "\t\t\"TotalContentsAmount\": 1,\r\n\t\t\t\t\"ParticipationAmount\": 0,\r\n\t\t\t\t\"CreatedCommentA" +
                    "mount\": 0,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"id\": \"LessonActivity06\",\r\n\t\t\t\t\"LessonId\": \"Lesson0" +
                    "3\",\r\n\t\t\t\t\"SawContentIds\": [],\r\n\t\t\t\t\"TotalContentsAmount\": 1,\r\n\t\t\t\t\"Participation" +
                    "Amount\": 0,\r\n\t\t\t\t\"CreatedCommentAmount\": 0,\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n   ]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        public virtual void SetFixture(Enter_LessonFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Enter_Lesson")]
        [Xunit.TraitAttribute("Description", "Student enter the first lesson in the right time (first time) Then system send le" +
            "sson information back without teacher lesson plan")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void StudentEnterTheFirstLessonInTheRightTimeFirstTimeThenSystemSendLessonInformationBackWithoutTeacherLessonPlan()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Student enter the first lesson in the right time (first time) Then system send le" +
                    "sson information back without teacher lesson plan", new string[] {
                        "mock"});
#line 298
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 299
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 300
    testRunner.When("UserProfile \'student@mindsage.com\' enter LessonId \'Lesson01\' from ClassRoom \'Clas" +
                    "sRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 301
    testRunner.Then("System upsert UserProfile with JSON format is", @"{
""id"": ""student@mindsage.com"",
""Name"": ""student"",
""ImageProfileUrl"": ""student.jpg"",
""Subscriptions"":
[
{
""id"": ""Subscription02"",
""Role"": ""Student"",
""ClassRoomId"": ""ClassRoom01"",
""ClassCalendarId"": ""ClassCalendar01"",
""LastActiveDate"": ""2/8/2016 00:00 am""
}
]
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 319
 testRunner.And("System upsert user id \'student@mindsage.com\' UserActivity\'s LessonActivities coll" +
                    "ection with JSON format are", @"[
{
""id"": ""LessonActivity04"",
""LessonId"": ""Lesson01"",
""SawContentIds"": [ ""PrimaryContent01"" ],
""TotalContentsAmount"": 1,
""ParticipationAmount"": 0,
""CreatedCommentAmount"": 0,
},
{
""id"": ""LessonActivity05"",
""LessonId"": ""Lesson02"",
""SawContentIds"": [],
""TotalContentsAmount"": 1,
""ParticipationAmount"": 0,
""CreatedCommentAmount"": 0,
},
{
""id"": ""LessonActivity06"",
""LessonId"": ""Lesson03"",
""SawContentIds"": [],
""TotalContentsAmount"": 1,
""ParticipationAmount"": 0,
""CreatedCommentAmount"": 0,
}
]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 348
 testRunner.And("System send lesson information back with JSON format is", @"{
       ""id"": ""Lesson01"",
	""Order"": 1,
	""SemesterName"": ""A"",
	""UnitNo"": 1,
	""CourseCatalogId"": ""CourseCatalog01"",
       ""Title"": ""What Is Emotional Literacy?"",
	""ShortDescription"": ""short desc01"",
	""MoreDescription"": ""more desc01"",
	""ShortTeacherLessonPlan"": """",
       ""MoreTeacherLessonPlan"": """",
	""PrimaryContentUrl"": ""PrimaryContent01"",
	""PrimaryContentDescription"": ""primary content desc01"",
	""CreatedDate"": ""1/1/2016"",
	""CourseMessage"": ""Don't forget to comment a lesson!"",
	""TotalLikes"": 1,
	""ExtraContents"":
	[ 
		{
			""id"": ""Extra01"",
			""ContentURL"": ""www.extracontent01.com"",
			""Description"": ""description01"",
			""IconURL"": ""extra01.jpg""
		},
		{
			""id"": ""Extra02"",
			""ContentURL"": ""www.extracontent02.com"",
			""Description"": ""description02"",
			""IconURL"": ""extra02.jpg""
		},
		{
			""id"": ""Extra03"",
			""ContentURL"": ""www.extracontent03.com"",
			""Description"": ""description03"",
			""IconURL"": ""extra03.jpg""
		}
	],
	""Advertisments"":
	[
		{
			""id"": ""ADS01"",
			""ImageUrl"": ""img01.jpg"",
			""CreatedDate"": ""1/1/2016""
		}
	],
	""TopicOfTheDays"": [],
   }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Enter_Lesson")]
        [Xunit.TraitAttribute("Description", "Student enter the first lesson in the right time (second time) Then system send l" +
            "esson information back without teacher lesson plan")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void StudentEnterTheFirstLessonInTheRightTimeSecondTimeThenSystemSendLessonInformationBackWithoutTeacherLessonPlan()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Student enter the first lesson in the right time (second time) Then system send l" +
                    "esson information back without teacher lesson plan", new string[] {
                        "mock"});
#line 400
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 401
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 402
 testRunner.And("System have UserActivity collection with JSON format are", @"   [
	{
		""id"": ""UserActivity02"",
		""UserProfileId"": ""student@mindsage.com"",
		""ClassRoomId"": ""ClassRoom01"",
		""CreatedDate"": ""1/1/2016"",
		""UserProfileName"": ""student"",
		""UserProfileImageUrl"": ""student.jpg"",
		""LessonActivities"":
		[
			{
				""id"": ""LessonActivity04"",
				""LessonId"": ""Lesson01"",
				""SawContentIds"": [ ""PrimaryContent01"" ],
				""TotalContentsAmount"": 1,
				""ParticipationAmount"": 0,
				""CreatedCommentAmount"": 0,
			},
			{
				""id"": ""LessonActivity05"",
				""LessonId"": ""Lesson02"",
				""SawContentIds"": [],
				""TotalContentsAmount"": 1,
				""ParticipationAmount"": 0,
				""CreatedCommentAmount"": 0,
			},
			{
				""id"": ""LessonActivity06"",
				""LessonId"": ""Lesson03"",
				""SawContentIds"": [],
				""TotalContentsAmount"": 1,
				""ParticipationAmount"": 0,
				""CreatedCommentAmount"": 0,
			}
		]
	}
   ]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 442
    testRunner.When("UserProfile \'student@mindsage.com\' enter LessonId \'Lesson01\' from ClassRoom \'Clas" +
                    "sRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 443
    testRunner.Then("System upsert UserProfile with JSON format is", @"{
""id"": ""student@mindsage.com"",
""Name"": ""student"",
""ImageProfileUrl"": ""student.jpg"",
""Subscriptions"":
[
{
""id"": ""Subscription02"",
""Role"": ""Student"",
""ClassRoomId"": ""ClassRoom01"",
""ClassCalendarId"": ""ClassCalendar01"",
""LastActiveDate"": ""2/8/2016 00:00 am""
}
]
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 461
 testRunner.And("System doesn\'t update UserActivity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 462
 testRunner.And("System send lesson information back with JSON format is", @"{
       ""id"": ""Lesson01"",
	""Order"": 1,
	""SemesterName"": ""A"",
	""UnitNo"": 1,
	""CourseCatalogId"": ""CourseCatalog01"",
       ""Title"": ""What Is Emotional Literacy?"",
	""ShortDescription"": ""short desc01"",
	""MoreDescription"": ""more desc01"",
	""ShortTeacherLessonPlan"": """",
       ""MoreTeacherLessonPlan"": """",
	""PrimaryContentUrl"": ""PrimaryContent01"",
	""PrimaryContentDescription"": ""primary content desc01"",
	""CreatedDate"": ""1/1/2016"",
	""CourseMessage"": ""Don't forget to comment a lesson!"",
	""TotalLikes"": 1,
	""ExtraContents"":
	[ 
		{
			""id"": ""Extra01"",
			""ContentURL"": ""www.extracontent01.com"",
			""Description"": ""description01"",
			""IconURL"": ""extra01.jpg""
		},
		{
			""id"": ""Extra02"",
			""ContentURL"": ""www.extracontent02.com"",
			""Description"": ""description02"",
			""IconURL"": ""extra02.jpg""
		},
		{
			""id"": ""Extra03"",
			""ContentURL"": ""www.extracontent03.com"",
			""Description"": ""description03"",
			""IconURL"": ""extra03.jpg""
		}
	],
	""Advertisments"":
	[
		{
			""id"": ""ADS01"",
			""ImageUrl"": ""img01.jpg"",
			""CreatedDate"": ""1/1/2016""
		}
	],
	""TopicOfTheDays"": [],
   }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Enter_Lesson")]
        [Xunit.TraitAttribute("Description", "Student enter a lesson in the right time Then system send lesson information back" +
            " without teacher lesson plan")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void StudentEnterALessonInTheRightTimeThenSystemSendLessonInformationBackWithoutTeacherLessonPlan()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Student enter a lesson in the right time Then system send lesson information back" +
                    " without teacher lesson plan", new string[] {
                        "mock"});
#line 514
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 515
    testRunner.Given("Today is \'2/1/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 516
    testRunner.When("UserProfile \'student@mindsage.com\' enter LessonId \'Lesson01\' from ClassRoom \'Clas" +
                    "sRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 517
    testRunner.Then("System upsert UserProfile with JSON format is", @"{
""id"": ""student@mindsage.com"",
""Name"": ""student"",
""ImageProfileUrl"": ""student.jpg"",
""Subscriptions"":
[
{
""id"": ""Subscription02"",
""Role"": ""Student"",
""ClassRoomId"": ""ClassRoom01"",
""ClassCalendarId"": ""ClassCalendar01"",
""LastActiveDate"": ""2/1/2016 00:00 am""
}
]
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 535
 testRunner.And("System upsert user id \'student@mindsage.com\' UserActivity\'s LessonActivities coll" +
                    "ection with JSON format are", @"[
{
""id"": ""LessonActivity04"",
""LessonId"": ""Lesson01"",
""SawContentIds"": [ ""PrimaryContent01"" ],
""TotalContentsAmount"": 1,
""ParticipationAmount"": 0,
""CreatedCommentAmount"": 0,
},
{
""id"": ""LessonActivity05"",
""LessonId"": ""Lesson02"",
""SawContentIds"": [],
""TotalContentsAmount"": 1,
""ParticipationAmount"": 0,
""CreatedCommentAmount"": 0,
},
{
""id"": ""LessonActivity06"",
""LessonId"": ""Lesson03"",
""SawContentIds"": [],
""TotalContentsAmount"": 1,
""ParticipationAmount"": 0,
""CreatedCommentAmount"": 0,
}
]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 564
 testRunner.And("System send lesson information back with JSON format is", @"{
       ""id"": ""Lesson01"",
	""Order"": 1,
	""SemesterName"": ""A"",
	""UnitNo"": 1,
	""CourseCatalogId"": ""CourseCatalog01"",
       ""Title"": ""What Is Emotional Literacy?"",
	""ShortDescription"": ""short desc01"",
	""MoreDescription"": ""more desc01"",
	""ShortTeacherLessonPlan"": """",
       ""MoreTeacherLessonPlan"": """",
	""PrimaryContentUrl"": ""PrimaryContent01"",
	""PrimaryContentDescription"": ""primary content desc01"",
	""CreatedDate"": ""1/1/2016"",
	""CourseMessage"": ""Don't forget to comment a lesson!"",
	""TotalLikes"": 1,
	""ExtraContents"":
	[ 
		{
			""id"": ""Extra01"",
			""ContentURL"": ""www.extracontent01.com"",
			""Description"": ""description01"",
			""IconURL"": ""extra01.jpg""
		},
		{
			""id"": ""Extra02"",
			""ContentURL"": ""www.extracontent02.com"",
			""Description"": ""description02"",
			""IconURL"": ""extra02.jpg""
		},
		{
			""id"": ""Extra03"",
			""ContentURL"": ""www.extracontent03.com"",
			""Description"": ""description03"",
			""IconURL"": ""extra03.jpg""
		}
	],
	""Advertisments"":
	[
		{
			""id"": ""ADS01"",
			""ImageUrl"": ""img01.jpg"",
			""CreatedDate"": ""1/1/2016""
		}
	],
	""TopicOfTheDays"": [],
   }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Enter_Lesson")]
        [Xunit.TraitAttribute("Description", "Student enter the last lesson in the right time Then system send lesson informati" +
            "on back without teacher lesson plan")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void StudentEnterTheLastLessonInTheRightTimeThenSystemSendLessonInformationBackWithoutTeacherLessonPlan()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Student enter the last lesson in the right time Then system send lesson informati" +
                    "on back without teacher lesson plan", new string[] {
                        "mock"});
#line 616
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 617
    testRunner.Given("Today is \'2/20/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 618
    testRunner.When("UserProfile \'student@mindsage.com\' enter LessonId \'Lesson03\' from ClassRoom \'Clas" +
                    "sRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 619
    testRunner.Then("System upsert UserProfile with JSON format is", @"{
""id"": ""student@mindsage.com"",
""Name"": ""student"",
""ImageProfileUrl"": ""student.jpg"",
""Subscriptions"":
[
{
""id"": ""Subscription02"",
""Role"": ""Student"",
""ClassRoomId"": ""ClassRoom01"",
""ClassCalendarId"": ""ClassCalendar01"",
""LastActiveDate"": ""2/20/2016 00:00 am""
}
]
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 637
 testRunner.And("System upsert user id \'student@mindsage.com\' UserActivity\'s LessonActivities coll" +
                    "ection with JSON format are", @"[
{
""id"": ""LessonActivity04"",
""LessonId"": ""Lesson01"",
""SawContentIds"": [],
""TotalContentsAmount"": 1,
""ParticipationAmount"": 0,
""CreatedCommentAmount"": 0,
},
{
""id"": ""LessonActivity05"",
""LessonId"": ""Lesson02"",
""SawContentIds"": [],
""TotalContentsAmount"": 1,
""ParticipationAmount"": 0,
""CreatedCommentAmount"": 0,
},
{
""id"": ""LessonActivity06"",
""LessonId"": ""Lesson03"",
""SawContentIds"": [ ""PrimaryContent03"" ],
""TotalContentsAmount"": 1,
""ParticipationAmount"": 0,
""CreatedCommentAmount"": 0,
}
]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 666
 testRunner.And("System send lesson information back with JSON format is", @"{
       ""id"": ""Lesson03"",
	""Order"": 3,
	""SemesterName"": ""B"",
	""UnitNo"": 2,
	""CourseCatalogId"": ""CourseCatalog01"",
       ""Title"": ""What Is Emotional Literacy?"",
	""ShortDescription"": ""short desc03"",
	""MoreDescription"": ""more desc03"",
	""ShortTeacherLessonPlan"": """",
       ""MoreTeacherLessonPlan"": """",
	""PrimaryContentUrl"": ""PrimaryContent03"",
	""PrimaryContentDescription"": ""primary content desc03"",
	""CreatedDate"": ""1/1/2016"",
	""CourseMessage"": ""Don't forget to comment a lesson!"",
	""TotalLikes"": 3,
	""ExtraContents"":
	[ 
		{
			""id"": ""Extra01"",
			""ContentURL"": ""www.extracontent01.com"",
			""Description"": ""description01"",
			""IconURL"": ""extra01.jpg""
		}
	],
	""Advertisments"": [],
	""TopicOfTheDays"": [],
   }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Enter_Lesson")]
        [Xunit.TraitAttribute("Description", "Student enter a lesson in the future Then system doesn\'t send lesson information " +
            "back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void StudentEnterALessonInTheFutureThenSystemDoesnTSendLessonInformationBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Student enter a lesson in the future Then system doesn\'t send lesson information " +
                    "back", new string[] {
                        "mock"});
#line 699
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 700
    testRunner.Given("Today is \'1/1/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 701
    testRunner.When("UserProfile \'student@mindsage.com\' enter LessonId \'Lesson03\' from ClassRoom \'Clas" +
                    "sRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 702
    testRunner.Then("System doesn\'t upsert UserProfile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 703
 testRunner.And("System doesn\'t update UserActivity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 704
 testRunner.And("System doesn\'t send lesson information back", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Enter_Lesson")]
        [Xunit.TraitAttribute("Description", "Student enter a lesson in the future but the subscription was deleted Then system" +
            " doesn\'t send lesson information back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void StudentEnterALessonInTheFutureButTheSubscriptionWasDeletedThenSystemDoesnTSendLessonInformationBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Student enter a lesson in the future but the subscription was deleted Then system" +
                    " doesn\'t send lesson information back", new string[] {
                        "mock"});
#line 707
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 708
    testRunner.Given("Today is \'2/20/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 709
 testRunner.And("System have UserProfile collection with JSON format are", @"[
{
""id"": ""student@mindsage.com"",
""Name"": ""student"",
""ImageProfileUrl"": ""student.jpg"",
""Subscriptions"":
[
{
	""id"": ""Subscription02"",
	""Role"": ""Student"",
	""ClassRoomId"": ""ClassRoom01"",
	""ClassCalendarId"": ""ClassCalendar01"",
	""DeletedDate"": ""1/1/2016""
}
]
}
]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 729
    testRunner.When("UserProfile \'student@mindsage.com\' enter LessonId \'Lesson03\' from ClassRoom \'Clas" +
                    "sRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 730
    testRunner.Then("System doesn\'t upsert UserProfile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 731
 testRunner.And("System doesn\'t update UserActivity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 732
 testRunner.And("System doesn\'t send lesson information back", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Enter_Lesson")]
        [Xunit.TraitAttribute("Description", "Student enter a lesson in the future but the subscription doesn\'t existing Then s" +
            "ystem doesn\'t send lesson information back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void StudentEnterALessonInTheFutureButTheSubscriptionDoesnTExistingThenSystemDoesnTSendLessonInformationBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Student enter a lesson in the future but the subscription doesn\'t existing Then s" +
                    "ystem doesn\'t send lesson information back", new string[] {
                        "mock"});
#line 735
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 736
    testRunner.Given("Today is \'2/20/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 737
 testRunner.And("System have UserProfile collection with JSON format are", "[\r\n{\r\n\"id\": \"student@mindsage.com\",\r\n\"Name\": \"student\",\r\n\"ImageProfileUrl\": \"stud" +
                    "ent.jpg\",\r\n\"Subscriptions\": []\r\n}\r\n]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 748
    testRunner.When("UserProfile \'student@mindsage.com\' enter LessonId \'Lesson03\' from ClassRoom \'Clas" +
                    "sRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 749
    testRunner.Then("System doesn\'t upsert UserProfile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 750
 testRunner.And("System doesn\'t update UserActivity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 751
 testRunner.And("System doesn\'t send lesson information back", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Enter_Lesson")]
        [Xunit.TraitAttribute("Description", "Teacher enter the first lesson in the right time (first time) Then system send le" +
            "sson information back with teacher lesson plan")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherEnterTheFirstLessonInTheRightTimeFirstTimeThenSystemSendLessonInformationBackWithTeacherLessonPlan()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher enter the first lesson in the right time (first time) Then system send le" +
                    "sson information back with teacher lesson plan", new string[] {
                        "mock"});
#line 754
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 755
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 756
    testRunner.When("UserProfile \'teacher@mindsage.com\' enter LessonId \'Lesson01\' from ClassRoom \'Clas" +
                    "sRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 757
    testRunner.Then("System upsert UserProfile with JSON format is", @"{
""id"": ""teacher@mindsage.com"",
""Name"": ""teacher"",
""ImageProfileUrl"": ""teacher.jpg"",
""Subscriptions"":
[
{
""id"": ""Subscription01"",
""Role"": ""Teacher"",
""ClassRoomId"": ""ClassRoom01"",
""ClassCalendarId"": ""ClassCalendar01"",
""LastActiveDate"": ""2/8/2016 00:00 am""
}
]
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 775
 testRunner.And("System upsert user id \'teacher@mindsage.com\' UserActivity\'s LessonActivities coll" +
                    "ection with JSON format are", @"[
{
""id"": ""LessonActivity01"",
""LessonId"": ""Lesson01"",
""SawContentIds"": [ ""PrimaryContent01"" ],
""TotalContentsAmount"": 1,
""ParticipationAmount"": 0,
""CreatedCommentAmount"": 0,
},
{
""id"": ""LessonActivity02"",
""LessonId"": ""Lesson02"",
""SawContentIds"": [],
""TotalContentsAmount"": 1,
""ParticipationAmount"": 0,
""CreatedCommentAmount"": 0,
},
{
""id"": ""LessonActivity03"",
""LessonId"": ""Lesson03"",
""SawContentIds"": [],
""TotalContentsAmount"": 1,
""ParticipationAmount"": 0,
""CreatedCommentAmount"": 0,
}
]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 804
 testRunner.And("System send lesson information back with JSON format is", @"{
       ""id"": ""Lesson01"",
	""Order"": 1,
	""SemesterName"": ""A"",
	""UnitNo"": 1,
	""CourseCatalogId"": ""CourseCatalog01"",
       ""Title"": ""What Is Emotional Literacy?"",
	""ShortDescription"": ""short desc01"",
	""MoreDescription"": ""more desc01"",
	""ShortTeacherLessonPlan"": ""short teacher lesson plan01"",
       ""MoreTeacherLessonPlan"": ""more teacher lesson plan01"",
	""PrimaryContentUrl"": ""PrimaryContent01"",
	""PrimaryContentDescription"": ""primary content desc01"",
	""CreatedDate"": ""1/1/2016"",
	""CourseMessage"": ""Don't forget to comment a lesson!"",
	""TotalLikes"": 1,
	""IsTeacher"": true,
	""ExtraContents"":
	[ 
		{
			""id"": ""Extra01"",
			""ContentURL"": ""www.extracontent01.com"",
			""Description"": ""description01"",
			""IconURL"": ""extra01.jpg""
		},
		{
			""id"": ""Extra02"",
			""ContentURL"": ""www.extracontent02.com"",
			""Description"": ""description02"",
			""IconURL"": ""extra02.jpg""
		},
		{
			""id"": ""Extra03"",
			""ContentURL"": ""www.extracontent03.com"",
			""Description"": ""description03"",
			""IconURL"": ""extra03.jpg""
		}
	],
	""Advertisments"":
	[
		{
			""id"": ""ADS01"",
			""ImageUrl"": ""img01.jpg"",
			""CreatedDate"": ""1/1/2016""
		}
	],
	""TopicOfTheDays"": [],
   }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Enter_Lesson")]
        [Xunit.TraitAttribute("Description", "Teacher enter the first lesson in the right time (second time) Then system send l" +
            "esson information back with teacher lesson plan")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherEnterTheFirstLessonInTheRightTimeSecondTimeThenSystemSendLessonInformationBackWithTeacherLessonPlan()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher enter the first lesson in the right time (second time) Then system send l" +
                    "esson information back with teacher lesson plan", new string[] {
                        "mock"});
#line 857
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 858
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 859
 testRunner.And("System have UserActivity collection with JSON format are", @"   [
	{
		""id"": ""UserActivity01"",
		""UserProfileId"": ""teacher@mindsage.com"",
		""ClassRoomId"": ""ClassRoom01"",
		""CreatedDate"": ""1/1/2016"",
		""UserProfileName"": ""teacher"",
		""UserProfileImageUrl"": ""teacher.jpg"",
		""LessonActivities"":
		[
			{
				""id"": ""LessonActivity01"",
				""LessonId"": ""Lesson01"",
				""SawContentIds"": [ ""PrimaryContent01"" ],
				""TotalContentsAmount"": 1,
				""ParticipationAmount"": 0,
				""CreatedCommentAmount"": 0,
			},
			{
				""id"": ""LessonActivity02"",
				""LessonId"": ""Lesson02"",
				""SawContentIds"": [],
				""TotalContentsAmount"": 1,
				""ParticipationAmount"": 0,
				""CreatedCommentAmount"": 0,
			},
			{
				""id"": ""LessonActivity03"",
				""LessonId"": ""Lesson03"",
				""SawContentIds"": [],
				""TotalContentsAmount"": 1,
				""ParticipationAmount"": 0,
				""CreatedCommentAmount"": 0,
			}
		]
	}
   ]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 899
    testRunner.When("UserProfile \'teacher@mindsage.com\' enter LessonId \'Lesson01\' from ClassRoom \'Clas" +
                    "sRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 900
    testRunner.Then("System upsert UserProfile with JSON format is", @"{
""id"": ""teacher@mindsage.com"",
""Name"": ""teacher"",
""ImageProfileUrl"": ""teacher.jpg"",
""Subscriptions"":
[
{
""id"": ""Subscription01"",
""Role"": ""Teacher"",
""ClassRoomId"": ""ClassRoom01"",
""ClassCalendarId"": ""ClassCalendar01"",
""LastActiveDate"": ""2/8/2016 00:00 am""
}
]
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 918
 testRunner.And("System doesn\'t update UserActivity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 919
 testRunner.And("System send lesson information back with JSON format is", @"{
       ""id"": ""Lesson01"",
	""Order"": 1,
	""SemesterName"": ""A"",
	""UnitNo"": 1,
	""CourseCatalogId"": ""CourseCatalog01"",
       ""Title"": ""What Is Emotional Literacy?"",
	""ShortDescription"": ""short desc01"",
	""MoreDescription"": ""more desc01"",
	""ShortTeacherLessonPlan"": ""short teacher lesson plan01"",
       ""MoreTeacherLessonPlan"": ""more teacher lesson plan01"",
	""PrimaryContentUrl"": ""PrimaryContent01"",
	""PrimaryContentDescription"": ""primary content desc01"",
	""CreatedDate"": ""1/1/2016"",
	""CourseMessage"": ""Don't forget to comment a lesson!"",
	""TotalLikes"": 1,
	""IsTeacher"": true,
	""ExtraContents"":
	[ 
		{
			""id"": ""Extra01"",
			""ContentURL"": ""www.extracontent01.com"",
			""Description"": ""description01"",
			""IconURL"": ""extra01.jpg""
		},
		{
			""id"": ""Extra02"",
			""ContentURL"": ""www.extracontent02.com"",
			""Description"": ""description02"",
			""IconURL"": ""extra02.jpg""
		},
		{
			""id"": ""Extra03"",
			""ContentURL"": ""www.extracontent03.com"",
			""Description"": ""description03"",
			""IconURL"": ""extra03.jpg""
		}
	],
	""Advertisments"":
	[
		{
			""id"": ""ADS01"",
			""ImageUrl"": ""img01.jpg"",
			""CreatedDate"": ""1/1/2016""
		}
	],
	""TopicOfTheDays"": [],
   }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Enter_Lesson")]
        [Xunit.TraitAttribute("Description", "Teacher enter a lesson in the right time Then system send lesson information back" +
            " with teacher lesson plan")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherEnterALessonInTheRightTimeThenSystemSendLessonInformationBackWithTeacherLessonPlan()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher enter a lesson in the right time Then system send lesson information back" +
                    " with teacher lesson plan", new string[] {
                        "mock"});
#line 972
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 973
    testRunner.Given("Today is \'2/1/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 974
    testRunner.When("UserProfile \'teacher@mindsage.com\' enter LessonId \'Lesson01\' from ClassRoom \'Clas" +
                    "sRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 975
    testRunner.Then("System upsert UserProfile with JSON format is", @"{
""id"": ""teacher@mindsage.com"",
""Name"": ""teacher"",
""ImageProfileUrl"": ""teacher.jpg"",
""Subscriptions"":
[
{
""id"": ""Subscription01"",
""Role"": ""Teacher"",
""ClassRoomId"": ""ClassRoom01"",
""ClassCalendarId"": ""ClassCalendar01"",
""LastActiveDate"": ""2/1/2016 00:00 am""
}
]
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 993
 testRunner.And("System upsert user id \'teacher@mindsage.com\' UserActivity\'s LessonActivities coll" +
                    "ection with JSON format are", @"[
{
""id"": ""LessonActivity01"",
""LessonId"": ""Lesson01"",
""SawContentIds"": [ ""PrimaryContent01"" ],
""TotalContentsAmount"": 1,
""ParticipationAmount"": 0,
""CreatedCommentAmount"": 0,
},
{
""id"": ""LessonActivity02"",
""LessonId"": ""Lesson02"",
""SawContentIds"": [],
""TotalContentsAmount"": 1,
""ParticipationAmount"": 0,
""CreatedCommentAmount"": 0,
},
{
""id"": ""LessonActivity03"",
""LessonId"": ""Lesson03"",
""SawContentIds"": [],
""TotalContentsAmount"": 1,
""ParticipationAmount"": 0,
""CreatedCommentAmount"": 0,
}
]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1022
 testRunner.And("System send lesson information back with JSON format is", @"{
       ""id"": ""Lesson01"",
	""Order"": 1,
	""SemesterName"": ""A"",
	""UnitNo"": 1,
	""CourseCatalogId"": ""CourseCatalog01"",
       ""Title"": ""What Is Emotional Literacy?"",
	""ShortDescription"": ""short desc01"",
	""MoreDescription"": ""more desc01"",
	""ShortTeacherLessonPlan"": ""short teacher lesson plan01"",
       ""MoreTeacherLessonPlan"": ""more teacher lesson plan01"",
	""PrimaryContentUrl"": ""PrimaryContent01"",
	""PrimaryContentDescription"": ""primary content desc01"",
	""CreatedDate"": ""1/1/2016"",
	""CourseMessage"": ""Don't forget to comment a lesson!"",
	""TotalLikes"": 1,
	""IsTeacher"": true,
	""ExtraContents"":
	[ 
		{
			""id"": ""Extra01"",
			""ContentURL"": ""www.extracontent01.com"",
			""Description"": ""description01"",
			""IconURL"": ""extra01.jpg""
		},
		{
			""id"": ""Extra02"",
			""ContentURL"": ""www.extracontent02.com"",
			""Description"": ""description02"",
			""IconURL"": ""extra02.jpg""
		},
		{
			""id"": ""Extra03"",
			""ContentURL"": ""www.extracontent03.com"",
			""Description"": ""description03"",
			""IconURL"": ""extra03.jpg""
		}
	],
	""Advertisments"":
	[
		{
			""id"": ""ADS01"",
			""ImageUrl"": ""img01.jpg"",
			""CreatedDate"": ""1/1/2016""
		}
	],
	""TopicOfTheDays"": [],
   }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Enter_Lesson")]
        [Xunit.TraitAttribute("Description", "Teacher enter the last lesson in the right time Then system send lesson informati" +
            "on back with teacher lesson plan")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherEnterTheLastLessonInTheRightTimeThenSystemSendLessonInformationBackWithTeacherLessonPlan()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher enter the last lesson in the right time Then system send lesson informati" +
                    "on back with teacher lesson plan", new string[] {
                        "mock"});
#line 1075
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 1076
    testRunner.Given("Today is \'2/20/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1077
    testRunner.When("UserProfile \'teacher@mindsage.com\' enter LessonId \'Lesson03\' from ClassRoom \'Clas" +
                    "sRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1078
    testRunner.Then("System upsert UserProfile with JSON format is", @"{
""id"": ""teacher@mindsage.com"",
""Name"": ""teacher"",
""ImageProfileUrl"": ""teacher.jpg"",
""Subscriptions"":
[
{
""id"": ""Subscription01"",
""Role"": ""Teacher"",
""ClassRoomId"": ""ClassRoom01"",
""ClassCalendarId"": ""ClassCalendar01"",
""LastActiveDate"": ""2/20/2016 00:00 am""
}
]
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1096
 testRunner.And("System upsert user id \'teacher@mindsage.com\' UserActivity\'s LessonActivities coll" +
                    "ection with JSON format are", @"[
{
""id"": ""LessonActivity01"",
""LessonId"": ""Lesson01"",
""SawContentIds"": [],
""TotalContentsAmount"": 1,
""ParticipationAmount"": 0,
""CreatedCommentAmount"": 0,
},
{
""id"": ""LessonActivity02"",
""LessonId"": ""Lesson02"",
""SawContentIds"": [],
""TotalContentsAmount"": 1,
""ParticipationAmount"": 0,
""CreatedCommentAmount"": 0,
},
{
""id"": ""LessonActivity03"",
""LessonId"": ""Lesson03"",
""SawContentIds"": [ ""PrimaryContent03"" ],
""TotalContentsAmount"": 1,
""ParticipationAmount"": 0,
""CreatedCommentAmount"": 0,
}
]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1125
 testRunner.And("System send lesson information back with JSON format is", @"{
       ""id"": ""Lesson03"",
	""Order"": 3,
	""SemesterName"": ""B"",
	""UnitNo"": 2,
	""CourseCatalogId"": ""CourseCatalog01"",
       ""Title"": ""What Is Emotional Literacy?"",
	""ShortDescription"": ""short desc03"",
	""MoreDescription"": ""more desc03"",
	""ShortTeacherLessonPlan"": ""short teacher lesson plan03"",
       ""MoreTeacherLessonPlan"": ""more teacher lesson plan03"",
	""PrimaryContentUrl"": ""PrimaryContent03"",
	""PrimaryContentDescription"": ""primary content desc03"",
	""CreatedDate"": ""1/1/2016"",
	""CourseMessage"": ""Don't forget to comment a lesson!"",
	""TotalLikes"": 3,
	""IsTeacher"": true,
	""ExtraContents"":
	[ 
		{
			""id"": ""Extra01"",
			""ContentURL"": ""www.extracontent01.com"",
			""Description"": ""description01"",
			""IconURL"": ""extra01.jpg""
		}
	],
	""Advertisments"": [],
	""TopicOfTheDays"": [],
   }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Enter_Lesson")]
        [Xunit.TraitAttribute("Description", "Teacher enter a lesson in the future Then system send lesson information back wit" +
            "h teacher lesson plan")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherEnterALessonInTheFutureThenSystemSendLessonInformationBackWithTeacherLessonPlan()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher enter a lesson in the future Then system send lesson information back wit" +
                    "h teacher lesson plan", new string[] {
                        "mock"});
#line 1159
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 1160
    testRunner.Given("Today is \'1/1/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1161
    testRunner.When("UserProfile \'teacher@mindsage.com\' enter LessonId \'Lesson03\' from ClassRoom \'Clas" +
                    "sRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1162
    testRunner.Then("System upsert UserProfile with JSON format is", @"{
""id"": ""teacher@mindsage.com"",
""Name"": ""teacher"",
""ImageProfileUrl"": ""teacher.jpg"",
""Subscriptions"":
[
{
""id"": ""Subscription01"",
""Role"": ""Teacher"",
""ClassRoomId"": ""ClassRoom01"",
""ClassCalendarId"": ""ClassCalendar01"",
""LastActiveDate"": ""1/1/2016 00:00 am""
}
]
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1180
 testRunner.And("System upsert user id \'teacher@mindsage.com\' UserActivity\'s LessonActivities coll" +
                    "ection with JSON format are", @"[
{
""id"": ""LessonActivity01"",
""LessonId"": ""Lesson01"",
""SawContentIds"": [],
""TotalContentsAmount"": 1,
""ParticipationAmount"": 0,
""CreatedCommentAmount"": 0,
},
{
""id"": ""LessonActivity02"",
""LessonId"": ""Lesson02"",
""SawContentIds"": [],
""TotalContentsAmount"": 1,
""ParticipationAmount"": 0,
""CreatedCommentAmount"": 0,
},
{
""id"": ""LessonActivity03"",
""LessonId"": ""Lesson03"",
""SawContentIds"": [ ""PrimaryContent03"" ],
""TotalContentsAmount"": 1,
""ParticipationAmount"": 0,
""CreatedCommentAmount"": 0,
}
]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1209
 testRunner.And("System send lesson information back with JSON format is", @"{
       ""id"": ""Lesson03"",
	""Order"": 3,
	""SemesterName"": ""B"",
	""UnitNo"": 2,
	""CourseCatalogId"": ""CourseCatalog01"",
       ""Title"": ""What Is Emotional Literacy?"",
	""ShortDescription"": ""short desc03"",
	""MoreDescription"": ""more desc03"",
	""ShortTeacherLessonPlan"": ""short teacher lesson plan03"",
       ""MoreTeacherLessonPlan"": ""more teacher lesson plan03"",
	""PrimaryContentUrl"": ""PrimaryContent03"",
	""PrimaryContentDescription"": ""primary content desc03"",
	""CreatedDate"": ""1/1/2016"",
	""CourseMessage"": ""Don't forget to comment a lesson!"",
	""TotalLikes"": 3,
	""IsTeacher"": true,
	""ExtraContents"":
	[ 
		{
			""id"": ""Extra01"",
			""ContentURL"": ""www.extracontent01.com"",
			""Description"": ""description01"",
			""IconURL"": ""extra01.jpg""
		}
	],
	""Advertisments"": [],
	""TopicOfTheDays"": [],
   }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Enter_Lesson")]
        [Xunit.TraitAttribute("Description", "Teacher enter a lesson in the future but the subscription was deleted Then system" +
            " doesn\'t send lesson information back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherEnterALessonInTheFutureButTheSubscriptionWasDeletedThenSystemDoesnTSendLessonInformationBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher enter a lesson in the future but the subscription was deleted Then system" +
                    " doesn\'t send lesson information back", new string[] {
                        "mock"});
#line 1243
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 1244
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1245
 testRunner.And("System have UserProfile collection with JSON format are", @"[
{
""id"": ""teacher@mindsage.com"",
""Name"": ""teacher"",
""ImageProfileUrl"": ""teacher.jpg"",
""Subscriptions"":
[
{
	""id"": ""Subscription01"",
	""Role"": ""Teacher"",
	""ClassRoomId"": ""ClassRoom01"",
	""ClassCalendarId"": ""ClassCalendar01"",
	""DeletedDate"": ""1/1/2016""
},
]
}
]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1265
    testRunner.When("UserProfile \'teacher@mindsage.com\' enter LessonId \'Lesson01\' from ClassRoom \'Clas" +
                    "sRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1266
    testRunner.Then("System doesn\'t upsert UserProfile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1267
 testRunner.And("System doesn\'t update UserActivity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1268
 testRunner.And("System doesn\'t send lesson information back", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Enter_Lesson")]
        [Xunit.TraitAttribute("Description", "Teacher enter a lesson in the future but the subscription doesn\'t existing Then s" +
            "ystem doesn\'t send lesson information back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherEnterALessonInTheFutureButTheSubscriptionDoesnTExistingThenSystemDoesnTSendLessonInformationBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher enter a lesson in the future but the subscription doesn\'t existing Then s" +
                    "ystem doesn\'t send lesson information back", new string[] {
                        "mock"});
#line 1271
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 1272
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1273
 testRunner.And("System have UserProfile collection with JSON format are", "[\r\n{\r\n\"id\": \"teacher@mindsage.com\",\r\n\"Name\": \"teacher\",\r\n\"ImageProfileUrl\": \"teac" +
                    "her.jpg\",\r\n\"Subscriptions\": []\r\n}\r\n]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1284
    testRunner.When("UserProfile \'teacher@mindsage.com\' enter LessonId \'Lesson01\' from ClassRoom \'Clas" +
                    "sRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1285
    testRunner.Then("System doesn\'t upsert UserProfile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1286
 testRunner.And("System doesn\'t update UserActivity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1287
 testRunner.And("System doesn\'t send lesson information back", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Enter_Lesson")]
        [Xunit.TraitAttribute("Description", "Incorrect user (Unknow) enter a lesson Then system doesn\'t send lesson informatio" +
            "n back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void IncorrectUserUnknowEnterALessonThenSystemDoesnTSendLessonInformationBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Incorrect user (Unknow) enter a lesson Then system doesn\'t send lesson informatio" +
                    "n back", new string[] {
                        "mock"});
#line 1290
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 1291
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1292
    testRunner.When("UserProfile \'unknow@mindsage.com\' enter LessonId \'Lesson01\' from ClassRoom \'Class" +
                    "Room01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1293
    testRunner.Then("System doesn\'t upsert UserProfile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1294
 testRunner.And("System doesn\'t update UserActivity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1295
 testRunner.And("System doesn\'t send lesson information back", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Enter_Lesson")]
        [Xunit.TraitAttribute("Description", "Incorrect user (empty) enter a lesson Then system doesn\'t send lesson information" +
            " back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void IncorrectUserEmptyEnterALessonThenSystemDoesnTSendLessonInformationBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Incorrect user (empty) enter a lesson Then system doesn\'t send lesson information" +
                    " back", new string[] {
                        "mock"});
#line 1298
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 1299
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1300
    testRunner.When("UserProfile \'\' enter LessonId \'Lesson01\' from ClassRoom \'ClassRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1301
    testRunner.Then("System doesn\'t upsert UserProfile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1302
 testRunner.And("System doesn\'t update UserActivity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1303
 testRunner.And("System doesn\'t send lesson information back", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Enter_Lesson")]
        [Xunit.TraitAttribute("Description", "Incorrect user (null) enter a lesson Then system doesn\'t send lesson information " +
            "back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void IncorrectUserNullEnterALessonThenSystemDoesnTSendLessonInformationBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Incorrect user (null) enter a lesson Then system doesn\'t send lesson information " +
                    "back", new string[] {
                        "mock"});
#line 1306
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 1307
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1308
    testRunner.When("UserProfile \'NULL\' enter LessonId \'Lesson01\' from ClassRoom \'ClassRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1309
    testRunner.Then("System doesn\'t upsert UserProfile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1310
 testRunner.And("System doesn\'t update UserActivity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1311
 testRunner.And("System doesn\'t send lesson information back", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Enter_Lesson")]
        [Xunit.TraitAttribute("Description", "Selfpurchase user enter a lesson Then system send lesson information back without" +
            " teacher lesson plan")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void SelfpurchaseUserEnterALessonThenSystemSendLessonInformationBackWithoutTeacherLessonPlan()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Selfpurchase user enter a lesson Then system send lesson information back without" +
                    " teacher lesson plan", new string[] {
                        "mock"});
#line 1314
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 1315
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1316
 testRunner.And("System have UserProfile collection with JSON format are", @"[
{
""id"": ""selfpurchase@mindsage.com"",
""Name"": ""selfpurchase"",
""ImageProfileUrl"": ""selfpurchase.jpg"",
""Subscriptions"":
[
{
	""id"": ""Subscription01"",
	""Role"": ""SelfPurchaser"",
	""ClassRoomId"": ""ClassRoom01"",
	""ClassCalendarId"": ""ClassCalendar01"",
}
]
}
]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1335
    testRunner.And("System have UserActivity collection with JSON format are", @"   [
	{
		""id"": ""UserActivity01"",
		""UserProfileId"": ""selfpurchase@mindsage.com"",
		""ClassRoomId"": ""ClassRoom01"",
		""CreatedDate"": ""1/1/2016"",
		""UserProfileName"": ""selfpurchase"",
		""UserProfileImageUrl"": ""selfpurchase.jpg"",
		""LessonActivities"":
		[
			{
				""id"": ""LessonActivity01"",
				""LessonId"": ""Lesson01"",
				""SawContentIds"": [],
				""TotalContentsAmount"": 1,
				""ParticipationAmount"": 0,
				""CreatedCommentAmount"": 0,
			},
			{
				""id"": ""LessonActivity02"",
				""LessonId"": ""Lesson02"",
				""SawContentIds"": [],
				""TotalContentsAmount"": 1,
				""ParticipationAmount"": 0,
				""CreatedCommentAmount"": 0,
			},
			{
				""id"": ""LessonActivity03"",
				""LessonId"": ""Lesson03"",
				""SawContentIds"": [],
				""TotalContentsAmount"": 1,
				""ParticipationAmount"": 0,
				""CreatedCommentAmount"": 0,
			}
		]
	}
   ]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1375
    testRunner.When("UserProfile \'selfpurchase@mindsage.com\' enter LessonId \'Lesson01\' from ClassRoom " +
                    "\'ClassRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1376
 testRunner.Then("System upsert UserProfile with JSON format is", @"{
""id"": ""selfpurchase@mindsage.com"",
""Name"": ""selfpurchase"",
""ImageProfileUrl"": ""selfpurchase.jpg"",
""Subscriptions"":
[
{
""id"": ""Subscription01"",
""Role"": ""SelfPurchaser"",
""ClassRoomId"": ""ClassRoom01"",
""ClassCalendarId"": ""ClassCalendar01"",
""LastActiveDate"": ""2/8/2016 00:00 am""
}
]
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 1394
    testRunner.And("System upsert user id \'selfpurchase@mindsage.com\' UserActivity\'s LessonActivities" +
                    " collection with JSON format are", @"[
{
""id"": ""LessonActivity01"",
""LessonId"": ""Lesson01"",
""SawContentIds"": [ ""PrimaryContent01"" ],
""TotalContentsAmount"": 1,
""ParticipationAmount"": 0,
""CreatedCommentAmount"": 0,
},
{
""id"": ""LessonActivity02"",
""LessonId"": ""Lesson02"",
""SawContentIds"": [],
""TotalContentsAmount"": 1,
""ParticipationAmount"": 0,
""CreatedCommentAmount"": 0,
},
{
""id"": ""LessonActivity03"",
""LessonId"": ""Lesson03"",
""SawContentIds"": [],
""TotalContentsAmount"": 1,
""ParticipationAmount"": 0,
""CreatedCommentAmount"": 0,
}
]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1423
 testRunner.And("System send lesson information back with JSON format is", @"{
       ""id"": ""Lesson01"",
	""Order"": 1,
	""SemesterName"": ""A"",
	""UnitNo"": 1,
	""CourseCatalogId"": ""CourseCatalog01"",
       ""Title"": ""What Is Emotional Literacy?"",
	""ShortDescription"": ""short desc01"",
	""MoreDescription"": ""more desc01"",
	""ShortTeacherLessonPlan"": """",
       ""MoreTeacherLessonPlan"": """",
	""PrimaryContentUrl"": ""PrimaryContent01"",
	""PrimaryContentDescription"": ""primary content desc01"",
	""CreatedDate"": ""1/1/2016"",
	""CourseMessage"": ""Don't forget to comment a lesson!"",
	""TotalLikes"": 1,
	""ExtraContents"":
	[ 
		{
			""id"": ""Extra01"",
			""ContentURL"": ""www.extracontent01.com"",
			""Description"": ""description01"",
			""IconURL"": ""extra01.jpg""
		},
		{
			""id"": ""Extra02"",
			""ContentURL"": ""www.extracontent02.com"",
			""Description"": ""description02"",
			""IconURL"": ""extra02.jpg""
		},
		{
			""id"": ""Extra03"",
			""ContentURL"": ""www.extracontent03.com"",
			""Description"": ""description03"",
			""IconURL"": ""extra03.jpg""
		}
	],
	""Advertisments"":
	[
		{
			""id"": ""ADS01"",
			""ImageUrl"": ""img01.jpg"",
			""CreatedDate"": ""1/1/2016""
		}
	],
	""TopicOfTheDays"": [],
   }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Enter_Lesson")]
        [Xunit.TraitAttribute("Description", "Selfpurchase user enter a lesson in the future Then system doesn\'t send lesson in" +
            "formation back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void SelfpurchaseUserEnterALessonInTheFutureThenSystemDoesnTSendLessonInformationBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Selfpurchase user enter a lesson in the future Then system doesn\'t send lesson in" +
                    "formation back", new string[] {
                        "mock"});
#line 1475
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 1476
    testRunner.Given("Today is \'1/1/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1477
 testRunner.And("System have UserProfile collection with JSON format are", @"[
{
""id"": ""selfpurchase@mindsage.com"",
""Name"": ""selfpurchase"",
""ImageProfileUrl"": ""selfpurchase.jpg"",
""Subscriptions"":
[
{
	""id"": ""Subscription01"",
	""Role"": ""SelfPurchaser"",
	""ClassRoomId"": ""ClassRoom01"",
	""ClassCalendarId"": ""ClassCalendar01"",
}
]
}
]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 1496
    testRunner.And("System have UserActivity collection with JSON format are", @"   [
	{
		""id"": ""UserActivity01"",
		""UserProfileId"": ""selfpurchase@mindsage.com"",
		""ClassRoomId"": ""ClassRoom01"",
		""CreatedDate"": ""1/1/2016"",
		""UserProfileName"": ""selfpurchase"",
		""UserProfileImageUrl"": ""selfpurchase.jpg"",
		""LessonActivities"":
		[
			{
				""id"": ""LessonActivity01"",
				""LessonId"": ""Lesson01"",
				""SawContentIds"": [],
				""TotalContentsAmount"": 1,
				""ParticipationAmount"": 0,
				""CreatedCommentAmount"": 0,
			},
			{
				""id"": ""LessonActivity02"",
				""LessonId"": ""Lesson02"",
				""SawContentIds"": [],
				""TotalContentsAmount"": 1,
				""ParticipationAmount"": 0,
				""CreatedCommentAmount"": 0,
			},
			{
				""id"": ""LessonActivity03"",
				""LessonId"": ""Lesson03"",
				""SawContentIds"": [],
				""TotalContentsAmount"": 1,
				""ParticipationAmount"": 0,
				""CreatedCommentAmount"": 0,
			}
		]
	}
   ]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1536
    testRunner.When("UserProfile \'selfpurchase@mindsage.com\' enter LessonId \'Lesson01\' from ClassRoom " +
                    "\'ClassRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1537
 testRunner.Then("System doesn\'t upsert UserProfile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1538
 testRunner.And("System doesn\'t update UserActivity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1539
 testRunner.And("System doesn\'t send lesson information back", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Enter_Lesson")]
        [Xunit.TraitAttribute("Description", "Teacher enter a lesson but the ClassRoom was deleted Then system doesn\'t send les" +
            "son information back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherEnterALessonButTheClassRoomWasDeletedThenSystemDoesnTSendLessonInformationBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher enter a lesson but the ClassRoom was deleted Then system doesn\'t send les" +
                    "son information back", new string[] {
                        "mock"});
#line 1542
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 1543
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1544
 testRunner.And("System have ClassRoom collection with JSON format are", @"[
    {
        ""id"": ""ClassRoom01"",
        ""Name"": ""Emotional literacy"",
""Grade"": ""7"",
        ""CourseCatalogId"": ""CourseCatalog01"",
        ""CreatedDate"": ""2/1/2016"",
""Message"": ""Don't forget to comment a lesson!"",
""DeletedDate"": ""1/1/2016"",
        ""Lessons"":
        [
            {
                ""id"": ""Lesson01"",
                ""TotalLikes"": 1,
                ""LessonCatalogId"": ""LessonCatalog01""
            },
{
                ""id"": ""Lesson02"",
                ""TotalLikes"": 2,
                ""LessonCatalogId"": ""LessonCatalog02""
            },
{
                ""id"": ""Lesson03"",
                ""TotalLikes"": 3,
                ""LessonCatalogId"": ""LessonCatalog03""
            },
        ]
    }
]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1576
    testRunner.When("UserProfile \'teacher@mindsage.com\' enter LessonId \'Lesson01\' from ClassRoom \'Clas" +
                    "sRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1577
    testRunner.Then("System doesn\'t upsert UserProfile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1578
 testRunner.And("System doesn\'t update UserActivity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1579
 testRunner.And("System doesn\'t send lesson information back", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Enter_Lesson")]
        [Xunit.TraitAttribute("Description", "Teacher enter a lesson but the ClassRoom doesn\'t existing Then system doesn\'t sen" +
            "d lesson information back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherEnterALessonButTheClassRoomDoesnTExistingThenSystemDoesnTSendLessonInformationBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher enter a lesson but the ClassRoom doesn\'t existing Then system doesn\'t sen" +
                    "d lesson information back", new string[] {
                        "mock"});
#line 1582
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 1583
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1584
 testRunner.And("System have ClassRoom collection with JSON format are", "[]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1588
    testRunner.When("UserProfile \'teacher@mindsage.com\' enter LessonId \'Lesson01\' from ClassRoom \'Clas" +
                    "sRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1589
    testRunner.Then("System doesn\'t upsert UserProfile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1590
 testRunner.And("System doesn\'t update UserActivity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1591
 testRunner.And("System doesn\'t send lesson information back", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Enter_Lesson")]
        [Xunit.TraitAttribute("Description", "Teacher enter a lesson but the ClassCalendar was deleted Then system doesn\'t send" +
            " lesson information back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherEnterALessonButTheClassCalendarWasDeletedThenSystemDoesnTSendLessonInformationBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher enter a lesson but the ClassCalendar was deleted Then system doesn\'t send" +
                    " lesson information back", new string[] {
                        "mock"});
#line 1594
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 1595
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1596
 testRunner.And("System have ClassCalendar collection with JSON format are", @"[
    {
        ""id"": ""ClassCalendar01"",
        ""BeginDate"": ""2/1/2016"",
        ""ClassRoomId"": ""ClassRoom01"",
""DeletedDate"": ""1/1/2016"",
        ""LessonCalendars"":
        [
            {
                ""Id"": ""LessonCalendar01"",
                ""LessonId"": ""Lesson01"",
                ""Order"": 1,
                ""SemesterGroupName"": ""A"",
                ""BeginDate"": ""2/1/2016"",
            },
            {
                ""Id"": ""LessonCalendar02"",
                ""LessonId"": ""Lesson02"",
                ""Order"": 2,
                ""SemesterGroupName"": ""A"",
                ""BeginDate"": ""2/10/2016"",
            },
            {
                ""Id"": ""LessonCalendar03"",
                ""LessonId"": ""Lesson03"",
                ""Order"": 3,
                ""SemesterGroupName"": ""B"",
                ""BeginDate"": ""2/20/2016"",
            },
        ]
    },
]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1631
    testRunner.When("UserProfile \'teacher@mindsage.com\' enter LessonId \'Lesson01\' from ClassRoom \'Clas" +
                    "sRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1632
    testRunner.Then("System doesn\'t upsert UserProfile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1633
 testRunner.And("System doesn\'t update UserActivity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1634
 testRunner.And("System doesn\'t send lesson information back", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Enter_Lesson")]
        [Xunit.TraitAttribute("Description", "Teacher enter a lesson but the ClassCalendar doesn\'t existing Then system doesn\'t" +
            " send lesson information back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherEnterALessonButTheClassCalendarDoesnTExistingThenSystemDoesnTSendLessonInformationBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher enter a lesson but the ClassCalendar doesn\'t existing Then system doesn\'t" +
                    " send lesson information back", new string[] {
                        "mock"});
#line 1637
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 1638
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1639
 testRunner.And("System have ClassCalendar collection with JSON format are", "[]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1643
    testRunner.When("UserProfile \'teacher@mindsage.com\' enter LessonId \'Lesson01\' from ClassRoom \'Clas" +
                    "sRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1644
    testRunner.Then("System doesn\'t upsert UserProfile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1645
 testRunner.And("System doesn\'t update UserActivity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1646
 testRunner.And("System doesn\'t send lesson information back", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Enter_Lesson")]
        [Xunit.TraitAttribute("Description", "Teacher enter a lesson but the UserActivity was deleted Then system doesn\'t send " +
            "lesson information back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherEnterALessonButTheUserActivityWasDeletedThenSystemDoesnTSendLessonInformationBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher enter a lesson but the UserActivity was deleted Then system doesn\'t send " +
                    "lesson information back", new string[] {
                        "mock"});
#line 1649
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 1650
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1651
 testRunner.And("System have UserActivity collection with JSON format are", @"   [
	{
		""id"": ""UserActivity01"",
		""UserProfileId"": ""teacher@mindsage.com"",
		""ClassRoomId"": ""ClassRoom01"",
		""CreatedDate"": ""1/1/2016"",
		""UserProfileName"": ""teacher"",
		""UserProfileImageUrl"": ""teacher.jpg"",
		""DeletedDate"": ""1/1/2016"",
		""LessonActivities"":
		[
			{
				""id"": ""LessonActivity01"",
				""LessonId"": ""Lesson01"",
				""SawContentIds"": [],
				""TotalContentsAmount"": 1,
				""ParticipationAmount"": 0,
				""CreatedCommentAmount"": 0,
			},
			{
				""id"": ""LessonActivity02"",
				""LessonId"": ""Lesson02"",
				""SawContentIds"": [],
				""TotalContentsAmount"": 1,
				""ParticipationAmount"": 0,
				""CreatedCommentAmount"": 0,
			},
			{
				""id"": ""LessonActivity03"",
				""LessonId"": ""Lesson03"",
				""SawContentIds"": [],
				""TotalContentsAmount"": 1,
				""ParticipationAmount"": 0,
				""CreatedCommentAmount"": 0,
			}
		]
	}
   ]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1692
    testRunner.When("UserProfile \'teacher@mindsage.com\' enter LessonId \'Lesson01\' from ClassRoom \'Clas" +
                    "sRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1693
    testRunner.Then("System doesn\'t upsert UserProfile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1694
 testRunner.And("System doesn\'t update UserActivity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1695
 testRunner.And("System doesn\'t send lesson information back", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Enter_Lesson")]
        [Xunit.TraitAttribute("Description", "Teacher enter a lesson but the UserActivity doesn\'t existing Then system doesn\'t " +
            "send lesson information back")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherEnterALessonButTheUserActivityDoesnTExistingThenSystemDoesnTSendLessonInformationBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher enter a lesson but the UserActivity doesn\'t existing Then system doesn\'t " +
                    "send lesson information back", new string[] {
                        "mock"});
#line 1698
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 1699
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1700
 testRunner.And("System have UserActivity collection with JSON format are", "   []", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1704
    testRunner.When("UserProfile \'teacher@mindsage.com\' enter LessonId \'Lesson01\' from ClassRoom \'Clas" +
                    "sRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1705
    testRunner.Then("System doesn\'t upsert UserProfile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1706
 testRunner.And("System doesn\'t update UserActivity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1707
 testRunner.And("System doesn\'t send lesson information back", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Enter_Lesson")]
        [Xunit.TraitAttribute("Description", "Teacher enter a lesson but used ClassRoom incorrect (unknow) Then system send les" +
            "son information back with teacher lesson plan")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherEnterALessonButUsedClassRoomIncorrectUnknowThenSystemSendLessonInformationBackWithTeacherLessonPlan()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher enter a lesson but used ClassRoom incorrect (unknow) Then system send les" +
                    "son information back with teacher lesson plan", new string[] {
                        "mock"});
#line 1710
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 1711
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1712
    testRunner.When("UserProfile \'teacher@mindsage.com\' enter LessonId \'Lesson01\' from ClassRoom \'Unkn" +
                    "owClassRoom\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1713
    testRunner.Then("System doesn\'t upsert UserProfile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1714
 testRunner.And("System doesn\'t update UserActivity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1715
 testRunner.And("System doesn\'t send lesson information back", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Enter_Lesson")]
        [Xunit.TraitAttribute("Description", "Teacher enter a lesson but used ClassRoom incorrect (empty) Then system send less" +
            "on information back with teacher lesson plan")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherEnterALessonButUsedClassRoomIncorrectEmptyThenSystemSendLessonInformationBackWithTeacherLessonPlan()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher enter a lesson but used ClassRoom incorrect (empty) Then system send less" +
                    "on information back with teacher lesson plan", new string[] {
                        "mock"});
#line 1718
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 1719
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1720
    testRunner.When("UserProfile \'teacher@mindsage.com\' enter LessonId \'Lesson01\' from ClassRoom \'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1721
    testRunner.Then("System doesn\'t upsert UserProfile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1722
 testRunner.And("System doesn\'t update UserActivity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1723
 testRunner.And("System doesn\'t send lesson information back", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Enter_Lesson")]
        [Xunit.TraitAttribute("Description", "Teacher enter a lesson but used ClassRoom incorrect (null) Then system send lesso" +
            "n information back with teacher lesson plan")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherEnterALessonButUsedClassRoomIncorrectNullThenSystemSendLessonInformationBackWithTeacherLessonPlan()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher enter a lesson but used ClassRoom incorrect (null) Then system send lesso" +
                    "n information back with teacher lesson plan", new string[] {
                        "mock"});
#line 1726
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 1727
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1728
    testRunner.When("UserProfile \'teacher@mindsage.com\' enter LessonId \'Lesson01\' from ClassRoom \'NULL" +
                    "\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1729
    testRunner.Then("System doesn\'t upsert UserProfile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1730
 testRunner.And("System doesn\'t update UserActivity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1731
 testRunner.And("System doesn\'t send lesson information back", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Enter_Lesson")]
        [Xunit.TraitAttribute("Description", "Teacher enter a lesson but used LessonId incorrect (unknow) Then system send less" +
            "on information back with teacher lesson plan")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherEnterALessonButUsedLessonIdIncorrectUnknowThenSystemSendLessonInformationBackWithTeacherLessonPlan()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher enter a lesson but used LessonId incorrect (unknow) Then system send less" +
                    "on information back with teacher lesson plan", new string[] {
                        "mock"});
#line 1734
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 1735
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1736
    testRunner.When("UserProfile \'teacher@mindsage.com\' enter LessonId \'UnknowLesson\' from ClassRoom \'" +
                    "ClassRoom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1737
    testRunner.Then("System doesn\'t upsert UserProfile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1738
 testRunner.And("System doesn\'t update UserActivity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1739
 testRunner.And("System doesn\'t send lesson information back", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Enter_Lesson")]
        [Xunit.TraitAttribute("Description", "Teacher enter a lesson but used LessonId incorrect (empty) Then system send lesso" +
            "n information back with teacher lesson plan")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherEnterALessonButUsedLessonIdIncorrectEmptyThenSystemSendLessonInformationBackWithTeacherLessonPlan()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher enter a lesson but used LessonId incorrect (empty) Then system send lesso" +
                    "n information back with teacher lesson plan", new string[] {
                        "mock"});
#line 1742
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 1743
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1744
    testRunner.When("UserProfile \'teacher@mindsage.com\' enter LessonId \'\' from ClassRoom \'ClassRoom01\'" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1745
    testRunner.Then("System doesn\'t upsert UserProfile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1746
 testRunner.And("System doesn\'t update UserActivity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1747
 testRunner.And("System doesn\'t send lesson information back", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Enter_Lesson")]
        [Xunit.TraitAttribute("Description", "Teacher enter a lesson but used LessonId incorrect (null) Then system send lesson" +
            " information back with teacher lesson plan")]
        [Xunit.TraitAttribute("Category", "mock")]
        public virtual void TeacherEnterALessonButUsedLessonIdIncorrectNullThenSystemSendLessonInformationBackWithTeacherLessonPlan()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Teacher enter a lesson but used LessonId incorrect (null) Then system send lesson" +
                    " information back with teacher lesson plan", new string[] {
                        "mock"});
#line 1750
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 1751
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1752
    testRunner.When("UserProfile \'teacher@mindsage.com\' enter LessonId \'NULL\' from ClassRoom \'ClassRoo" +
                    "m01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1753
    testRunner.Then("System doesn\'t upsert UserProfile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1754
 testRunner.And("System doesn\'t update UserActivity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1755
 testRunner.And("System doesn\'t send lesson information back", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                Enter_LessonFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                Enter_LessonFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
