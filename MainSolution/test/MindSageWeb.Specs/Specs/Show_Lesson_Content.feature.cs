// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlow.GeneratedTests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class Show_Lesson_ContentFeature : Xunit.IClassFixture<Show_Lesson_ContentFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Show_Lesson_Content.feature"
#line hidden
        
        public Show_Lesson_ContentFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Show_Lesson_Content", "In order to avoid silly mistakes\r\nAs a math idiot\r\nI want to be told the sum of t" +
                    "wo numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
 testRunner.Given("Initialize mocking data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("System have ClassRoom collection with JSON format are", @"[
    {
        ""id"": ""ClassRoom01"",
        ""Name"": ""Emotional literacy"",
        ""CourseCatalogId"": ""CourseCatalog01"",
        ""CreatedDate"": ""2/1/2016"",
        ""Message"": ""Don't forget to comment a lesson!"",
        ""Lessons"":
        [
            {
                ""id"": ""Lesson01"",
                ""TotalLikes"": 0,
                ""LessonCatalogId"": ""LessonCatalog01""
            },
            {
                ""id"": ""Lesson02"",
                ""TotalLikes"": 5,
                ""LessonCatalogId"": ""LessonCatalog02""
            },
            {
                ""id"": ""Lesson03"",
                ""TotalLikes"": 0,
                ""LessonCatalogId"": ""LessonCatalog03""
            },
        ]
    }
]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 38
    testRunner.And("System have LessonCatalog collection with JSON format are", @"[
    {
        ""id"": ""LessonCatalog01"",
        ""Title"": ""What Is Emotional Literacy?"",
        ""ShortTeacherLessonPlan"": ""short teacher lesson plan01"",
        ""FullTeacherLessonPlan"": ""full teacher lesson plan01"",
""PrimaryContentUrl"": ""PrimaryContent01"",
    },
    {
        ""id"": ""LessonCatalog02"",
        ""Title"": ""Intrinsic Education vs. Associative Learning"",
        ""ShortTeacherLessonPlan"": ""short teacher lesson plan02"",
        ""FullTeacherLessonPlan"": ""full teacher lesson plan02"",
""PrimaryContentUrl"": ""PrimaryContent02"",
    },
    {
        ""id"": ""LessonCatalog03"",
        ""Title"": ""Three: What Is Goodness?"",
        ""ShortTeacherLessonPlan"": ""short teacher lesson plan03"",
        ""FullTeacherLessonPlan"": ""full teacher lesson plan03"",
""PrimaryContentUrl"": ""PrimaryContent03"",
    },
]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 64
    testRunner.And("System have ClassCalendar collection with JSON format are", @"[
    {
        ""id"": ""ClassCalendar01"",
        ""BeginDate"": ""2/1/2016"",
        ""ClassRoomId"": ""ClassRoom01"",
        ""LessonCalendars"":
        [
            {
                ""Id"": ""LessonCalendar01"",
                ""LessonId"": ""Lesson01"",
                ""BeginDate"": ""2/1/2016"",
                ""LessonCatalogId"": ""LessonCatalog01""
            },
            {
                ""Id"": ""LessonCalendar02"",
                ""LessonId"": ""Lesson02"",
                ""BeginDate"": ""2/8/2016"",
                ""LessonCatalogId"": ""LessonCatalog02""
            },
            {
                ""Id"": ""LessonCalendar03"",
                ""LessonId"": ""Lesson03"",
                ""BeginDate"": ""2/15/2016"",
                ""LessonCatalogId"": ""LessonCatalog03""
            },
        ]
    },
]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 95
    testRunner.And("System have UserProfile collection with JSON format are", "[\r\n{\r\n\"id\": \"sakul@mindsage.com\",\r\n\"Subscriptions\":\r\n[\r\n{\r\n\t\"id\": \"Subscription01" +
                    "\",\r\n\t\"Role\": \"Teacher\",\r\n\t\"ClassRoomId\": \"ClassRoom01\",\r\n\t\"ClassCalendarId\": \"Cl" +
                    "assCalendar01\",\r\n},\r\n]\r\n},\r\n]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 112
 testRunner.And("System have UserActivity collection with JSON format are", @"[
{
""id"": ""UserActivity01"",
""UserProfileId"": ""sakul@mindsage.com"",
""ClassRoomId"": ""ClassRoom01"",
""LessonActivities"":
[
{
	""id"": ""LessonActivity01"",
	""LessonId"": ""Lesson01"",

	""TotalContentsAmount"": 1,
	""SawContentIds"": [ ],
	""CreatedCommentAmount"": 0,
	""ParticipationAmount"": 0
},
{
	""id"": ""LessonActivity02"",
	""LessonId"": ""Lesson02"",

	""TotalContentsAmount"": 1,
	""SawContentIds"": [ ],
	""CreatedCommentAmount"": 0,
	""ParticipationAmount"": 0
}
]
}
]", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        public virtual void SetFixture(Show_Lesson_ContentFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Show_Lesson_Content")]
        [Xunit.TraitAttribute("Description", "User open a course\'s lesson Then system send the selected lesson\'s content back")]
        public virtual void UserOpenACourseSLessonThenSystemSendTheSelectedLessonSContentBack()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User open a course\'s lesson Then system send the selected lesson\'s content back", new string[] {
                        "mock"});
#line 145
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 146
    testRunner.Given("Today is \'2/8/2016 00:00 am\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 147
    testRunner.When("UserProfile \'sakul@mindsage.com\' open the lesson \'Lesson02\' of ClassRoom: \'ClassR" +
                    "oom01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 148
    testRunner.Then("System send lesson\'s content with JSON format is", @"{
    ""id"": ""Lesson02"",
    ""Title"": ""Intrinsic Education vs. Associative Learning"",
    ""ShortTeacherLessonPlan"": ""short teacher lesson plan02"",
    ""FullTeacherLessonPlan"": ""full teacher lesson plan02"",
    ""CourseMessage"": ""Don't forget to comment a lesson!"",
    ""TotalLikes"": 5,
    ""IsTeacher"": true
}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 160
 testRunner.And("System update UserActivity collection with JSON format is", @"{
""id"": ""UserActivity01"",
""UserProfileId"": ""sakul@mindsage.com"",
""ClassRoomId"": ""ClassRoom01"",
""LessonActivities"":
[
{
""id"": ""LessonActivity01"",
""LessonId"": ""Lesson01"",

""TotalContentsAmount"": 1,
""SawContentIds"": [ ],
""CreatedCommentAmount"": 0,
""ParticipationAmount"": 0
},
{
""id"": ""LessonActivity02"",
""LessonId"": ""Lesson02"",

""TotalContentsAmount"": 1,
""SawContentIds"": 
[
	""PrimaryContent02""
],
""CreatedCommentAmount"": 0,
""ParticipationAmount"": 0
}
]
}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                Show_Lesson_ContentFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                Show_Lesson_ContentFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
